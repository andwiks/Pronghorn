<?php
/**
 * @file
 * logintoboggan_services.module
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_services_resources().
 */
function logintoboggan_services_services_resources() {
  $definition = array(
    'user' => array(
      'actions' => array(
        'logintoboggan' => array(
          'help' => 'Login a user for a new session with their email address or username.',
          'callback' => 'logintoboggan_services_login',
          'documentation callback' => 'logintoboggan_services_login_doc',
          'access callback' => 'services_access_menu',
          'args' => array(
            array(
              'name' => 'username',
              'type' => 'string',
              'description' => 'A valid username or email address',
              'source' => array(
                'data' => 'username',
                'param' => 'username',
              ),
              'optional' => FALSE,
              'http_method' => 'POST',
            ),
            array(
              'name' => 'password',
              'type' => 'string',
              'description' => 'A valid password',
              'source' => array(
                'data' => 'password',
                'param' => 'password',
              ),
              'optional' => FALSE,
              'http_method' => 'POST',
            ),
          ),
        ),
      ),
    ),
  );
  return $definition;
}

/**
 * Callback Functions.
 */

/**
 * Resources callback for logintoboggan.
 */
function logintoboggan_services_login($username_email, $password){
  // Define default username.
  $username = $username_email;
  //If an email was used, get the username from that.
  if (valid_email_address($username_email)){
    // Load user from mail.
    $account = user_load_by_mail($username_email);
    // Check whether we can get a user.
    if (isset($account->name) && !empty($account->name)) {
      $username = $account->name;
    }
  }

  //Pass through to the existing services callback.
  module_load_include('inc', 'services', 'resources/user_resource');
  return _user_resource_login($username, $password);
}

/**
 * Documentation callback for user actions logintoboggan.
 */
function logintoboggan_services_login_doc() {
  global $base_url;
  $response = '
    {
        "sessid": "fv7TTc1Zm_TtA_6WERjUctEIlCWtPYv_NTvp9q9VWTk",
        "session_name": "SESS096a60c6696a645aa88f9ed2490b0b77",
        "token": "keObqMPEx78RGZXhQBqzFf3y3WOOEPxJrts6WVGArJg",
        "user": {
            "uid": "9",
            "name": "andreas",
            "mail": "andreas@drupal.or.id",
            "theme": "",
            "signature": "",
            "signature_format": "filtered_html",
            "created": "1421914415",
            "access": "1421915046",
            "login": 1421915845,
            "status": "1",
            "timezone": null,
            "language": "",
            "picture": null,
            "data": false,
            "roles": {
                "2": "authenticated user"
            },
            "rdf_mapping": {
                "rdftype": [
                    "sioc:UserAccount"
                ],
                "name": {
                    "predicates": [
                        "foaf:name"
                    ]
                },
                "homepage": {
                    "predicates": [
                        "foaf:page"
                    ],
                    "type": "rel"
                }
            }
        }
    }
  ';
  $element = array(
    '#name' => t('Logintoboggan Service'),
    '#description' => t('Login a user for a new session with their email address or username. Token response needed for Session authentication as header X-CSRF-Token.'),
    '#auth' => FALSE,
    '#path' => 'user/logintoboggan',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/user/logintoboggan.json<br />POST data x-www-form-urlencoded: username=andreas%40drupal.or.id&amp;password=1234 <br />POST data application/json: {"username": "andreas@drupal.or.id","password": "1234"}<br />',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'csrf_validation' => array(
        '#question' => '401 Unauthorized: CSRF Validation Failed',
        '#description' => t('When drupal detect that the user already login from other site. Header X-CSRF-Token is needed.'),
        '#response' => '
        [
          "CSRF validation failed"
        ]',
      ),
      'missing_requirement' => array(
        '#question' => '401 Unauthorized: Missing required argument @arg',
        '#description' => t('Required argument: username and password.'),
        '#response' => '
        [
            "Missing required argument @arg"
        ]',
      ),
      'wrong_credential' => array(
        '#question' => '401 Unauthorized: Wrong username or password',
        '#description' => t('When username and password not match.'),
        '#response' => '
        [
          "Wrong username or password."
        ]',
      ),
      'user_blocked' => array(
        '#question' => '403 : The username %username has not been activated or is blocked.',
        '#description' => t('When username is not activated or blocked.'),
        '#response' => '
        [
          "The username %username has not been activated or is blocked."
        ]',
      ),
      'already_logged' => array(
        '#question' => '406 Not Acceptable: Already logged in as @username.',
        '#description' => t('When user already logged in.'),
        '#response' => '
        [
          "Already logged in as @username."
        ]',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}
