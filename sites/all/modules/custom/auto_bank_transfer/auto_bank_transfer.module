<?php
/**
 * @file
 * bca.module
 */

/* implement hook_permission(). */
function auto_bank_transfer_permission() {
  return array(
    "bca_configuration" => array(
      'title' => t('BCA Configuration'),
      'description' => t('BCA Bank Tranfer Configuration'),
    ),
		"mandiri_configuration" => array(
      'title' => t('Mandiri Configuration'),
      'description' => t('Mandiri Bank Tranfer Configuration'),
    ),
  );
}

/* implement hook_menu(). */
function auto_bank_transfer_menu() {
  $items = array();

  $items['admin/commerce/config/bca'] = array(
    'title'            => t('BCA Configuration'),
    'description'      => t('BCA Bank Tranfer Configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('bca_admin_form'),
    'access arguments' => array('bca_configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );
  
  $items['admin/commerce/config/bca/list_file'] = array(
    'title'            => t('List BCA File'),
    'description'      => t('List of BCA Bank Tranfer CSV File'),
    'page callback'    => 'bca_list_file',
    'access arguments' => array('bca_configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['bca'] = array(
    'title'            => t('BCA'),
    'description'      => t('BCA Bank Tranfer'),
    'page callback'    => 'bca_confirm_payment',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );
	
	// mandiri
  
  $items['admin/commerce/config/mandiri/list_file'] = array(
    'title'            => t('List Mandiri File'),
    'description'      => t('List of Mandiri Bank Tranfer CSV File'),
    'page callback'    => 'mandiri_list_file',
    'access arguments' => array('mandiri_configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['mandiri'] = array(
    'title'            => t('Mandiri'),
    'description'      => t('Mandiri Bank Tranfer'),
    'page callback'    => 'mandiri_confirm_payment',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );


  return $items;  
}

// admin page.
function bca_admin_form($form, &$form_state) {
  // load order by total order

  $form['bca_csv_file_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('BCA CSV file folder'),
    '#required' => true,
    '#default_value' => variable_get('bca_csv_file_folder', 'sites/default/files/bank/bca')
  );
	
	$form['activate_bca_cron'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate BCA Cron'),
    '#default_value' => variable_get('activate_bca_cron', 1)
  );
	
	$form['mandiri_csv_file_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('Mandiri CSV file folder'),
    '#required' => true,
    '#default_value' => variable_get('mandiri_csv_file_folder', 'sites/default/files/bank/mandiri')
  );
	
	$form['activate_mandiri_cron'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate Mandiri Cron'),
    '#default_value' => variable_get('activate_mandiri_cron', 0)
  );
	
  return system_settings_form($form);
}

//function to get content of BCA CSV file
function bca_list_file() {
  $dir = variable_get('bca_csv_file_folder', 'sites/default/files/bank/bca');
  $files = scandir($dir);

  foreach ($files as $file) {
    $filepath = $dir . '/' . $file;
    $file_parts = pathinfo($filepath);

    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE && $file_parts['extension'] == 'csv') {
      $output = "<p><b>File " . $file . "</b> last modified: " . date ("F d Y H:i:s.", filemtime($filepath)) . "</p>\n";
      $output .= "<table>";
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        if ($num == 5) {
          $output .= "<tr>";
          $row++;
          for ($c=0; $c < $num; $c++) {
            $output .= "<td>";
            $output .= $data[$c];
            $output .= "</td>";
          }
          $output .= "</tr>";
        }

      }
      $output .= "</table>";
      fclose($handle);
    }
  }
  drupal_add_css('.field-item.even table tr td {border: 1px solid #000;padding: 5px;}', array('type' => 'inline'));
  return $output;
}

// function to read csv
function bca_read_csv() {
  $dir = variable_get('bca_csv_file_folder', 'sites/default/files/bank/bca');
  $files = scandir($dir);
  $payment = array();
  foreach ($files as $file) {
    $filepath = $dir . '/' . $file;
    $file_parts = pathinfo($filepath);

    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE && $file_parts['extension'] == 'csv') {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        if ($num == 5 && $data[3] != 'Jumlah' && strpos($data[3], 'CR')) {
          $amount = str_replace(array(',', '.00', ' CR'), '', $data[3]);
          // only uniq amount processed
          if ($amount % 1000 != 0) {
            $payment[] = (float)$amount;
          }
        }
      }
      fclose($handle);
      // delete bca csv file
      $newfile = 'sites/default/files/bank/summary_bca/bca-' . date('dmy') . '.csv';

      @copy($filepath, $newfile);
      @drupal_unlink($filepath);
    }
    
  }
  $payments = variable_get('bca_payment_record', array());
  $all_payment = array_merge($payments, $payment);
  $all_payment = array_unique($all_payment);
  variable_set('bca_payment_record', $all_payment);
}

// function to confirm payment
function bca_confirm_payment() {
  //read csv
  bca_read_csv();
  $all_payment = variable_get('bca_payment_record', array());
  $trans_log = array();
  foreach ($all_payment as $key => $payment) {
    // load order by total order
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_order');
    $query->propertyCondition('status', 'pending');
    $query->fieldCondition('commerce_order_total', 'amount', $payment);
    $result = $query->execute();
    if (isset($result['commerce_order'])) {
      $order_ids = array_keys($result['commerce_order']);
      dpm($order_ids);
      $order = commerce_order_load($order_ids[0]);
      dpm($order);

      foreach ($order_ids as $order_id) {
        // load commerce payment transaction by order_id and bank transfer method
        $payment_confirm = 0;
        foreach (commerce_payment_transaction_load_multiple(array(), 
            array(
              'order_id' => $order_id,
              'payment_method' => 'bank_transfer',
              'status' => 'pending')) 
            as $transaction) {
          
          $order = commerce_order_load($order_id);
          // compare total amount
          if ($order->commerce_order_total['und'][0]['amount'] == $transaction->amount) {
            // if same = confirm payment
            $transaction->status = 'success';
            commerce_payment_transaction_save($transaction);
            
            $trans_log[] = 'order id: ' . $transaction->order_id;
            $payment_confirm = 1;

          } else {
            // if not same = delete payment
            commerce_payment_transaction_delete($transaction->transaction_id);
          }
        }
        if ($payment_confirm == 0) {
          $transaction = commerce_payment_transaction_new('bank_transfer', $order->order_id);
          $transaction->instance_id = 'bank_transfer|commerce_payment_bank_transfer';
          $transaction->amount = $payment;
          $transaction->currency_code = 'IDR';
          $transaction->status = 'success';
          commerce_payment_transaction_save($transaction);
          $trans_log[] = 'order id: ' . $transaction->order_id;
        }
      }
    }

    // search payment --old approach
    /*foreach (commerce_payment_transaction_load_multiple(array(), 
        array(
          'amount' => $payment, 
          'payment_method' => 'bank_transfer',
          'status' => 'pending')) 
        as $transaction) {
      $order = commerce_order_load($transaction->order_id);
      if ($order->status == 'pending') {
        // confirm payment
        $transaction->status = 'success';
        commerce_payment_transaction_save($transaction);
        // delete payment
        
        $trans_log[] = 'order id: ' . $transaction->order_id;
      }
    }*/
  }
  variable_set('bca_payment_record', array());
  // set log
  watchdog('bca_confirm_payment', 'All payment <pre>'. print_r($all_payment, TRUE) .'</pre>');
  watchdog('bca_confirm_payment', 'Success payment <pre>'. print_r($trans_log, TRUE) .'</pre>');

}


//function to get content of Mandiri CSV file
function mandiri_list_file() {
  $dir = variable_get('mandiri_csv_file_folder', 'sites/default/files/bank/mandiri');
  $files = scandir($dir);

  foreach ($files as $file) {
    $filepath = $dir . '/' . $file;
    $file_parts = pathinfo($filepath);

    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE && $file_parts['extension'] == 'csv') {
      $output = "<p><b>File " . $file . "</b> last modified: " . date ("F d Y H:i:s.", filemtime($filepath)) . "</p>\n";
      $output .= "<table>";
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        //if ($num == 5) {
          $output .= "<tr>";
          $row++;
          for ($c=0; $c < $num; $c++) {
            $output .= "<td>";
            $output .= $data[$c];
            $output .= "</td>";
          }
          $output .= "</tr>";
        //}

      }
      $output .= "</table>";
      fclose($handle);
    }
  }
  drupal_add_css('.field-item.even table tr td {border: 1px solid #000;padding: 5px;}', array('type' => 'inline'));
  return $output;
}


// mandiri function to read csv
function mandiri_read_csv() {
  $dir = variable_get('mandiri_csv_file_folder', 'sites/default/files/bank/mandiri');
  $files = scandir($dir);
  $payment = array();
  foreach ($files as $file) {
    $filepath = $dir . '/' . $file;
    $file_parts = pathinfo($filepath);

    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE && $file_parts['extension'] == 'csv') {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        if ($data[8] != 'Credit') {
          $amount = str_replace(array(',', '.00'), '', $data[8]);
          // only uniq amount processed
					if (!empty($amount)) {
						if ($amount % 1000 != 0) {
							$payment[] = (float)$amount;
						}
					}
        }
      }
      fclose($handle);
				
      // delete mandiri csv file
      $newfile = 'sites/default/files/bank/summary_mandiri/mandiri-' . date('dmy') . '.csv';

      @copy($filepath, $newfile);
      @drupal_unlink($filepath);
    }
    
  }
  $payments = variable_get('mandiri_payment_record', array());
  $all_payment = array_merge($payments, $payment);
  $all_payment = array_unique($all_payment);
  variable_set('mandiri_payment_record', $all_payment);
}

// mandiri function to confirm payment
function mandiri_confirm_payment() {
  //read csv
  mandiri_read_csv();
  $all_payment = variable_get('mandiri_payment_record', array());
  $trans_log = array();
  foreach ($all_payment as $key => $payment) {
    // load order by total order
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_order');
    $query->propertyCondition('status', 'pending');
    $query->fieldCondition('commerce_order_total', 'amount', $payment);
    $result = $query->execute();
    if (isset($result['commerce_order'])) {
      $order_ids = array_keys($result['commerce_order']);
      $order = commerce_order_load($order_ids[0]);

      foreach ($order_ids as $order_id) {
        // load commerce payment transaction by order_id and bank transfer method
        $payment_confirm = 0;
        foreach (commerce_payment_transaction_load_multiple(array(), 
            array(
              'order_id' => $order_id,
              'payment_method' => 'bank_transfer',
              'status' => 'pending')) 
            as $transaction) {
          
          $order = commerce_order_load($order_id);
          // compare total amount
          if ($order->commerce_order_total['und'][0]['amount'] == $transaction->amount) {
            // if same = confirm payment
            $transaction->status = 'success';
            commerce_payment_transaction_save($transaction);
            
            $trans_log[] = 'order id: ' . $transaction->order_id;
            $payment_confirm = 1;

          } else {
            // if not same = delete payment
            commerce_payment_transaction_delete($transaction->transaction_id);
          }
        }
        if ($payment_confirm == 0) {
          $transaction = commerce_payment_transaction_new('bank_transfer', $order->order_id);
          $transaction->instance_id = 'bank_transfer|commerce_payment_bank_transfer';
          $transaction->amount = $payment;
          $transaction->currency_code = 'IDR';
          $transaction->status = 'success';
          commerce_payment_transaction_save($transaction);
          $trans_log[] = 'order id: ' . $transaction->order_id;
        }
      }
    }
  }
  variable_set('mandiri_payment_record', array());
  // set log
  watchdog('mandiri_confirm_payment', 'All payment Mandiri<pre>'. print_r($all_payment, TRUE) .'</pre>');
  watchdog('mandiri_confirm_payment', 'Success payment Mandiri<pre>'. print_r($trans_log, TRUE) .'</pre>');

}

/* implement hook_cron(). */
function auto_bank_transfer_cron() {
	$bca = variable_get('activate_bca_cron', 1);
	$mandiri = variable_get('activate_mandiri_cron', 0);
  if ($bca == 1) bca_confirm_payment();
  if ($mandiri == 1) mandiri_confirm_payment();
}
