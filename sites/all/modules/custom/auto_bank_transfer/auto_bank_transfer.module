<?php
/**
 * @file
 * bca.module
 */

/* implement hook_permission(). */
function auto_bank_transfer_permission() {
  return array(
    "bca_configuration" => array(
      'title' => t('BCA Configuration'),
      'description' => t('BCA Bank Tranfer Configuration'),
    ),
    "mandiri_configuration" => array(
      'title' => t('Mandiri Configuration'),
      'description' => t('Mandiri Bank Tranfer Configuration'),
    ),
  );
}

/* implement hook_menu(). */
function auto_bank_transfer_menu() {
  $items = array();

  $items['admin/commerce/config/abt'] = array(
    'title'            => t('Auto Bank Transfer'),
    'description'      => t('Auto Bank Tranfer Configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('auto_bank_transfer_admin_form'),
    'access arguments' => array('bca_configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'auto_bank_transfer.admin.inc'
  );
  
  $items['admin/commerce/config/abt/list_file_bca'] = array(
    'title'            => t('BCA Latest File'),
    'description'      => t('Latest BCA Bank Tranfer CSV File'),
    'page callback'    => 'bca_list_file',
    'access arguments' => array('bca_configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 3,
    'file'             => 'auto_bank_transfer.admin.inc'
  );

  $items['admin/commerce/config/abt/list_file_mandiri'] = array(
    'title'            => t('Mandiri Latest File'),
    'description'      => t('Latest Mandiri Bank Tranfer CSV File'),
    'page callback'    => 'mandiri_list_file',
    'access arguments' => array('mandiri_configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 4,
    'file'             => 'auto_bank_transfer.admin.inc'
  );

  $items['admin/commerce/config/abt/bca_overview'] = array(
    'title'            => t('BCA Auto Transaction Overview'),
    'description'      => t('List of Logged BCA Bank Tranfer'),
    'page callback'    => 'auto_bank_transfer_bca_overview',
    'access arguments' => array('bca_configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 1,
    'file'             => 'auto_bank_transfer.admin.inc'
  );

  $items['admin/commerce/config/abt/mandiri_overview'] = array(
    'title'            => t('Mandiri Auto Transaction Overview'),
    'description'      => t('List of Logged Mandiri Bank Tranfer'),
    'page callback'    => 'auto_bank_transfer_mandiri_overview',
    'access arguments' => array('mandiri_configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 2,
    'file'             => 'auto_bank_transfer.admin.inc'
  );    

  return $items;  
}

// function to read csv
function bca_read_csv() {
  $dir = variable_get('bca_csv_file_folder', 'sites/default/files/bank/bca');
  $files = abt_getCSVFiles($dir);
  
  if(!empty($files)){
    //read only 1 file, OLDEST.
    $filename = $files[count($files)-1];

    //$filepath = 'ftp://sepftp:53pulsa_2015ftp@gapura.sepulsa.net/home/sepftp/files/s3fs-public/bank/amazon.csv';
    $ftp = variable_get('auto_bank_transfer_ftp',0);
    if($ftp){
      $fsettings = variable_get('abt_ftp_detail');
      $filepath = 'ftp://'.$fsettings['username'].':'.$fsettings['password'].'@'.$fsettings['domain'].$filename;
    }

    $payment = array();
    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE) {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        if ($num == 5 && $data[3] != 'Jumlah' && strpos($data[3], 'CR')) {
          $amount = str_replace(array(',', '.00', ' CR'), '', $data[3]);
          // only uniq amount processed
          if ($amount % 1000 != 0) {
            $payment[] = array(
              $data[1],
              (int)$amount
            );
          }
        }
      }
      fclose($handle);
      // delete bca csv file
      $mydir = file_default_scheme() . '://bank/summary_bca';
      $newfile = $mydir.'/bca-' . date('dmy') . '.csv';
      file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
      @copy($filepath, $newfile);

      if(variable_get('auto_bank_transfer_logging', 0)){
        //save raw csv for future use
        $mydir = file_default_scheme() . '://bank/raw_bca';
        $rawfile = $mydir.'/bca-'.date('dmy-Gi').'.csv';
        file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
        @copy($filepath, $rawfile);
      }
      @drupal_unlink($filepath);
    }
    
    // Get last known pointer
    $pointer = variable_get('bca_payment_pointer',0);

    // Get up to 3 last data from table and compare it with CSV from pointer
    $result = db_query_range("SELECT * FROM {auto_bank_bca} ORDER BY abbid DESC",0,3);

    // If query successful run security check
    if($result){
      $flag = true;
      $counter = 1;
      $match=0;
      $read_log = array();
      foreach($result as $item){
        // Log table read
        $read_log['a-desc'.$counter] = $item->description;
        $read_log['a-amount'.$counter] = $item->amount;
        
        if(!empty($payment[$pointer-$counter])){
          // Log CSV read
          $read_log['b-desc'.$counter] = $payment[$pointer-$counter][0];
          $read_log['b-amount'.$counter] = $payment[$pointer-$counter][1];
          if($payment[$pointer-$counter][0] != $item->description || $payment[$pointer-$counter][1] != $item->amount) $flag = false;
          $counter++;
          $match++;
        }else{
          $read_log['b'.$counter] = 'Empty on pointer: '.($pointer-$counter);
          $flag = false;
        }
      }
      
      if($flag){
        // If empty read log, assume table empty
        if(empty($read_log)){
          $pointer = 0;
          if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('bca_read_csv', 'Empty Table. Reseting Pointer.'); }
        }else{
          //data match, splice it, ignore pointer and above
          $payment = array_slice($payment,$pointer);
          if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('bca_read_csv', 'Data Match: <pre>'. print_r($read_log, TRUE) .'</pre>'.$filename); }
        }
      }else{
        // data not match OR CSV less than 3
        // if data less than 3, move pointer to last known match
        $pointer = $match;
        $payment = array_slice($payment,$pointer);
        if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('bca_read_csv', 'Data Not Match: <pre>'. print_r($read_log, TRUE) .'</pre>'.$filename); }
      }
    } else {
      //For unknown reason, query has failed
      watchdog('bca_read_csv','Query failed.<pre>'.$result.'</pre>');
      return false;
    }

    if(!empty($payment)){
      //Insert new data to table.
      $newData = array();
      $dupeData = array();
      foreach($payment as $value){
        // Adding a 2nd layer of security before insert. Since we MIGHT come into partial CSV file read.
        // Checking if the data already on table or not.
        $sql = db_query("SELECT abbid FROM {auto_bank_bca} WHERE description = :description AND amount = :amount",
          array(':description' => $value[0], 'amount' => $value[1]));
        // Query successfuly executed
        if($sql){
          // No entry in database yet
          if($sql->rowCount() == 0){
            $lastid = db_insert('auto_bank_bca')
            ->fields(array(
              'description' => $value[0],
              'created' => time(),
              'amount' => $value[1],
            ))
            ->execute();
            $newData[$lastid] = $value[1];
            $pointer++;
          } else {
            // Log duplicated entry
            $dupeData[] = ($value[0].' - '.$value[1]);
          }
        } else {
          //For unknown reason, query has failed for 2nd layer of security
          watchdog('bca_read_csv','Query 2 failed.<pre>'.$result.'</pre>');
          return false;
        }
      }
      if(!empty($dupeData) && variable_get('auto_bank_transfer_logging', 0)==1){
        watchdog('bca_read_csv','Duplicate data:<pre>'.implode('<br>',$dupeData).'</pre>');
      }

      variable_set('bca_payment_pointer',$pointer);
      return $newData;
    }
  }
  // Reason: No new files, no new data
  if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('bca_read_csv','No new files or no new data'); }
  return false;
}

// function to confirm payment
function bca_confirm_payment() {
  $start = time();
  //read csv
  $all_payment = bca_read_csv();

  //if no new transaction, stop function
  if(empty($all_payment)){
    if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('bca_confirm_payment', 'No new transaction. Stopping.'); }
  }else{
    $trans_log = array();
    foreach ($all_payment as $key => $payment) {
      // load order by total order
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'commerce_order');
      $query->propertyCondition('status', 'pending');
      $query->fieldCondition('commerce_order_total', 'amount', $payment);
      $result = $query->execute();
      if (isset($result['commerce_order'])) {
        $order_ids = array_keys($result['commerce_order']);
        $order = commerce_order_load($order_ids[0]);
        // Check for single order id only
        if(count($order_ids) < 2){
          $order_id = $order_ids[0];
          // load commerce payment transaction by order_id and bank transfer method
          $payment_confirm = 0;
          foreach (commerce_payment_transaction_load_multiple(array(), 
              array(
                'order_id' => $order_id,
                'payment_method' => 'bank_transfer',
                'instance_id' => 'bank_transfer|commerce_payment_bca_bank_transfer',
                'status' => 'pending')) 
              as $transaction) {
            
            $order = commerce_order_load($order_id);
            // compare total amount & confirm for 1st payment only
            if ($order->commerce_order_total['und'][0]['amount'] == $transaction->amount && $payment_confirm == 0) {
              // if same = confirm payment
              $transaction->status = 'success';
              commerce_payment_transaction_save($transaction);
              
              $trans_log[] = 'Success-' . $transaction->order_id;
              $payment_confirm = 1;
              // Update auto bank transfer table
              db_update('auto_bank_bca')
              ->fields(array(
                'status' => 'Success',
                'updated' => time(),
                'order_id' => $order_id
              ))
              ->condition('abbid', $key, '=')
              ->execute();
            }
          }
          // If order found but payment not found or logged on different bank. Alert CS.
          if ($payment_confirm == 0) {
            /*
            $transaction = commerce_payment_transaction_new('bank_transfer', $order->order_id);
            $transaction->instance_id = 'bank_transfer|commerce_payment_bca_bank_transfer';
            $transaction->amount = $payment;
            $transaction->currency_code = 'IDR';
            $transaction->status = 'success';
            commerce_payment_transaction_save($transaction);
            */
            $trans_log[] = 'Anomaly-' . $order_id;
            // Update auto bank transfer table
            db_update('auto_bank_bca')
            ->fields(array(
              'status' => 'Anomaly',
              'updated' => time(),
              'order_id' => $order_id,
              'note' => 'Logged on BCA or payment not found.'
            ))
            ->condition('abbid', $key, '=')
            ->execute();
            $from = "info@sepulsa.com";
            $to = variable_get('auto_bank_transfer_CS', 'yeti@sepulsa.com');
            $message = "Order : ".$order_id." logged on Auto BCA confirmation or payment not found.";
            $subject = "Sepulsa - Auto bank transfer: Anomaly";
            $params = array(
              'subject' => $subject,
              'body' => $message,
            );
            drupal_mail('auto_bank_transfer', 'auto_bank_transfer_double_order', $to, language_default(), $params, $from);
          }
        }else{
          //Double order id. Log it then mail CS yeti@sepulsa.com
          db_update('auto_bank_bca')
            ->fields(array(
              'status' => 'Failed',
              'updated' => time(),
              'note' => 'More than 1 order found: '. implode(', ', $order_ids),
            ))
            ->condition('abbid', $key, '=')
            ->execute();

          $from = "info@sepulsa.com";
          $to = variable_get('auto_bank_transfer_CS', 'yeti@sepulsa.com');
          $message = "Order : ".implode(', ',$order_ids)." have the same amount of: ". $payment ." from Auto BCA confirmation";
          $subject = "Sepulsa - Auto bank transfer: More than 1 order on payment confirmation.";
          $params = array(
            'subject' => $subject,
            'body' => $message,
          );
          drupal_mail('auto_bank_transfer', 'auto_bank_transfer_double_order', $to, language_default(), $params, $from);
        }
      }
    }
    if(variable_get('auto_bank_transfer_logging', 0)){
      // set log success payment, if any.
      watchdog('bca_confirm_payment', 'Comparing payment: '.implode(', ',$all_payment).'<br>'."Result: ".implode(', ',$trans_log));
    }
  }
  if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('bca_confirm_payment', 'Time:' .(time() - $start).' s'); }
}

// mandiri function to read csv
function mandiri_read_csv() {
  $dir = variable_get('mandiri_csv_file_folder', 'sites/default/files/bank/mandiri');
  $files = abt_getCSVFiles($dir);
  
  if(!empty($files)){
    //read only 1 file, OLDEST.
    $filename = $files[count($files)-1];

    $ftp = variable_get('auto_bank_transfer_ftp',0);
    if($ftp){
      $fsettings = variable_get('abt_ftp_detail');
      $filepath = 'ftp://'.$fsettings['username'].':'.$fsettings['password'].'@'.$fsettings['domain'].$filename;
    }

    $payment = array();
    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE) {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        if ($data[8] != 'Credit') {
          $amount = str_replace(array(',', '.00'), '', $data[8]);
          // only uniq amount processed
          if (!empty($amount)) {
            if ($amount % 1000 != 0) {
              $payment[] = array(
                $data[4],
                (int)$amount,
              );
            }
          }
        }
      }
      fclose($handle);
        
      // delete mandiri csv file
      $mydir = file_default_scheme() . '://bank/summary_mandiri';
      $newfile = $mydir.'/mandiri-' . date('dmy') . '.csv';
      file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
      @copy($filepath, $newfile);

      if(variable_get('auto_bank_transfer_logging', 0)){
         //save raw csv for future use
        $mydir = file_default_scheme() . '://bank/raw_mandiri';
        $rawfile = $mydir.'/mandiri-'.date('dmy-Gi').'.csv';
        file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
        @copy($filepath, $rawfile);
      }
      @drupal_unlink($filepath);
    }
    
    // Get last known pointer
    $pointer = variable_get('mandiri_payment_pointer',0);

    // Freaking Mandiri have reversed order than BCA
    $payment = array_reverse($payment);

    // Get up to 3 last data from table and compare it with CSV from pointer
    $result = db_query_range("SELECT * FROM {auto_bank_mandiri} ORDER BY abmid DESC",0,3);
    
    // If query successful run security check
    if($result){
      $flag = true;
      $counter = 1;
      $match=0;
      $read_log = array();
      foreach($result as $item){
        // Log table read
        $read_log['a-desc'.$counter] = $item->description;
        $read_log['a-amount'.$counter] = $item->amount;
        
        if(!empty($payment[$pointer-$counter])){
          // Log CSV read
          $read_log['b-desc'.$counter] = $payment[$pointer-$counter][0];
          $read_log['b-amount'.$counter] = $payment[$pointer-$counter][1];
          if($payment[$pointer-$counter][0] != $item->description || $payment[$pointer-$counter][1] != $item->amount) $flag = false;
          $counter++;
          $match++;
        }else{
          $read_log['b'.$counter] = 'Empty on pointer: '.($pointer-$counter);
          $flag = false;
        }
      }
      
      if($flag){
        // If empty read log, assume table empty
        if(empty($read_log)){
          $pointer = 0;
          if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('mandiri_read_csv', 'Empty Table. Reseting Pointer.'); }
        }else{
          //data match, splice it, ignore pointer and above
          $payment = array_slice($payment,$pointer);
          if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('mandiri_read_csv', 'Data Match: <pre>'. print_r($read_log, TRUE) .'</pre>'.$filename); }
        }
      }else{
        // data not match OR CSV less than 3
        // if data less than 3, move pointer to last known match
        $pointer = $match;
        $payment = array_slice($payment,$pointer);
        if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('mandiri_read_csv', 'Data Not Match: <pre>'. print_r($read_log, TRUE) .'</pre>'.$filename); }
      }
    } else {
      //For unknown reason, query has failed
      watchdog('mandiri_read_csv','Query failed.<pre>'.$result.'</pre>');
      return false;
    }

    if(!empty($payment)){
      //Insert new data to table.
      $newData = array();
      $dupeData = array();
      foreach($payment as $value){
        // Adding a 2nd layer of security before insert. Since we MIGHT come into partial CSV file read.
        // Checking if the data already on table or not.
        $sql = db_query("SELECT abmid FROM {auto_bank_mandiri} WHERE description = :description AND amount = :amount",
          array(':description' => $value[0], 'amount' => $value[1]));
        // Query successfuly executed
        if($sql){
          // No entry in database yet
          if($sql->rowCount() == 0){
            $lastid = db_insert('auto_bank_mandiri')
            ->fields(array(
              'description' => $value[0],
              'created' => time(),
              'amount' => $value[1],
            ))
            ->execute();
            $newData[$lastid] = $value[1];
            $pointer++;
          } else {
            // Log duplicated entry
            $dupeData[] = ($value[0].' - '.$value[1]);
          }
        } else {
          //For unknown reason, query has failed for 2nd layer of security
          watchdog('mandiri_read_csv','Query 2 failed.<pre>'.$result.'</pre>');
          return false;
        }
      }
      if(!empty($dupeData) && variable_get('auto_bank_transfer_logging', 0)==1){
        watchdog('mandiri_read_csv','Duplicate data:<pre>'.implode('<br>',$dupeData).'</pre>');
      }
      
      variable_set('mandiri_payment_pointer',$pointer);
      return $newData;
    }
  }
  // Reason: No new files, no new data
  if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('mandiri_read_csv','No new files or no new data'); }
  return false;
}

// mandiri function to confirm payment
function mandiri_confirm_payment() {
  $start = time();
  //read csv
  $all_payment = mandiri_read_csv();

  //if no new transaction, stop function
  if(empty($all_payment)){
    if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('mandiri_confirm_payment', 'No new transaction. Stopping.'); }
  }else{
    $trans_log = array();
    foreach ($all_payment as $key => $payment) {
      // load order by total order
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'commerce_order');
      $query->propertyCondition('status', 'pending');
      $query->fieldCondition('commerce_order_total', 'amount', $payment);
      $result = $query->execute();
      if (isset($result['commerce_order'])) {
        $order_ids = array_keys($result['commerce_order']);
        $order = commerce_order_load($order_ids[0]);
        // Check for single order id only
        if(count($order_ids) < 2){
          $order_id = $order_ids[0];
          // load commerce payment transaction by order_id and bank transfer method
          $payment_confirm = 0;
          foreach (commerce_payment_transaction_load_multiple(array(), 
              array(
                'order_id' => $order_id,
                'payment_method' => 'bank_transfer',
                'instance_id' => 'bank_transfer|commerce_payment_mandiri_bank_transfer',
                'status' => 'pending')) 
              as $transaction) {
            
            $order = commerce_order_load($order_id);
            // compare total amount & confirm only 1st payment
            if ($order->commerce_order_total['und'][0]['amount'] == $transaction->amount && $payment_confirm == 0) {
              // if same = confirm payment
              $transaction->status = 'success';
              commerce_payment_transaction_save($transaction);
              
              $trans_log[] = 'Success-' . $transaction->order_id;
              $payment_confirm = 1;
              // Update auto bank transfer table
              db_update('auto_bank_mandiri')
              ->fields(array(
                'status' => 'Success',
                'updated' => time(),
                'order_id' => $order_id
              ))
              ->condition('abmid', $key, '=')
              ->execute();
            }
          }
          // If order found but payment not found or logged on different bank. Alert CS.
          if ($payment_confirm == 0) {
            $trans_log[] = 'Anomaly-' . $order_id;
            // Update auto bank transfer table
            db_update('auto_bank_mandiri')
            ->fields(array(
              'status' => 'Anomaly',
              'updated' => time(),
              'order_id' => $order_id,
              'note' => 'Logged on Mandiri or payment not found.'
            ))
            ->condition('abmid', $key, '=')
            ->execute();
            $from = "info@sepulsa.com";
            $to = variable_get('auto_bank_transfer_CS', 'yeti@sepulsa.com');
            $message = "Order : ".$order_id." logged on Auto Mandiri confirmation or payment not found.";
            $subject = "Sepulsa - Auto bank transfer: Anomaly";
            $params = array(
              'subject' => $subject,
              'body' => $message,
            );
            drupal_mail('auto_bank_transfer', 'auto_bank_transfer_double_order', $to, language_default(), $params, $from);
          }
        }else{
          //Double order id. Log it then mail CS yeti@sepulsa.com
          db_update('auto_bank_mandiri')
            ->fields(array(
              'status' => 'Failed',
              'updated' => time(),
              'note' => 'More than 1 order found: '. implode(', ', $order_ids),
            ))
            ->condition('abmid', $key, '=')
            ->execute();

          $from = "info@sepulsa.com";
          $to = variable_get('auto_bank_transfer_CS', 'yeti@sepulsa.com');
          $message = "Order : ".implode(', ',$order_ids)." have the same amount of: ". $payment ." from Auto Mandiri confirmation";
          $subject = "Sepulsa - Auto bank transfer: More than 1 order on payment confirmation.";
          $params = array(
            'subject' => $subject,
            'body' => $message,
          );
          drupal_mail('auto_bank_transfer', 'auto_bank_transfer_double_order', $to, language_default(), $params, $from);
        }
      }
    }
    if(variable_get('auto_bank_transfer_logging', 0)){
      // set log success payment, if any.
      watchdog('mandiri_confirm_payment', 'Comparing payment: '.implode(', ',$all_payment).'<br>'."Result: ".implode(', ',$trans_log));
    }
  }
  if(variable_get('auto_bank_transfer_logging', 0)){ watchdog('mandiri_confirm_payment', 'Time:' .(time() - $start).' s'); }
}

/* implement hook_cron(). */
function auto_bank_transfer_cron() {
  $bca = variable_get('activate_bca_cron', 1);
  $mandiri = variable_get('activate_mandiri_cron', 0);
  if ($bca == 1) bca_confirm_payment();
  if ($mandiri == 1) mandiri_confirm_payment();
}

/* implement hook_mail() */
function auto_bank_transfer_mail($key, &$message, $params) {
  switch ($key) {
    case 'auto_bank_transfer_double_order':
      $message['subject'] = $params['subject'];
      $message['body'] = array(0=>$params['body']);
    break;
    }
}

function auto_bank_transfer_date_popup_process_alter(&$element, &$form_state, $context) {
  if($form_state['build_info']['form_id']=='auto_bank_transfer_filter_form'){
    unset($element['date']['#description']);
    unset($element['time']['#description']);
  }
}

function abt_getCSVFiles($dir){
  // ftp://sepftp:53pulsa_2015ftp@gapura.sepulsa.net
  $ftp = variable_get('auto_bank_transfer_ftp',0);

  if($ftp){
    $fsettings = variable_get('abt_ftp_detail');
    $username = $fsettings['username'];
    $password = $fsettings['password'];
    $connect = ftp_connect($fsettings['domain']);
    $login_result = ftp_login($connect, $username, $password);
    $files = ftp_nlist($connect, $dir.'/.');
    $files = array_reverse($files);
  }else{
    $dirList = file_scan_directory($dir, '/.*\.csv$/');
    $files = array();
    foreach ($dirList as $file => $value) {
      $files[$file] = filemtime($file);
    }
    arsort($files);
    $files = array_keys($files);
  }
  
  return ($files) ? $files : false;
}