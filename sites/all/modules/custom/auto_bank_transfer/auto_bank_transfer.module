<?php
/**
 * @file
 * bca.module
 */

/* implement hook_permission(). */
function auto_bank_transfer_permission() {
  return array(
    "bca_configuration" => array(
      'title' => t('BCA Configuration'),
      'description' => t('BCA Bank Tranfer Configuration'),
    ),
		"mandiri_configuration" => array(
      'title' => t('Mandiri Configuration'),
      'description' => t('Mandiri Bank Tranfer Configuration'),
    ),
  );
}

/* implement hook_menu(). */
function auto_bank_transfer_menu() {
  $items = array();

  $items['admin/commerce/config/bca'] = array(
    'title'            => t('Auto Bank Transfer'),
    'description'      => t('Auto Bank Tranfer Configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('bca_admin_form'),
    'access arguments' => array('bca_configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );
  
  $items['admin/commerce/config/bca/list_file_bca'] = array(
    'title'            => t('List BCA File'),
    'description'      => t('List of BCA Bank Tranfer CSV File'),
    'page callback'    => 'bca_list_file',
    'access arguments' => array('bca_configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/config/bca/list_file_mandiri'] = array(
    'title'            => t('List Mandiri File'),
    'description'      => t('List of Mandiri Bank Tranfer CSV File'),
    'page callback'    => 'mandiri_list_file',
    'access arguments' => array('mandiri_configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/config/bca/list_table_bca'] = array(
    'title'            => t('BCA Table Detail'),
    'description'      => t('List of Logged BCA Bank Tranfer'),
    'page callback'    => 'bca_list_table',
    'access arguments' => array('bca_configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/config/bca/list_table_mandiri'] = array(
    'title'            => t('Mandiri Table Detail'),
    'description'      => t('List of Logged Mandiri Bank Tranfer'),
    'page callback'    => 'mandiri_list_table',
    'access arguments' => array('mandiri_configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );    

  $items['bca'] = array(
    'title'            => t('BCA'),
    'description'      => t('BCA Bank Tranfer'),
    'page callback'    => 'bca_confirm_payment',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );

  $items['mandiri'] = array(
    'title'            => t('Mandiri'),
    'description'      => t('Mandiri Bank Tranfer'),
    'page callback'    => 'mandiri_confirm_payment',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );


  return $items;  
}

// admin page.
function bca_admin_form($form, &$form_state) {
  // load order by total order

  $form['bca_csv_file_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('BCA CSV file folder'),
    '#required' => true,
    '#default_value' => variable_get('bca_csv_file_folder', 'sites/default/files/bank/bca')
  );
	
	$form['activate_bca_cron'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate BCA Cron'),
    '#default_value' => variable_get('activate_bca_cron', 1)
  );
	
	$form['mandiri_csv_file_folder'] = array(
    '#type' => 'textfield',
    '#title' => t('Mandiri CSV file folder'),
    '#required' => true,
    '#default_value' => variable_get('mandiri_csv_file_folder', 'sites/default/files/bank/mandiri')
  );
	
	$form['activate_mandiri_cron'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate Mandiri Cron'),
    '#default_value' => variable_get('activate_mandiri_cron', 0)
  );

  $form['auto_bank_transfer_CS'] = array(
    '#type' => 'textfield',
    '#title' => t('CS email to get notifications'),
    '#description' => t('List of email to get notified when there are more than 1 order to confirm.'),
    '#required' => true,
    '#default_value' => variable_get('auto_bank_transfer_CS', 'yeti@sepulsa.com')
  );  
	
  return system_settings_form($form);
}

//function to list BCA transaction table
function bca_list_table(){
  $header = array();
  $header[] = array('data' => t('ID'), 'field' => 'abbid', 'sort' => 'asc');
  $header[] = array('data' => t('Description'));
  $header[] = array('data' => t('Amount'), 'field' => 'amount');
  $header[] = array('data' => t('Created'), 'field' => 'created');
  $header[] = array('data' => t('Updated'), 'field' => 'updated');
  $header[] = array('data' => t('Order ID'), 'field' => 'order_id');
  $header[] = array('data' => t('Status'), 'field' => 'status');
  $header[] = array('data' => t('Note'));

  $query = db_select('auto_bank_bca')->extend('PagerDefault')->extend('TableSort');

  $result = $query
  ->fields('auto_bank_bca')
    ->orderByHeader($header)
    ->limit(50)
    ->execute();

  $rows = array();
  
  foreach ($result as $data) {
    $row = array();
    $row['data']['abbid'] = $data->abbid;
    $row['data']['description'] = $data->description;
    $row['data']['amount'] = number_format($data->amount);
    $row['data']['created'] = date('F j, G:i',$data->created);
    $row['data']['updated'] = date('F j, G:i',$data->updated);
    $row['data']['order_id'] = $data->order_id;
    $row['data']['status'] = $data->status;
    $row['data']['note'] = $data->note;
    

    // If the system path maps to a different URL alias, highlight this table
    // row to let the user know of old aliases.
    if ($data->status == 'Failed') {
      $row['class'] = array('warning');
    }

    $rows[] = $row;
  }

  $build['bca_list_table_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No Transactions Logged Yet.'),
  );
  $build['bca_list_table_pager'] = array('#theme' => 'pager');

  return $build;
}

//function to list Mandiri transaction table
function mandiri_list_table(){
  $header = array();
  $header[] = array('data' => t('ID'), 'field' => 'abmid', 'sort' => 'asc');
  $header[] = array('data' => t('Description'));
  $header[] = array('data' => t('Amount'), 'field' => 'amount');
  $header[] = array('data' => t('Created'), 'field' => 'created');
  $header[] = array('data' => t('Updated'), 'field' => 'updated');
  $header[] = array('data' => t('Order ID'), 'field' => 'order_id');
  $header[] = array('data' => t('Status'), 'field' => 'status');
  $header[] = array('data' => t('Note'));

  $query = db_select('auto_bank_mandiri')->extend('PagerDefault')->extend('TableSort');

  $result = $query
  ->fields('auto_bank_mandiri')
    ->orderByHeader($header)
    ->limit(50)
    ->execute();

  $rows = array();
  
  foreach ($result as $data) {
    $row = array();
    $row['data']['abmid'] = $data->abbid;
    $row['data']['description'] = $data->description;
    $row['data']['amount'] = number_format($data->amount);
    $row['data']['created'] = date('F j, G:i',$data->created);
    $row['data']['updated'] = date('F j, G:i',$data->updated);
    $row['data']['order_id'] = $data->order_id;
    $row['data']['status'] = $data->status;
    $row['data']['note'] = $data->note;
    

    // If the system path maps to a different URL alias, highlight this table
    // row to let the user know of old aliases.
    if ($data->status == 'Failed') {
      $row['class'] = array('warning');
    }

    $rows[] = $row;
  }

  $build['bca_list_table_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No Transactions Logged Yet.'),
  );
  $build['bca_list_table_pager'] = array('#theme' => 'pager');

  return $build;
}

//function to get content of BCA CSV file
function bca_list_file() {
  $dir = 'sites/default/files/bank/summary_bca';
  $files = scandir($dir);

  foreach ($files as $file) {
    $filepath = $dir . '/' . $file;
    $file_parts = pathinfo($filepath);

    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE && $file_parts['extension'] == 'csv') {
      $output = "<p><b>File " . $file . "</b> last modified: " . date ("F d Y H:i:s.", filemtime($filepath)) . "</p>\n";
      $output .= "<table>";
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        if ($num == 5) {
          $output .= "<tr>";
          $row++;
          for ($c=0; $c < $num; $c++) {
            $output .= "<td>";
            $output .= $data[$c];
            $output .= "</td>";
          }
          $output .= "</tr>";
        }

      }
      $output .= "</table>";
      fclose($handle);
    }
  }
  drupal_add_css('.field-item.even table tr td {border: 1px solid #000;padding: 5px;}', array('type' => 'inline'));
  return $output;
}

// function to read csv
function bca_read_csv() {
  $dir = variable_get('bca_csv_file_folder', 'sites/default/files/bank/bca');
  $files = scandir($dir);
  $payment = array();
  foreach ($files as $file) {
    $filepath = $dir . '/' . $file;
    $file_parts = pathinfo($filepath);

    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE && $file_parts['extension'] == 'csv') {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        if ($num == 5 && $data[3] != 'Jumlah' && strpos($data[3], 'CR')) {
          $amount = str_replace(array(',', '.00', ' CR'), '', $data[3]);
          // only uniq amount processed
          if ($amount % 1000 != 0) {
            $payment[] = array(
              $data[1],
              (int)$amount
            );
          }
        }
      }
      fclose($handle);
      // delete bca csv file
      $newfile = 'sites/default/files/bank/summary_bca/bca-' . date('dmy') . '.csv';
      $rawfile = 'sites/default/files/bank/raw_bca/bca-'.date('dmy-Gi').'.csv';

      $mydir = file_default_scheme() . '://bank/summary_bca';
      file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
      @copy($filepath, $newfile);

      //save raw csv for future use
      $mydir = file_default_scheme() . '://bank/raw_bca';
      file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
      @copy($filepath, $rawfile);

      @drupal_unlink($filepath);
    }
  }
  // Get last known pointer
  $pointer = variable_get('bca_payment_pointer',0);

  // Get up to 3 last data from table and compare it with CSV from pointer
  $result = db_query("SELECT * FROM {auto_bank_bca} ORDER BY abbid DESC LIMIT 3")->fetchAll();
  // If table not empty, run match check with note and amount field pair.
  if(!empty($result)){
    $flag = true;
    $counter = 1;
    foreach($result as $item){
      // Check if data from CSV pointer less than 3 then treat it as new data.
      if(!empty($payment[$pointer-$counter])){
        if($payment[$pointer-$counter][0] != $item->description || $payment[$pointer-$counter][1] != $item->amount) $flag = false;
        $counter++;
      }else{
        $flag = false;
      }
    }
    if($flag){
      //data match, splice it, ignore pointer and above
      $payment = array_slice($payment,$pointer);
    }else{
      //data not match, reset CSV pointer
      watchdog('bca_read_csv', 'Table data missmatch or CSV data less than 3, reset csv pointer');
      $pointer = 0;
    }
  } else {
    $pointer = 0;
  }
  //Insert new data to table.
  $temp = array();
  foreach($payment as $value){
    $lastid = db_insert('auto_bank_bca')
    ->fields(array(
      'description' => $value[0],
      'created' => time(),
      'amount' => $value[1],
    ))
    ->execute();
    $temp[$lastid] = $value[1];
    $pointer++;
  }

  //Set variable with new record only
  variable_set('bca_payment_record',$temp);
  variable_set('bca_payment_pointer',$pointer);
}

// function to confirm payment
function bca_confirm_payment() {
  //read csv
  bca_read_csv();
  $all_payment = variable_get('bca_payment_record', array());

  //if no new transaction, stop function
  if(empty($all_payment)){
    watchdog('bca_confirm_payment', 'No new transaction. Stopping.');    
  }else{
    watchdog('bca_confirm_payment', 'Comparing payment <pre>'. print_r($all_payment, TRUE) .'</pre>');
    $trans_log = array();

    foreach ($all_payment as $key => $payment) {
      // load order by total order
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'commerce_order');
      $query->propertyCondition('status', 'pending');
      $query->fieldCondition('commerce_order_total', 'amount', $payment);
      $result = $query->execute();
      if (isset($result['commerce_order'])) {
        $order_ids = array_keys($result['commerce_order']);
        $order = commerce_order_load($order_ids[0]);
        // Check for single order id only
        if(count($order_ids) < 2){
          $order_id = $order_ids[0];
          // load commerce payment transaction by order_id and bank transfer method
          $payment_confirm = 0;
          foreach (commerce_payment_transaction_load_multiple(array(), 
              array(
                'order_id' => $order_id,
                'payment_method' => 'bank_transfer',
                'status' => 'pending')) 
              as $transaction) {
            
            $order = commerce_order_load($order_id);
            // compare total amount
            if ($order->commerce_order_total['und'][0]['amount'] == $transaction->amount) {
              // if same = confirm payment
              $transaction->status = 'success';
              commerce_payment_transaction_save($transaction);
              
              $trans_log[] = 'order id: ' . $transaction->order_id;
              $payment_confirm = 1;
              // Update auto bank transfer table
              db_update('auto_bank_bca')
              ->fields(array(
                'status' => 'Success',
                'updated' => time(),
                'order_id' => $order_id
              ))
              ->condition('abbid', $key, '=')
              ->execute();

            } else {
              // if not same = delete payment
              commerce_payment_transaction_delete($transaction->transaction_id);
            }
          }
          if ($payment_confirm == 0) {
            $transaction = commerce_payment_transaction_new('bank_transfer', $order->order_id);
            $transaction->instance_id = 'bank_transfer|commerce_payment_bank_transfer';
            $transaction->amount = $payment;
            $transaction->currency_code = 'IDR';
            $transaction->status = 'success';
            commerce_payment_transaction_save($transaction);
            $trans_log[] = 'order id: ' . $transaction->order_id;
            // Update auto bank transfer table
            db_update('auto_bank_bca')
            ->fields(array(
              'status' => 'Success',
              'updated' => time(),
              'order_id' => $order_id,
              'note' => 'Anomaly. Payment not found.'
            ))
            ->condition('abbid', $key, '=')
            ->execute();
          }
        }else{
          //Double order id. Log it then mail CS yeti@sepulsa.com
          db_update('auto_bank_bca')
            ->fields(array(
              'status' => 'Failed',
              'updated' => time(),
              'note' => 'More than 1 order found: '. implode(', ', $order_ids),
            ))
            ->condition('abbid', $key, '=')
            ->execute();

          $from = "info@sepulsa.com";
          $to = variable_get('auto_bank_transfer_CS', 'yeti@sepulsa.com');
          $message = "Order : ".implode(', ',$order_ids)." have the same amount of: ". $payment ." from Auto BCA confirmation";
          $subject = "Sepulsa - Auto bank transfer: More than 1 order on payment confirmation.";
          $params = array(
            'subject' => $subject,
            'body' => $message,
          );
          drupal_mail('auto_bank_transfer', 'auto_bank_transfer_double_order', $to, language_default(), $params, $from);
        }
      }
    }
    // set log success payment, if any.
    watchdog('bca_confirm_payment', 'Success payment <pre>'. print_r($trans_log, TRUE) .'</pre>');
  }
}


//function to get content of Mandiri CSV file
function mandiri_list_file() {
  $dir = 'sites/default/files/bank/summary_mandiri';
  $files = scandir($dir);

  foreach ($files as $file) {
    $filepath = $dir . '/' . $file;
    $file_parts = pathinfo($filepath);

    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE && $file_parts['extension'] == 'csv') {
      $output = "<p><b>File " . $file . "</b> last modified: " . date ("F d Y H:i:s.", filemtime($filepath)) . "</p>\n";
      $output .= "<table>";
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        //if ($num == 5) {
          $output .= "<tr>";
          $row++;
          for ($c=0; $c < $num; $c++) {
            $output .= "<td>";
            $output .= $data[$c];
            $output .= "</td>";
          }
          $output .= "</tr>";
        //}

      }
      $output .= "</table>";
      fclose($handle);
    }
  }
  drupal_add_css('.field-item.even table tr td {border: 1px solid #000;padding: 5px;}', array('type' => 'inline'));
  return $output;
}


// mandiri function to read csv
function mandiri_read_csv() {
  $dir = variable_get('mandiri_csv_file_folder', 'sites/default/files/bank/mandiri');
  $files = scandir($dir);
  $payment = array();
  foreach ($files as $file) {
    $filepath = $dir . '/' . $file;
    $file_parts = pathinfo($filepath);

    $row = 1;
    if (($handle = fopen($filepath, "r")) !== FALSE && $file_parts['extension'] == 'csv') {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $num = count($data);
        if ($data[8] != 'Credit') {
          $amount = str_replace(array(',', '.00'), '', $data[8]);
          // only uniq amount processed
					if (!empty($amount)) {
						if ($amount % 1000 != 0) {
							$payment[] = array(
                'note' => $data[4],
                'amount' => (int)$amount,
              );
						}
					}
        }
      }
      fclose($handle);
				
      // delete mandiri csv file
      $newfile = 'sites/default/files/bank/summary_mandiri/mandiri-' . date('dmy') . '.csv';
      $rawfile = 'sites/default/files/bank/raw_mandiri/mandiri-'.date('dmy-Gi').'.csv';

      $mydir = file_default_scheme() . '://bank/summary_mandiri';
      file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
      @copy($filepath, $newfile);

      //save raw csv for future use
      $mydir = file_default_scheme() . '://bank/raw_mandiri';
      file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
      @copy($filepath, $rawfile);

      @drupal_unlink($filepath);
    }
  }
  // Get last known pointer
  $pointer = variable_get('mandiri_payment_pointer',0);

  // Get up to 3 last data from table and compare it with CSV from pointer
  $result = db_query("SELECT * FROM {auto_bank_mandiri} ORDER BY abbid DESC LIMIT 3")->fetchAll();
  // If table not empty, run match check with note and amount field pair.
  if(!empty($result)){
    $flag = true;
    $counter = 1;
    foreach($result as $item){
      // Check if data from CSV pointer less than 3 then treat it as new data.
      if(!empty($payment[$pointer-$counter])){
        if($payment[$pointer-$counter][0] != $item->description || $payment[$pointer-$counter][1] != $item->amount) $flag = false;
        $counter++;
      }else{
        $flag = false;
      }
    }
    if($flag){
      //data match, splice it, ignore pointer and above
      $payment = array_slice($payment,$pointer);
    }else{
      //data not match, reset CSV pointer
      watchdog('mandiri_read_csv', 'Table data missmatch or CSV data less than 3, reset csv pointer');
      $pointer = 0;
    }
  } else {
    $pointer = 0;
  }
  //Insert new data to table.
  $temp = array();
  foreach($payment as $value){
    $lastid = db_insert('auto_bank_mandiri')
    ->fields(array(
      'description' => $value[0],
      'created' => time(),
      'amount' => $value[1],
    ))
    ->execute();
    $temp[$lastid] = $value[1];
    $pointer++;
  }

  //Set variable with new record only
  variable_set('mandiri_payment_record',$temp);
  variable_set('mandiri_payment_pointer',$pointer);
}

// mandiri function to confirm payment
function mandiri_confirm_payment() {
  //read csv
  mandiri_read_csv();
  $all_payment = variable_get('mandiri_payment_record', array());

  //if no new transaction, stop function
  if(empty($all_payment)){
    watchdog('mandiri_confirm_payment', 'No new transaction. Stopping.');    
  }else{
    watchdog('mandiri_confirm_payment', 'Comparing payment <pre>'. print_r($all_payment, TRUE) .'</pre>');
    $trans_log = array();

    foreach ($all_payment as $key => $payment) {
      // load order by total order
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'commerce_order');
      $query->propertyCondition('status', 'pending');
      $query->fieldCondition('commerce_order_total', 'amount', $payment);
      $result = $query->execute();
      if (isset($result['commerce_order'])) {
        $order_ids = array_keys($result['commerce_order']);
        $order = commerce_order_load($order_ids[0]);
        // Check for single order id only
        if(count($order_ids) < 2){
          $order_id = $order_ids[0];
          // load commerce payment transaction by order_id and bank transfer method
          $payment_confirm = 0;
          foreach (commerce_payment_transaction_load_multiple(array(), 
              array(
                'order_id' => $order_id,
                'payment_method' => 'bank_transfer',
                'status' => 'pending')) 
              as $transaction) {
            
            $order = commerce_order_load($order_id);
            // compare total amount
            if ($order->commerce_order_total['und'][0]['amount'] == $transaction->amount) {
              // if same = confirm payment
              $transaction->status = 'success';
              commerce_payment_transaction_save($transaction);
              
              $trans_log[] = 'order id: ' . $transaction->order_id;
              $payment_confirm = 1;
              // Update auto bank transfer table
              db_update('auto_bank_mandiri')
              ->fields(array(
                'status' => 'Success',
                'updated' => time(),
                'order_id' => $order_id
              ))
              ->condition('abmid', $key, '=')
              ->execute();

            } else {
              // if not same = delete payment
              commerce_payment_transaction_delete($transaction->transaction_id);
            }
          }
          if ($payment_confirm == 0) {
            $transaction = commerce_payment_transaction_new('bank_transfer', $order->order_id);
            $transaction->instance_id = 'bank_transfer|commerce_payment_bank_transfer';
            $transaction->amount = $payment;
            $transaction->currency_code = 'IDR';
            $transaction->status = 'success';
            commerce_payment_transaction_save($transaction);
            $trans_log[] = 'order id: ' . $transaction->order_id;
            // Update auto bank transfer table
            db_update('auto_bank_mandiri')
            ->fields(array(
              'status' => 'Success',
              'updated' => time(),
              'order_id' => $order_id,
              'note' => 'Anomaly. Payment not found.'
            ))
            ->condition('abmid', $key, '=')
            ->execute();
          }
        }else{
          //Double order id. Log it then mail CS yeti@sepulsa.com
          db_update('auto_bank_mandiri')
            ->fields(array(
              'status' => 'Failed',
              'updated' => time(),
              'note' => 'More than 1 order found: '. implode(', ', $order_ids),
            ))
            ->condition('abmid', $key, '=')
            ->execute();

          $from = "info@sepulsa.com";
          $to = variable_get('auto_bank_transfer_CS', 'yeti@sepulsa.com');
          $message = "Order : ".implode(', ',$order_ids)." have the same amount of: ". $payment ." from Auto Mandiri confirmation";
          $subject = "Sepulsa - Auto bank transfer: More than 1 order on payment confirmation.";
          $params = array(
            'subject' => $subject,
            'body' => $message,
          );
          drupal_mail('auto_bank_transfer', 'auto_bank_transfer_double_order', $to, language_default(), $params, $from);
        }
      }
    }
    // set log success payment, if any.
    watchdog('mandiri_confirm_payment', 'Success payment <pre>'. print_r($trans_log, TRUE) .'</pre>');
  }
}

/* implement hook_cron(). */
function auto_bank_transfer_cron() {
	$bca = variable_get('activate_bca_cron', 1);
	$mandiri = variable_get('activate_mandiri_cron', 0);
  if ($bca == 1) bca_confirm_payment();
  if ($mandiri == 1) mandiri_confirm_payment();
}

/* implement hook_mail() */
function auto_bank_transfer_mail($key, &$message, $params) {
  switch ($key) {
    case 'auto_bank_transfer_double_order':
      $message['subject'] = $params['subject'];
      $message['body'] = array(0=>$params['body']);
    break;
    }
}
