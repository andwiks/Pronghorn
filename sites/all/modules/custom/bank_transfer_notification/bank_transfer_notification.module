<?php
/**
 * @file
 * bank_transfer_notification.module
 */

/**
 * Impelements hook_menu().
 */
function bank_transfer_notification_menu() {
  $items = array();

  // Administration pages.
  $items['admin/config/system/bank-transfer-notification'] = array(
    'title' => 'Bank Transfer Notification',
    'description' => 'Configuration time to send email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bank_transfer_notification_form'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Impelements hook_form().
 */
function bank_transfer_notification_form($form, &$form_state) {

  $form['btn'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bank Transfer Notification'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['btn']['bank_transfer_notification_hour'] = array(
    '#type' => 'textfield',
    '#title' => 'Notify user ... hour after order. *(max : 3 hour)',
    '#size' => 1,
    '#maxlength' => 1,
    '#default_value' => variable_get('bank_transfer_notification_hour', 2),
    '#required' => TRUE,
  );

  $form['btn']['bank_transfer_notification_hour_limit_to_delete'] = array(
    '#type' => 'textfield',
    '#title' => 'Limit hour for delete bank_transfer_notification_queue record ?. *(max : 24 hour)',
    '#size' => 2,
    '#maxlength' => 2,
    '#default_value' => variable_get('bank_transfer_notification_hour_limit_to_delete', 12),
    '#required' => TRUE,
  );

  $form['btn']['opening_bank_transfer_notification'] = array(
    '#type' => 'textarea',
    '#title' => 'Opening message to customer.',
    '#default_value' => variable_get('opening_bank_transfer_notification', 'Mohon lakukan pembayaran ke :'),
    '#cols' => 30,
    '#rows' => 5,
    '#required' => TRUE,
  );

  $form['btn']['bank_transfer_notification_policy_default'] = array(
    '#type' => 'textarea',
    '#title' => 'Default Policy',
    '#default_value' => variable_get('bank_transfer_notification_policy_default', ''),
    '#cols' => 30,
    '#rows' => 5,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_cron().
 */
function bank_transfer_notification_cron() {
  // Add to queue_bank_transfer_notification.
  $queue = DrupalQueue::get('queue_bank_transfer_notification');
  $query = "SELECT a.order_id, b.amount, a.mail 
              FROM commerce_order a
            INNER JOIN commerce_payment_transaction b ON a.order_id = b.order_id
            LEFT OUTER JOIN bank_transfer_notification_queue c ON a.order_id = c.order_id
            WHERE (a.status = 'pending' || a.status = 'processing') 
              AND b.payment_method = 'bank_transfer' 
              AND from_unixtime(a.created) + INTERVAL " . variable_get('bank_transfer_notification_hour', 2) . " HOUR < NOW() 
              AND from_unixtime(a.created) > NOW() - INTERVAL 12 HOUR
              AND c.id is null";
  $result = db_query($query);
  foreach ($result as $row) {
    $order = commerce_order_load($row->order_id);
    if ($order->status == 'pending' || $order->status == 'processing') {
      $queue->createItem($order);
    }
  }
  // Delete record bank_transfer_notification_queue.
  $time = time() - (60 * 60 * variable_get('bank_transfer_notification_hour_limit_to_delete', 12));
  db_delete('bank_transfer_notification_queue')
  ->condition('created', $time, '<')
  ->execute();
}

/**
 * Implements hook_cron_queue_info().
 */
function bank_transfer_notification_cron_queue_info() {
  $queues = array();
  $queues['queue_bank_transfer_notification'] = array(
    'worker callback' => 'bank_transfer_notification_send_email',
    'time' => 60,
  );
  return $queues;
}

/**
 * Function bank_transfer_notification_send_email().
 *
 * @todo
 * Send email to notification.
 *
 * @param object $order
 *   Object item commerce_order.
 */
function bank_transfer_notification_send_email($order) {
  // Make sure these orders have not received email notification.
  $exist_order_id = db_query_range("SELECT order_id FROM {bank_transfer_notification_queue} WHERE order_id = :order_id", 0, 1, array('order_id' => $order->order_id))->fetchField();

  $user_order = user_load($order->uid);

  if (empty($exist_order_id)) {
    $payment = commerce_payment_method_instance_load($order->data['payment_method']);
    $account_owner = (isset($payment['settings']['details']['account_owner']) && !empty($payment['settings']['details']['account_owner'])) ? $payment['settings']['details']['account_owner'] : '';
    $account_number = (isset($payment['settings']['details']['account_number']) && !empty($payment['settings']['details']['account_number'])) ? $payment['settings']['details']['account_number'] : '';
    $account_bank = (isset($payment['settings']['details']['account_bank']) && !empty($payment['settings']['details']['account_bank'])) ? $payment['settings']['details']['account_bank'] : '';
    $account_branch = (isset($payment['settings']['details']['account_branch']) && !empty($payment['settings']['details']['account_branch'])) ? $payment['settings']['details']['account_branch'] : '';
    $policy = (isset($payment['settings']['details']['policy']) && !empty($payment['settings']['details']['policy'])) ? $payment['settings']['details']['policy'] : variable_get('bank_transfer_notification_policy_default', '');

    $lang = language_default('language');
    $send = drupal_mail(
      'bank_transfer_notification',
      'notif',
      $user_order->mail,
      $lang,
      array(
        'account_owner' => $account_owner,
        'account_number' => $account_number,
        'account_bank' => $account_bank,
        'account_branch' => $account_branch,
        'policy' => $policy,
      )
    );

    if ($send) {
      db_insert('bank_transfer_notification_queue')
      ->fields(array(
        'order_id' => $order->order_id,
        'status' => 1,
        'created' => time()))
      ->execute();
      watchdog('bank_transfer_notification', t("Send Nofitication to !mail Success.",
        array('!mail' => $user_order->mail)));
    }
    else {
      watchdog('bank_transfer_notification', t("Send Nofitication to !mail Failed.",
        array('!mail' => $user_order->mail)));
    }

  }
}

/**
 * Implements hook_mail().
 */
function bank_transfer_notification_mail($key, &$message, $params) {
  switch ($key) {
    case 'notif':
      $langcode = $message['language'];
      $message['subject'] = t("Bank Transfer Notification from !site",
                            array('!site' => variable_get('site_name')),
                            array('langcode' => $langcode));
      $message['body'][] = variable_get('opening_bank_transfer_notification', 'Mohon lakukan pembayaran ke :');
      $message['body'][] = '';
      $message['body'][] = t("Nama Bank : !bank",
        array('!bank' => $params['account_bank']),
        array('langcode' => $langcode));
      $message['body'][] = t("Nomor rekening : !norek",
        array('!norek' => $params['account_number']),
        array('langcode' => $langcode));
      $message['body'][] = t("Atas nama : !account_owner",
        array('!account_owner' => $params['account_owner']),
        array('langcode' => $langcode));
      $message['body'][] = t("Kantor cabang : !account_branch",
        array('!account_branch' => $params['account_branch']),
        array('langcode' => $langcode));
      $message['body'][] = '';
      $message['body'][] = t("!policy",
        array('!policy' => $params['policy']),
        array('langcode' => $langcode));
      break;
  }
}
