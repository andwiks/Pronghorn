<?php
/**
 * @file
 * commerce_cart_services.module
 *
 * @author andre4s_y
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_services_resources
 */
function commerce_cart_services_services_resources() {
  $cart_services = array(
    'cart' => array(
      'operations' => array(
        'index' => array(
          'help' => "Retrieve product list inside customer's shopping cart.",
          'callback' => 'commerce_cart_services_resource_index',
          'access callback' => 'services_access_menu',
          'documentation callback' => 'commerce_cart_services_resource_index_doc',
          'args' => array(),
        ),
      ),
      'actions' => array(
        'add' => array(
          'help' => "Add the specified product to a customer's shopping cart.",
          'callback' => 'commerce_cart_services_resource_add',
          'access callback' => 'services_access_menu',
          'documentation callback' => 'commerce_cart_services_resource_add_doc',
          'args' => array(
            array(
              'name' => 'product',
              'type' => 'array',
              'description' => 'The product data to be added',
              'source' => array(
                'data' => 'product',
                'param' => 'product'
              ),
              'optional' => FALSE,
              'http_method' => 'POST',
            ),
          ),
        ),
        'delete' => array(
          'help' => "Delete specific line item product from customer's shopping cart.",
          'callback' => 'commerce_cart_services_resource_delete',
          'access callback' => 'services_access_menu',
          'documentation callback' => 'commerce_cart_services_resource_delete_doc',
          'args' => array(
            array(
              'name' => 'line_item_id',
              'type' => 'int',
              'description' => 'A valid line item product id.',
              'source' => array(
                'data' => 'line_item_id',
                'param' => 'line_item_id'
              ),
              'optional' => TRUE,
              'http_method' => 'POST',
            ),
          ),
        ),
      ),
    ),
  );

  return $cart_services;
}

/**
 * Callback Functions.
 */

/**
 * Function commerce_cart_services_resource_add().
 *
 * @param array $product
 *   Product data.
 *
 * @return mixed
 *   Line item object, or string contain error message otherwise.
 */
function commerce_cart_services_resource_add($product) {
  global $user;

  // Check input product data:
  // 1. product_id: (int) valid product id loaded by commerce_product_load.
  // 2. type: (string) valid line item type. (optional: product).
  // 2. quantity: (int) how many quantity need to be added (optional: 1).
  // 3. fields: (array) key: field name, value: field value (optional: empty).
  if (isset($product['product_id']) && !empty($product['product_id'])) {
    // Make sure that product id input is int.
    $product['product_id'] = intval($product['product_id']);
    // Load commerce product.
    $commerce_product = commerce_product_load($product['product_id']);
    // Check whether commerce product is available.
    if ($commerce_product !== FALSE) {
      // Check input quantity: by default 1.
      $quantity = (isset($product['quantity']) && !empty($product['quantity'])) ? intval($product['quantity']) : 1;
      // Get all line item types.
      $types = commerce_line_item_types();
      // Check input type: by default product.
      $line_item_type = (isset($product['type']) && isset($types[$product['type']])) ? $product['type'] : 'product';
      // Create new line item based on product above.
      $line_item = commerce_product_line_item_new($commerce_product, $quantity, 0, array(), $line_item_type);
      // Get line item wrapper.
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
      // Check input fields.
      if (isset($product['fields']) && !empty($product['fields'])) {
        // Looping for each product field.
        foreach ((array) $product['fields'] as $field) {
          // Looping for each field.
          foreach ((array) $field as $field_name => $field_value) {
            try {
              $line_item_wrapper->$field_name->set($field_value);
            }
            catch (EntityMetadataWrapperException $exception) {
              // Log this condition.
              watchdog('commerce_cart_services', 'Set line item field with name @name.<br />Value:<pre>@value</pre> Trace:<pre>@trace</pre>', array(
                '@name' => $field_name,
                '@value' => print_r($field_value, TRUE),
                '@trace' => $exception->getTraceAsString(),
              ), WATCHDOG_ERROR, t('Cart: add'));
              // Return service cart product field error.
              return services_error(t('Invalid product fields'), 406);
            }
          }
        }
      }
      // Return line item object.
      $line_item = commerce_cart_product_add($user->uid, $line_item);
      if ($line_item !== FALSE) {
        return _commerce_cart_services_line_item($line_item);
      }
      else {
        return services_error(t('Unable to add product'), 406);
      }
    }
    else {
      // Return service error: product not found.
      return services_error(t('Product not found'), 406);
    }
  }
  // Reach this means error: probably invalid product input.
  return services_error(t('Product is required'), 406);
}

/**
 * Function commerce_cart_services_resource_delete().
 *
 * @param int $line_item_id
 *   Line item ID.
 *
 * @return mixed
 *   Order object, or string contain error message otherwise.
 */
function commerce_cart_services_resource_delete($line_item_id = 0) {
  global $user;

  // Get user's order.
  $order = commerce_cart_order_load($user->uid);
  // Check whether commerce cart can get user's shopping cart.
  if ($order !== FALSE && commerce_cart_order_is_cart($order)) {
    // Check input line item id.
    if (!empty($line_item_id)) {
      // Make sure line item id is integer value.
      $line_item_id = intval($line_item_id);
      // Delete a content based on line item id.
      $order = commerce_cart_order_product_line_item_delete($order, $line_item_id);
    }
    else {
      // Delete all cart contents.
      $order = commerce_cart_order_empty($order);
    }
    // Return order object which already language compatible.
    return _commerce_cart_services_order($order);
  }

  // Reach this means error: unable to get user's shopping cart.
  return services_error(t('Cart missing'), 406);
}

/**
 * Function commerce_cart_services_resource_index().
 *
 * @return object
 *   Order object.
 */
function commerce_cart_services_resource_index() {
  global $user;

  // Get user's order.
  $order = commerce_cart_order_load($user->uid);
  // Check whether commerce cart can get user's shopping cart.
  if ($order !== FALSE && commerce_cart_order_is_cart($order)) {
    // Return order object which already language compatible.
    return _commerce_cart_services_order($order);
  }

  // Reach this means error: unable to get user's shopping cart.
  return services_error(t('Cart missing'), 406);
}

/**
 * Function commerce_cart_services_resource_add_doc().
 *
 * @return array
 *   Service documentation array.
 */
function commerce_cart_services_resource_add_doc() {
  global $base_url;
  $response = '
  {
      "line_item_id": "172",
      "order_id": "38",
      "type": "mobile_prepaid",
      "line_item_label": "SMPT50",
      "quantity": 7,
      "created": "1425923611",
      "changed": 1425925943,
      "data": [],
      "commerce_unit_price": {
          "amount": "51000",
          "currency_code": "IDR",
          "data": {
              "components": [
                  {
                      "name": "base_price",
                      "price": {
                          "amount": "51000",
                          "currency_code": "IDR",
                          "data": {
                              "components": []
                          }
                      },
                      "included": true
                  }
              ]
          }
      },
      "commerce_total": {
          "amount": 357000,
          "currency_code": "IDR",
          "data": {
              "components": [
                  {
                      "name": "base_price",
                      "price": {
                          "amount": 357000,
                          "currency_code": "IDR",
                          "data": {
                              "components": []
                          }
                      },
                      "included": true
                  }
              ]
          }
      },
      "commerce_product": {
          "revision_id": "7",
          "sku": "SMPT50",
          "title": "Rp 50.000",
          "revision_uid": "14",
          "status": "1",
          "log": "",
          "revision_timestamp": "1425589241",
          "data": false,
          "product_id": "5",
          "type": "pulsa",
          "language": "und",
          "uid": "1",
          "created": "1419919510",
          "changed": "1425589241",
          "commerce_price": {
              "und": [
                  {
                      "amount": "51000",
                      "currency_code": "IDR",
                      "data": {
                          "components": []
                      }
                  }
              ]
          },
          "field_api_provider": {
              "und": [
                  {
                      "value": "poin2000"
                  }
              ]
          },
          "field_credit_amount": {
              "und": [
                  {
                      "value": "50000"
                  }
              ]
          },
          "field_package_code": {
              "und": [
                  {
                      "value": "HS50"
                  }
              ]
          },
          "rdf_mapping": []
      },
      "commerce_display_path": "",
      "field_phone_number": "08122545393",
      "field_topup_status": "7",
      "field_topup_data": [
          ""
      ],
      "rdf_mapping": []
  }
  ';
  $element = array(
    '#name' => t('Cart Add Content'),
    '#description' => t("Add new shopping cart content."),
    '#auth' => TRUE,
    '#path' => 'cart/add',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/cart/add.json<br />POST data application/json:
    {
        "product":
        {
            "product_id": 5,
            "type": "mobile_prepaid",
            "quantity": 1,
            "fields": [
                {"field_phone_number":"08122545393"}
            ]
        }

    }',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
      'missing_cart' => array(
        '#question' => '406 Not Acceptable: Cart missing',
        '#description' => t('Unable to get shopping cart. Check user session.'),
        '#response' => '
        [
            "Cart missing"
        ]',
      ),
      'product_required' => array(
        '#question' => '406 Not Acceptable: Product is required',
        '#description' => t('Default error message when add new content into cart. Possible invalid product id input.'),
        '#response' => '
        [
            "Product is required"
        ]',
      ),
      'product_not_found' => array(
        '#question' => '406 Not Acceptable: Product not found',
        '#description' => t('Invalid product id input. System can not recognize product based on product id input.'),
        '#response' => '
        [
            "Product not found"
        ]',
      ),
      'unable_to_add' => array(
        '#question' => '406 Not Acceptable: Unable to add product',
        '#description' => t('Unable to add content into shopping cart. Possible because unable to pass certain rules, such as product price rules.'),
        '#response' => '
        [
            "Unable to add product"
        ]',
      ),
      'invalid_product_fields' => array(
        '#question' => '406 Not Acceptable: Invalid product fields',
        '#description' => t('Product field input is invalid.'),
        '#response' => '
        [
            "Invalid product fields"
        ]',
      ),
      'invalid_line_item' => array(
        '#question' => '406 Not Acceptable: Invalid Line Item',
        '#description' => t('Unable to get order object. Check user session.'),
        '#response' => '
        [
            "Invalid Line Item"
        ]',
      ),
      'missing_requirement' => array(
        '#question' => '401 Unauthorized: Missing required argument product',
        '#description' => t('Required product argument: product id.'),
        '#response' => '
        [
            "Missing required argument product"
        ]',
      ),
    ),
  );
  return $element;
}

/**
 * Function commerce_cart_services_resource_delete_doc().
 *
 * @return array
 *   Service documentation array.
 */
function commerce_cart_services_resource_delete_doc() {
  global $base_url;
  $response = '
  {
      "order_number": "38",
      "revision_id": "195",
      "revision_uid": "0",
      "mail": "",
      "status": "cart",
      "log": "Created as a shopping cart order.",
      "revision_timestamp": "1425924512",
      "revision_hostname": "127.0.0.1",
      "data": {
          "last_cart_refresh": 1425925267
      },
      "order_id": "38",
      "type": "commerce_order",
      "uid": "0",
      "created": "1425920102",
      "changed": "1425924512",
      "hostname": "127.0.0.1",
      "commerce_line_items": [],
      "commerce_order_total": {
          "amount": "306000",
          "currency_code": "IDR",
          "data": {
              "components": [
                  {
                      "name": "base_price",
                      "price": {
                          "amount": 306000,
                          "currency_code": "IDR",
                          "data": []
                      },
                      "included": true
                  }
              ]
          }
      },
      "commerce_customer_billing": [],
      "rdf_mapping": []
  }
  ';
  $element = array(
    '#name' => t('Cart Delete Content'),
    '#description' => t("Delete a content from customer's shopping cart and return order information."),
    '#auth' => TRUE,
    '#path' => 'cart',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/cart/delete.json<br />POST data application/json: {"line_item_id":172}',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
      'missing_cart' => array(
        '#question' => '406 Not Acceptable: Cart missing',
        '#description' => t('Unable to get shopping cart. Check user session.'),
        '#response' => '
        [
            "Cart missing"
        ]',
      ),
      'invalid_order' => array(
        '#question' => '406 Not Acceptable: Invalid Order',
        '#description' => t('Unable to get order object. Check user session.'),
        '#response' => '
        [
            "Invalid Order"
        ]',
      ),
      'invalid_line_item' => array(
        '#question' => '406 Not Acceptable: Invalid Line Item',
        '#description' => t('Unable to get order object. Check user session.'),
        '#response' => '
        [
            "Invalid Line Item"
        ]',
      ),
    ),
  );
  return $element;
}

/**
 * Function commerce_cart_services_resource_index_doc().
 *
 * @return array
 *   Service documentation array.
 */
function commerce_cart_services_resource_index_doc() {
  global $base_url;
  $response = '
  {
      "order_number": "38",
      "revision_id": "195",
      "revision_uid": "0",
      "mail": "",
      "status": "cart",
      "log": "Created as a shopping cart order.",
      "revision_timestamp": "1425924512",
      "revision_hostname": "127.0.0.1",
      "data": {
          "last_cart_refresh": 1425925267
      },
      "order_id": "38",
      "type": "commerce_order",
      "uid": "0",
      "created": "1425920102",
      "changed": "1425924512",
      "hostname": "127.0.0.1",
      "commerce_line_items": [
          {
              "line_item_id": "172",
              "order_id": "38",
              "type": "mobile_prepaid",
              "line_item_label": "SMPT50",
              "quantity": "6.00",
              "created": "1425923611",
              "changed": "1425924512",
              "data": [],
              "commerce_unit_price": {
                  "amount": "51000",
                  "currency_code": "IDR",
                  "data": {
                      "components": [
                          {
                              "name": "base_price",
                              "price": {
                                  "amount": "51000",
                                  "currency_code": "IDR",
                                  "data": {
                                      "components": []
                                  }
                              },
                              "included": true
                          }
                      ]
                  }
              },
              "commerce_total": {
                  "amount": "306000",
                  "currency_code": "IDR",
                  "data": {
                      "components": [
                          {
                              "name": "base_price",
                              "price": {
                                  "amount": 306000,
                                  "currency_code": "IDR",
                                  "data": {
                                      "components": []
                                  }
                              },
                              "included": true
                          }
                      ]
                  }
              },
              "commerce_product": {
                  "revision_id": "7",
                  "sku": "SMPT50",
                  "title": "Rp 50.000",
                  "revision_uid": "14",
                  "status": "1",
                  "log": "",
                  "revision_timestamp": "1425589241",
                  "data": false,
                  "product_id": "5",
                  "type": "pulsa",
                  "language": "und",
                  "uid": "1",
                  "created": "1419919510",
                  "changed": "1425589241",
                  "commerce_price": {
                      "und": [
                          {
                              "amount": "51000",
                              "currency_code": "IDR",
                              "data": {
                                  "components": []
                              }
                          }
                      ]
                  },
                  "field_api_provider": {
                      "und": [
                          {
                              "value": "poin2000"
                          }
                      ]
                  },
                  "field_credit_amount": {
                      "und": [
                          {
                              "value": "50000"
                          }
                      ]
                  },
                  "field_package_code": {
                      "und": [
                          {
                              "value": "HS50"
                          }
                      ]
                  },
                  "rdf_mapping": []
              },
              "commerce_display_path": "",
              "field_phone_number": "08122545393",
              "field_topup_status": "7",
              "field_topup_data": [
                  ""
              ],
              "rdf_mapping": []
          }
      ],
      "commerce_order_total": {
          "amount": "306000",
          "currency_code": "IDR",
          "data": {
              "components": [
                  {
                      "name": "base_price",
                      "price": {
                          "amount": 306000,
                          "currency_code": "IDR",
                          "data": []
                      },
                      "included": true
                  }
              ]
          }
      },
      "commerce_customer_billing": [],
      "rdf_mapping": []
  }
  ';
  $element = array(
    '#name' => t('Cart Index'),
    '#description' => t("Retrieve product list inside customer's shopping cart as order information."),
    '#auth' => TRUE,
    '#path' => 'cart',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/cart.json<br />GET',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'operations',
    // Errors.
    '#errors' => array(
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
      'missing_cart' => array(
        '#question' => '406 Not Acceptable: Cart missing',
        '#description' => t('Unable to get shopping cart. Check user session.'),
        '#response' => '
        [
            "Cart missing"
        ]',
      ),
      'invalid_order' => array(
        '#question' => '406 Not Acceptable: Invalid Order',
        '#description' => t('Unable to get order object. Check user session.'),
        '#response' => '
        [
            "Invalid Order"
        ]',
      ),
      'invalid_line_item' => array(
        '#question' => '406 Not Acceptable: Invalid Line Item',
        '#description' => t('Unable to get order object. Check user session.'),
        '#response' => '
        [
            "Invalid Line Item"
        ]',
      ),
    ),
  );
  return $element;
}

/**
 * Private Functions.
 */

/**
 * Function _commerce_cart_services_order().
 *
 * Order object which more language compatible.
 *
 * @param object $order
 *   Order object.
 *
 * @return mixed
 *   Order object or string error.
 */
function _commerce_cart_services_order($order) {
  // Wrap around using try and catch.
  try {
    // Get order wrapper.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    // Proccess order line item: remove language none (und).
    $order->commerce_line_items = $order_wrapper->commerce_line_items->value();
    // Looping foreach line item.
    foreach ((array) $order->commerce_line_items as $key => $line_item) {
      $order->commerce_line_items[$key] = _commerce_cart_services_line_item($line_item);
    }
    // Proccess order total: remove language none (und).
    $order->commerce_order_total = $order_wrapper->commerce_order_total->value();
    // Return order object.
    return $order;
  }
  catch (EntityMetadataWrapperException $exception) {
    // Log this condition.
    watchdog('commerce_cart_services', 'Load order error at @location. Trace:<pre>@trace</pre>', array(
      '@location' => __FUNCTION__,
      '@trace' => $exception->getTraceAsString(),
    ), WATCHDOG_ERROR, t('Cart: Order'));
  }
  // Other condition return error;
  return services_error(t('Invalid Order'), 406);
}

/**
 * Function _commerce_cart_services_line_item().
 *
 * Line item object which more language compatible.
 *
 * @param object $line_item
 *   Line item object.
 *
 * @return mixed
 *   Line item object or string error.
 */
function _commerce_cart_services_line_item($line_item) {
  // Wrap around using try and catch.
  try {
    // Get line item wrapper.
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    // Get all commerce_line_item fields.
    $fields = field_info_instances('commerce_line_item', $line_item->type);
    // Proccess order line item: remove language none (und).
    foreach ($fields as $field_name => $field_data) {
      if (isset($line_item->$field_name)) {
        $line_item->$field_name = $line_item_wrapper->$field_name->value();
      }
    }
    // Return line item object.
    return $line_item;
  }
  catch (EntityMetadataWrapperException $exception) {
    // Log this condition.
    watchdog('commerce_cart_services', 'Load line item error at @location. Trace:<pre>@trace</pre>', array(
      '@location' => __FUNCTION__,
      '@trace' => $exception->getTraceAsString(),
    ), WATCHDOG_ERROR, t('Cart: Line Item'));
  }
  // Other condition return error;
  return services_error(t('Invalid Line Item'), 406);
}
