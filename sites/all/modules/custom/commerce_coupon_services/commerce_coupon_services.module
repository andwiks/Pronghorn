<?php
/**
 * @file
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_services_resources().
 */
function commerce_coupon_services_services_resources() {
  $commerce_coupon_resources = array(
    'coupon' => array(
      'actions' => array(
        'redeem' => array(
          'help' => 'Redeem coupon code.',
          'callback' => 'commerce_coupon_services_resource_redeem',
          'access callback' => 'commerce_coupon_access',
          'access arguments' => array('redeem'),
          'documentation callback' => 'commerce_coupon_services_resource_redeem_doc',
          'args' => array(
            array(
              'name' => 'code',
              'type' => 'string',
              'description' => 'Coupon code',
              'source' => array(
                'data' => 'code',
              ),
              'optional' => FALSE,
              'http_method' => 'POST',
            ),
          ),
        ),
        'remove' => array(
          'help' => 'Remove coupon code from an order.',
          'callback' => 'commerce_coupon_services_resource_remove',
          'access callback' => 'commerce_coupon_access',
          'access arguments' => array('redeem'),
          'documentation callback' => 'commerce_coupon_services_resource_remove_doc',
          'args' => array(
            array(
              'name' => 'coupon_id',
              'type' => 'string',
              'description' => 'Coupon id',
              'source' => array(
                'data' => 'coupon_id',
              ),
              'optional' => FALSE,
            ),
          ),
        ),
      )
    ),
  );

  return $commerce_coupon_resources;
}

function commerce_coupon_services_resource_redeem($code, $order_id = NULL, $uid = NULL) {
  $uid = empty($uid) ? $GLOBALS['user']->uid : $uid;
  $order = empty($order_id) ? commerce_cart_order_load($uid) : commerce_order_load($order_id);
  $coupon = commerce_coupon_redeem_coupon_code($code, $order, $error);

  if ($coupon) {
    return array(
      'coupon' => $coupon,
      'offer' => entity_metadata_wrapper('commerce_coupon', $coupon)->commerce_discount_reference->get(0)->commerce_discount_offer->value(),
    );
  }
  else {
    if (!$error) {
      // If a coupon was invalidated during the cart refresh (e.g. if its
      // discounts failed their conditions), an error message will have been
      // set.
      $error = &drupal_static('commerce_coupon_error_' . strtolower($code));
    }

    if (!$error) {
      // Allow modules/rules to act when a coupon has been successfully added
      // to the cart.
      rules_invoke_all('commerce_coupon_applied_to_cart', $coupon, $order);
    }

    return services_error($error);
  }
}

function commerce_coupon_services_resource_remove($coupon_id, $order_id = NULL, $uid = NULL) {
  $uid = empty($uid) ? $GLOBALS['user']->uid : $uid;
  $order = empty($order_id) ? commerce_cart_order_load($uid) : commerce_order_load($order_id);
  $coupon = commerce_coupon_load($coupon_id);

  commerce_coupon_remove_coupon_from_order($order, $coupon);

  return 'Coupon removed from order';
}

function commerce_coupon_services_resource_redeem_doc() {
  $options = JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES;

  $element = array(
    '#name' => 'redeem',
    '#request_url' => 'api/coupon/redeem',
    '#errors' => array(
      'invalid_code' => array(
        '#question' => '500 Internal Server Error: An error occurred (0): @message',
        '#response' => json_encode(array('@message'), $options),
      ),
    ),
    '#auth' => TRUE,
  );

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_coupon');
  $query->entityCondition('bundle', 'discount_coupon');
  $query->propertyCondition('status', TRUE);
  $query->fieldCondition('commerce_discount_reference', 'target_id', 0, '>');
  $query->range(0, 1);

  $result = $query->execute();
  if (!empty($result)) {
    $coupon_wrapper = entity_metadata_wrapper('commerce_coupon', key($result['commerce_coupon']));
    $element['#request_data'] = json_encode(array('code' => $coupon_wrapper->code->value()), $options);

    $response = array(
      'coupon' => $coupon_wrapper->value(),
      'offer' => $coupon_wrapper->commerce_discount_reference->get(0)->commerce_discount_offer->value(),
    );
    $element['#response'] = json_encode($response, $options);
  }

  return $element;
}

function commerce_coupon_services_resource_remove_doc() {
  $options = JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES;

  $element = array(
    '#name' => 'remove',
    '#request_url' => 'api/coupon/remove',
    '#errors' => array(),
  );

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_coupon');
  $query->entityCondition('bundle', 'discount_coupon');
  $query->propertyCondition('status', TRUE);
  $query->fieldCondition('commerce_discount_reference', 'target_id', 0, '>');
  $query->range(0, 1);

  $result = $query->execute();
  if (!empty($result)) {
    $element['#request_data'] = json_encode(array('coupon_id' => key($result['commerce_coupon'])), $options);
    $element['#response'] = json_encode(array('Coupon removed from order'), $options);
  }

  return $element;
}
