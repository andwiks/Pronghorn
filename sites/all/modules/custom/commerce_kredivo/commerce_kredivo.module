<?php
/**
 * @file
 * commerce_kredivo.module
 *
 * @author andre4s_y
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_kredivo_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_kredivo'] = array(
    'base' => 'commerce_kredivo',
    'title' => t('Kredivo'),
    'short_title' => t('Kredivo'),
    'description' => t('Buy Now, Pay Later with Kredivo'),
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'file' => 'commerce_kredivo.payment.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_kredivo_menu() {
  $items = array();

  // Define an always accessible path to receive push notification.
  $items['commerce_kredivo/notification/%commerce_order/%commerce_payment_transaction'] = array(
    'page callback' => 'commerce_kredivo_notification',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_kredivo.notification.inc',
  );

  // Add a menu item for confirm transaction.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/kredivo-confirm'] = array(
    'title' => 'Confirm Kredivo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_kredivo_confirm_form', 3, 5),
    'access callback' => 'commerce_kredivo_transaction_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'commerce_kredivo.admin.inc',
  );

  // Add a menu item for cancel transaction.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/kredivo-cancel'] = array(
    'title' => 'Cancel Kredivo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_kredivo_cancel_form', 3, 5),
    'access callback' => 'commerce_kredivo_transaction_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'commerce_kredivo.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_contextual_links_alter().
 */
function commerce_kredivo_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  // Check for payment transaction approve|cancel links.
  if (isset($links['commerce-payment-transaction-kredivo-cancel'])
    || isset($links['commerce-payment-transaction-kredivo-confirm'])
  ) {
    // Get order object.
    $order = $router_item['page_arguments'][0];
    // Get payment transaction.
    $transaction = $router_item['page_arguments'][1];
    // 1. Check payment kredivo.
    // 2. Check transaction status: pending.
    // 3. Check payment remote id: not zero.
    // 4. Check payment expiration time.
    // @todo: check requirement no. 4.
    if (!(isset($transaction->payment_method)
      && $transaction->payment_method == 'commerce_kredivo'
      &&  $transaction->status == COMMERCE_PAYMENT_STATUS_PENDING
      && !empty($transaction->remote_id)
    )) {
      unset($links['commerce-payment-transaction-kredivo-cancel']);
    }
    if (!(isset($transaction->payment_method)
      && $transaction->payment_method == 'commerce_kredivo'
      && $transaction->status == COMMERCE_PAYMENT_STATUS_PENDING
    )) {
      unset($links['commerce-payment-transaction-kredivo-confirm']);
    }
  }
}

/**
 * Callback Functions.
 */

/**
 * Function commerce_kredivo_transaction_access().
 *
 * @param object $order
 *   Order object.
 * @param object $transaction
 *   Payment transaction object.
 */
function commerce_kredivo_transaction_access($order, $transaction = NULL) {
  $access = commerce_payment_transaction_access('update', $transaction);
  if ($access && $transaction) {
    if (isset($transaction->payment_method)
      && $transaction->payment_method != 'commerce_kredivo'
    ) {
      $access = FALSE;
    }
  }
  return $access;
}

/**
 * Function commerce_kredivo_api().
 *
 * @param string $data
 *   Payment data.
 * @param array $settings
 *   Payment API settings.
 *
 * @return array
 *   With key: result(json string), error, info.
 */
function commerce_kredivo_api($data, $settings) {
  // Define return value.
  $return = array(
    'result' => '',
    'error' => '',
    'info' => '',
  );

  // Sanitize server url.
  $settings['server_url'] = preg_replace('#\/$#', '', $settings['server_url']);
  // Define target url.
  $target_url = $settings['server_url'] . '/' . $settings['url'];
  // Check if method is GET.
  if ($settings['method'] == 'GET') {
    $target_url .= (strpos($target_url, '?') === FALSE) ? '?' . $data : '&' . $data;
  }

  // Initiate cURL.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $target_url);
  // Check request method.
  if ($settings['method'] == 'POST') {
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
      'Content-Type: application/json',
      'Accept: application/json',
    ));
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  }
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_TIMEOUT, $settings['debug']['request_timeout']);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, FALSE);
  // Check if url target is https.
  if (strpos($settings['server_url'], 'https') === 0) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $settings['debug']['disable_verify_https']);
  }
  // Execute cURL.
  $return['result'] = curl_exec($ch);
  // Get cURL info.
  $return['info'] = curl_getinfo($ch);
  // Get cURL error.
  $return['error'] = curl_error($ch);

  // Close cURL resource, and free up system resources.
  curl_close($ch);

  // Check debug mode.
  if (!empty($settings['debug']['debug_mode'])) {
    // Log this condition, everything get log as debug.
    watchdog('commerce_kredivo', 'Kredivo Send API to @url. Debug <pre>Result: !result</pre><pre>Data: @data</pre><pre>Settings: @settings</pre>', array(
      '@url' => $settings['url'],
      '!result' => print_r($return, TRUE),
      '@data' => print_r($data, TRUE),
      '@settings' => print_r($settings, TRUE),
    ), WATCHDOG_DEBUG, l(t('Kredivo API: @op', array(
      '@op' => $settings['url'],
    )), request_path()));
  }

  // Return it.
  return $return;
}
