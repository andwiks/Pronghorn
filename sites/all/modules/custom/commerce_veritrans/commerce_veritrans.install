<?php
/**
 * @file
 * commerce_veritrans.install
 *
 * @author andre4s_y
 *
 * @todo: string token limit how many chars?
 * @todo: expired is utc or +07?
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_schema().
 */
function commerce_veritrans_schema() {
  // Define grouponers table.
  $schema = array(
    'commerce_veritrans_token' => array(
      'description' => 'Table for storing veritrans payment token.',
      'fields' => array(
        'token_id' => array(
          'description' => 'The unique identifier of payment token.',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'uid' => array(
          'description' => 'Drupal User ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'order_id' => array(
          'description' => 'Commerce Order ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'phone' => array(
          'description' => 'User Phone Number.',
          'type' => 'varchar',
          'length' => 14,
          'not null' => TRUE,
          'default' => '',
        ),
        'token' => array(
          'description' => 'Veritrans Token.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'expired' => array(
          'description' => 'Veritrans Token Expired Datetime.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'first' => array(
          'description' => 'Credit Card Masked First 6 Digits.',
          'type' => 'char',
          'length' => 6,
          'default' => '',
        ),
        'last' => array(
          'description' => 'Credit Card Masked Last 4 Digits.',
          'type' => 'char',
          'length' => 4,
          'default' => '',
        ),
      ),
      'primary key' => array('token_id'),
      'indexes' => array(
        'uid' => array('uid'),
        'order_id' => array('order_id'),
      ),
      'foreign keys' => array(
        'creator' => array(
          'table' => 'users',
          'columns' => array('uid' => 'uid'),
        ),
        'order_id' => array(
          'table' => 'commerce_order',
          'columns'=> array('order_id' => 'order_id'),
        ),
      ),
    ),
  );
  // Return schema definition array.
  return $schema;
}

/**
 * Implements hook_requirements().
 */
function commerce_veritrans_requirements($phase) {
  // Define default requirements.
  $requirements = array();

  // Ensure translations don't break during installation.
  $t = get_t();

  // Check on installation phase.
  if ($phase == 'install') {
    // Get enabled currencies.
    $currencies = commerce_currency_get_code(TRUE);
    // This payment only usable for indonesia currency: IDR.
    if (!isset($currencies['IDR'])) {
      $requirements['veritrans_currency'] = array(
        'title' => $t('currency setting'),
        'value' => implode(', ', $currencies),
        'description' => $t('Veritrans payment gateway only supports Indonesia (IDN) currency: IDR.'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  // @todo: on runtime phase add vt_web, vt_link, vt_direct status.
  // Return requirements.
  return $requirements;
}
