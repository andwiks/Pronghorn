<?php
/**
 * @file
 * commerce_veritrans.module
 *
 * @author andre4s_y
 *
 * @todo: implement vt direct first.
 * @todo: implement vt web seconds.
 * @todo: implement vt link thirds.
 * @todo: break it up into 3 separate modules.
 *
 * @todo: query operation.
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_veritrans_commerce_payment_method_info() {
  $payment_methods = array();

  // VT-Direct: is onsite payment process.
  // Can not use terminal: because form has js attachements.
  $payment_methods['commerce_veritrans'] = array(
    'base' => 'commerce_veritrans',
    'title' => t('Veritrans Payment Gateway'),
    'description' => t('Veritrans Payment Gateway Integration'),
    'terminal' => FALSE,
    'offsite' => FALSE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_veritrans_form_commerce_checkout_form_checkout_alter(&$form, &$form_state) {
  // Check whether form contain payment method.
  if (isset($form['commerce_payment']['payment_method'])) {
    // Looping foreach options.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $payment_instance_id => $payment_title) {
      $payment_details = explode('|', $payment_instance_id);
      if (isset($payment_details[1])) {
        $settings = rules_config_load($payment_details[1]);
        $form['commerce_payment']['payment_method']['#options'][$payment_instance_id] = (isset($settings->label)) ? $settings->label : $payment_title;
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function commerce_veritrans_menu() {
  $items = array();

  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/approve'] = array(
    'title' => 'Approve',
    'page callback' => 'commerce_veritrans_payment_approve_form_wrapper',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_payment_transaction_access',
    'access arguments' => array('delete', 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'commerce_veritrans.orders.inc',
  );

  // @todo: cancel
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'commerce_veritrans_payment_cancel_form_wrapper',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_payment_transaction_access',
    'access arguments' => array('delete', 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'commerce_veritrans.orders.inc',
  );
  // @todo: query.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/query'] = array(
    'title' => 'Query',
    'page callback' => 'commerce_veritrans_payment_query_form_wrapper',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_payment_transaction_access',
    'access arguments' => array('view', 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'commerce_veritrans.orders.inc',
  );

  $items['user/%user/token'] = array(
    'title' => 'Saved Credit Card',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_veritrans_user_token_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'commerce_veritrans.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_contextual_links_alter().
 */
function commerce_veritrans_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  // Check for payment transaction approve links.
  if (isset($links['commerce-payment-transaction-approve'])) {
    // Get payment transaction.
    $transaction = $router_item['page_arguments'][1];
    // Get order object.
    $order = $router_item['page_arguments'][0];
    // Check payment transaction and payment response.
    if (!($transaction->status == COMMERCE_PAYMENT_STATUS_PENDING
      && isset($order->data['commerce_veritrans']['response'])
      && $order->data['commerce_veritrans']['response']->fraud_status == 'challenge'
    )) {
      unset($links['commerce-payment-transaction-approve']);
    }
  }
}

/**
 * Callback Functions.
 */

/**
 * Function commerce_veritrans_settings_form().
 *
 * Payment method callback: settings form.
 *
 * @param array $settings
 *   Setting form array.
 *
 * @return array
 *   Form array.
 */
function commerce_veritrans_settings_form($settings = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Get supported payment method types.
  $payment_methods = commerce_veritrans_payment_method_types();
  // Payment method types as select dropdown.
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Payment Type'),
    '#options' => $payment_methods,
    '#default_value' => (isset($settings['type'])) ? $settings['type'] : 'credit_card',
    '#description' => t('Choose payment type that this method will handle.'),
    '#required' => TRUE,
  );

  // Provide credit card field.
  $form['credit_card'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Credit Card Options'),
    '#states' => array(
      'visible' => array(
        ':input[name="parameter[payment_method][settings][payment_method][settings][type]"]' => array('value' => 'credit_card'),
      ),
    ),
  );
  // @todo: add phone number fields.
  // a. from commerce_customer_address. (addressfield_phone)
  // b. from commerce_line_item. (line item custom product)
  // c. from user field?
  // d. provided form.
  // Get supported credit card type.
  $credit_card_types = commerce_payment_credit_card_types();
  // Credit card type as checkboxes.
  $form['credit_card']['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select credit card types for this payment method.'),
    '#options' => $credit_card_types,
    '#default_value' => (isset($settings['credit_card']['card_types'])) ? $settings['credit_card']['card_types'] : array('visa', 'mastercard'),
    '#states' => array(
      'visible' => array(
        ':input[name="parameter[payment_method][settings][payment_method][settings][type]"]' => array('value' => 'credit_card'),
      ),
    ),
  );
  // Acquiring Bank.
  $form['credit_card']['bank'] = array(
    '#type' => 'select',
    '#title' => t('Acquiring Bank'),
    '#options' => array(
      'bni' => t('BNI'),
      'cimb' => t('CIMB'),
      'mandiri' => t('Mandiri'),
    ),
    '#default_value' => (isset($settings['credit_card']['bank'])) ? $settings['credit_card']['bank'] : 'bni',
  );
  // Credit card type.
  $form['credit_card']['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array(
      'default' => t('Default'),
      'authcapture' => t('Pre-Authorization + Capture'),
      'oneclick' => t('One Click'),
      'twoclick' => t('Two Click'),
    ),
    '#default_value' => (isset($settings['credit_card']['type'])) ? $settings['credit_card']['type'] : 'default',
    '#description' => t('One Click and Authorize process must use 3-D Secure.'),
  );
  $form['credit_card']['3ds'] = array(
    '#type' => 'checkbox',
    '#title' => t('Always use 3-D Secure'),
    '#default_value' => (isset($settings['credit_card']['3ds'])) ? $settings['credit_card']['3ds'] : '1',
    '#description' => t('If this option enable, at checkout, form will always try to use 3-D Secure.'),
    '#states' => array(
      'checked' => array(
        ':input[name="parameter[payment_method][settings][payment_method][settings][credit_card][type]"]' => array('value' => 'oneclick'),
      ),
    ),
  );
  // Order ID Prefix.
  $form['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Order ID Prefix'),
    '#default_value' => (isset($settings['prefix'])) ? $settings['prefix'] : '',
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('System will send this prefix together with order id.'),
  );

  // Set example payment server url.
  $url = url('https://api.sandbox.veritrans.co.id/v2', array(
    'absolute' => TRUE,
    'external' => TRUE,
  ));
  // Payment server URL.
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Server URL'),
    '#default_value' => (isset($settings['url'])) ? $settings['url'] : '',
    '#maxlength' => 128,
    '#description' => t('Please input full url: https:// or http://.<br />Example: @url.', array(
      '@url' => $url,
    )),
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => $url,
    ),
  );

  // Payment client key.
  $form['client_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Key'),
    '#default_value' => (isset($settings['client_key'])) ? $settings['client_key'] : '',
    '#maxlength' => 50,
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Client Key'),
    ),
  );

  // Payment server key.
  $form['server_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Server Key'),
    '#default_value' => (isset($settings['server_key'])) ? $settings['server_key'] : '',
    '#maxlength' => 50,
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Server Key'),
    ),
  );

  // Set example javascript url.
  $url = url('https://api.sandbox.veritrans.co.id/v2/assets/js/veritrans.min.js', array(
    'absolute' => TRUE,
    'external' => TRUE,
  ));
  // Payment Java Script.
  $form['js'] = array(
    '#type' => 'textfield',
    '#title' => t('Java Script URL'),
    '#default_value' => (isset($settings['js'])) ? $settings['js'] : '',
    '#maxlength' => 128,
    '#description' => t('Please input full url: https:// or http://.<br />Example: @url.', array(
      '@url' => $url,
    )),
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => $url,
    ),
  );

  return $form;
}

/**
 * Function commerce_veritrans_submit_form().
 *
 * Payment method callback: submit form.
 *
 * @param array $payment_method
 *   Payment Method Info array.
 * @param array $pane_values
 *   Checkout payment pane values.
 * @param array|null $checkout_pane
 *   Checkout pane array info, if null callback from terminal.
 * @param object $order
 *   Order object.
 *
 * @return array
 *   Payment method form array.
 */
function commerce_veritrans_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Check payment settings.
  if (isset($payment_method['settings']) && !empty($payment_method['settings'])) {
    // Define order wrapper: to get total order amount.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Define phone number options if available.
    $phone = array();
    // Get order line items.
    $line_items = $order_wrapper->commerce_line_items->value();
    // Looping for each line item.
    foreach ($line_items as $line_item) {
      // Get line item wrapper.
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
      // Check whether field is available.
      if (isset($line_item_wrapper->field_phone_number)) {
        // Check field phone number if not empty.
        $number = $line_item_wrapper->field_phone_number->value();
        // @todo: make this settingable.
        // @todo: field or addressfield phone.
        if (!empty($number)) {
          $phone[$number] = $number;
        }
      }
    }

    // Check whether payment method type is credit_card.
    if ($payment_method['settings']['type'] == 'credit_card'
      && isset($payment_method['settings']['credit_card'])
      && !empty($payment_method['settings']['credit_card'])
    ) {
      // Define fields for credit card form.
      $fields = array(
        'card_types' => array_filter($payment_method['settings']['credit_card']['card_types']),
        'code' => t('Card CVV'),
        'veritrans' => array(
          'vt_url' => $payment_method['settings']['url'],
          'vt_client' => $payment_method['settings']['client_key'],
          'vt_amount' => $order_wrapper->commerce_order_total->amount->value(),
          'vt_js' => $payment_method['settings']['js'],
          'vt_secure' => boolval($payment_method['settings']['credit_card']['3ds']),
          'vt_bank' => $payment_method['settings']['credit_card']['bank'],
          'vt_type' => $payment_method['settings']['credit_card']['type'],
        ),
        'phone' => $phone,
        'type' => $payment_method['settings']['credit_card']['type'],
        'uid' => $order->uid,
      );
      // Get veritrans credit card form and merge it with current form array.
      $form['veritrans'] = commerce_veritrans_credit_card_form($fields, array());
      // Define veritrans form tree.
      $form['veritrans']['#tree'] = TRUE;
      // @todo: form attachement create js error!
      // Move form attachments.
      // $form['#attached'] = $form['veritrans']['#attached'];
      // unset($form['veritrans']['#attached']);
    }

    // Define veritrans error message.
    $form['error'] = array(
      '#type' => 'hidden',
      '#default_value' => '',
      '#attributes' => array(
        'id' => 'error_message',
      ),
    );
  }
  else {
    // Show payment is not configured for user.
    drupal_set_message(t('@payment is not configured for use. Please contact an administrator to resolve this issue.', array(
      '@payment' => ucfirst($payment_method['title']),
    )), 'error');
    $form['error'] = array(
      '#markup' => theme('status_messages', array('display' => 'error')),
    );
  }

  return $form;
}

/**
 * Function commerce_veritrans_submit_form_validate().
 *
 * Payment method callback: submit form validation.
 *
 * @param array $payment_method
 *   Payment Method Info array.
 * @param array $pane_form
 *   Checkout pane form array.
 * @param array $pane_values
 *   Checkout pane form values.
 * @param object $order
 *   Order object.
 * @param array $form_parents
 *   The identifier of the base element of the payment pane.
 *
 * @return bool
 *   FALSE will show correct form error.
 */
function commerce_veritrans_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Define default return value.
  $return_value = TRUE;
  // Define form element name prefix: to provide valid form element name.
  $prefix = implode('][', array_merge($form_parents, array('veritrans'))) . '][';

  // Validate payment settings.
  if (!(isset($payment_method['settings']) && !empty($payment_method['settings'])
    && isset($payment_method['settings']['url']) && !empty($payment_method['settings']['url'])
    && isset($payment_method['settings']['client_key']) && !empty($payment_method['settings']['client_key'])
    && preg_match('#^http(s)?\:\/\/#', $payment_method['settings']['url'])
  )) {
    drupal_set_message(t('@payment is not configured for use. Please contact an administrator to resolve this issue.', array(
      '@payment' => ucfirst($payment_method['title']),
    )), 'error');
    $return_value = FALSE;
  }

  // Validate veritrans payment token.
  // @todo: validate pattern.
  if (!(isset($pane_values['veritrans']['token']) && !empty($pane_values['veritrans']['token']))) {
    form_set_error($prefix . 'type', t('Unable to get token for payment with @type.', array(
      '@type' => commerce_veritrans_payment_method_types($payment_method['settings']['type']),
    )));
    $return_value = FALSE;
  }
  // @todo: validate veritrans phone.
  if (!(isset($pane_values['veritrans']['credit_card']['phone']) && !empty($pane_values['veritrans']['credit_card']['phone']))) {
    // Check whether operation is oneclick or twoclick.
    if (in_array($payment_method['settings']['credit_card']['type'], array('oneclick', 'twoclick'))) {
      // Try to get phone from token.
      $customer_phone = commerce_veritrans_token_get_phone($pane_values['veritrans']['token']);
      if (empty($customer_phone)) {
        form_set_error($prefix . '][token', t('Payment @type unable to get your phone number based on previous transactions.', array(
          '@type' => commerce_veritrans_payment_method_types($payment_method['settings']['type']),
        )));
        $return_value = FALSE;
      }
    }
    else {
      form_set_error($prefix . '][credit_card][phone', t('Payment @type need to verify your phone number.', array(
        '@type' => commerce_veritrans_payment_method_types($payment_method['settings']['type']),
      )));
      $return_value = FALSE;
    }
  }

  // Validate veritrans error message.
  if (isset($pane_values['error']) && !empty($pane_values['error'])) {
    if (stripos($pane_values['error'], 'cvv') !== FALSE) {
      form_set_error($prefix . 'credit_card][code', t('Payment @type error: @message.', array(
        '@type' => commerce_veritrans_payment_method_types($payment_method['settings']['type']),
        '@message' => $pane_values['error'],
      )));
    }
    else {
      form_set_error($prefix, t('Payment @type error: @message.', array(
        '@type' => commerce_veritrans_payment_method_types($payment_method['settings']['type']),
        '@message' => $pane_values['error'],
      )));
    }
    $return_value = FALSE;
  }

  // Define order wrapper: to get total order amount.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Get line item.
  $line_items = $order_wrapper->commerce_line_items->value();
  if (empty($line_items)
    || $order_wrapper->commerce_order_total->amount->value() <= 0
  ) {
    form_set_error($prefix . 'type', t('Payment can not continue: cart can not empty or payment amount can not 0.'));
    $return_value = FALSE;
  }

  // Return it.
  return $return_value;
}

/**
 * Function commerce_veritrans_submit_form_submit().
 *
 * Payment method callback: submit form submission.
 *
 * @param array $payment_method
 *   Payment Method Info array.
 * @param array $pane_form
 *   Checkout pane form array.
 * @param array $pane_values
 *   Checkout pane form values.
 * @param object $order
 *   Order object.
 * @param array $charge
 *   Amount and currency array (if available).
 *
 * @return bool
 *   FALSE will rebuild the payment checkout form.
 */
function commerce_veritrans_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Define order wrapper: to get total order amount.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Generate item string: Nama_Item,harga_satuan,Qty,SubTotal;
  $items = array();
  // Get order line items.
  $line_items = $order_wrapper->commerce_line_items->value();
  // Looping for each line item.
  foreach ($line_items as $line_item) {
    // Get line item wrapper.
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    // Get product price.
    $unit_price = $line_item_wrapper->commerce_unit_price->value();
    // Check currency: if not IDR.
    if ($unit_price['currency_code'] != 'IDR') {
      $unit_price['amount'] = commerce_currency_convert($unit_price['amount'], $unit_price['currency_code'], 'IDR');
    }

    // Get item name: by default is line item label (SKU).
    $item_name = $line_item->line_item_label;
    // Check whether line item has product: possible other value: shipping, tax.
    if (isset($line_item->commerce_product)) {
      $item_name .= ' ' . $line_item_wrapper->commerce_product->value()->title;
    }
    // Define item.
    $item = array(
      'id' => $line_item->line_item_id,
      'price' => (int) $unit_price['amount'],
      'quantity' => (int) $line_item->quantity,
      'name' => $item_name,
    );
    // Store it inside items.
    $items[] = $item;
  }
  // Define default billing and shipping information.
  $billing = $shipping = array();
  // Check billing information.
  if ($order_wrapper->commerce_customer_billing->value()) {
    // Get customer billing address from order wrapper.
    $billing = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    // Populate customer's billing address.
    $billing = array(
      'first_name' => (isset($billing['first_name'])) ? $billing['first_name'] : '',
      'last_name' => (isset($billing['last_name'])) ? $billing['last_name'] : '',
      'address' => (isset($billing['thoroughfare'])) ? $billing['thoroughfare'] : '',
      'city' => (isset($billing['locality'])) ? $billing['locality'] : '',
      'postal_code' => (isset($billing['postal_code'])) ? $billing['postal_code'] : '',
      'phone' => $pane_values['veritrans']['credit_card']['phone'],
      'country_code' => 'IDN', // @todo: ISO 3166-1 alpha-3: Indonesia only.
    );

    // Check whether shipping is the same as billing.
    if (isset($order->data['profile_copy']['customer_profile_shipping']['status']) && !empty($order->data['profile_copy']['customer_profile_shipping']['status'])) {
      $shipping = $billing;
    }
    else {
      // Check shipping information.
      if ($order_wrapper->commerce_customer_shipping->value()) {
        // Get shipping information.
        $shipping = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();

        // Populate customer's billing address
        $shipping = array(
          'first_name' => (isset($shipping['first_name'])) ? $shipping['first_name'] : '',
          'last_name' => (isset($shipping['last_name'])) ? $shipping['last_name'] : '',
          'address' => (isset($shipping['thoroughfare'])) ? $shipping['thoroughfare'] : '',
          'city' => (isset($shipping['locality'])) ? $shipping['locality'] : '',
          'postal_code' => (isset($shipping['postal_code'])) ? $shipping['postal_code'] : '',
          'phone' => $pane_values['veritrans']['phone'],
          'country_code' => 'IDN',
        );
      }
    }
  }

  // Check customer phone.
  $customer_phone = (isset($pane_values['veritrans']['phone'])) ? $pane_values['veritrans']['phone'] : '';
  if (empty($customer_phone)) {
    // Get phone from token.
    $customer_phone = commerce_veritrans_token_get_phone($pane_values['veritrans']['token']);
  }

  // Define transaction data to be sent.
  $transaction_data = array(
    'payment_type' => 'credit_card',
    'credit_card' => array(
      'token_id' => $pane_values['veritrans']['token'],
      'bank' => $payment_method['settings']['credit_card']['bank'],
    ),
    'transaction_details' => array(
      'order_id' => $payment_method['settings']['prefix'] . $order->order_id,
      'gross_amount'  => $order_wrapper->commerce_order_total->amount->value(),
    ),
    'item_details' => $items,
    'customer_details' => array(
      'first_name' => (isset($billing['first_name'])) ? $billing['first_name'] : $order->mail,
      'last_name' => (isset($billing['last_name'])) ? $billing['last_name'] : '',
      'email' => $order->mail,
      'phone' => $customer_phone,
    ),
  );

  // @todo: Add token information: only if not regular?
  if (isset($pane_values['veritrans']['credit_card']['save'])) {
    $transaction_data['credit_card']['save_token_id'] = boolval($pane_values['veritrans']['credit_card']['save']);
  }

  // Add billing information.
  if (!empty($billing)) {
    $transaction_data['customer_details']['billing_address'] = $billing;
  }
  // Add shipping information.
  if (!empty($shipping)) {
    $transaction_data['customer_details']['billing_address'] = $shipping;
  }

  // Define API endpoint settings.
  $settings = array(
    'url' => $payment_method['settings']['url'],
    'server_key' => $payment_method['settings']['server_key'],
    'timeout' => 5.0,
    'op' => 'charge',
  );
  // Do payment API.
  $payment = commerce_veritrans_api($transaction_data, $settings);
  // Check payment result.
  if (is_string($payment) && !empty($payment)) {
    // Decode the string.
    $payment = json_decode($payment);
    // Chek json decode result.
    if (json_last_error() != JSON_ERROR_NONE) {
      // Log this condtion.
      watchdog('commerce_veritrans', 'Payment server return invalid json. Debug: <pre>@payment</pre> <pre>@pmethod</pre> <pre>@order</pre> <pre>@td</pre>', array(
        '@payment' => print_r($payment, TRUE),
        '@pmethod' => print_r($payment_method, TRUE),
        '@order' => print_r($order, TRUE),
        '@td' => print_r($transaction_data, TRUE),
      ), WATCHDOG_ERROR, 'Veritrans Submit');
      // Payment API error: invalid json.
      drupal_set_message(t('Payment error: unable to interpret payment server return value.'), 'error');
      return FALSE;
    }
  }
  else {
    // Log this condtion.
    watchdog('commerce_veritrans', 'Payment server error: @error. Debug: <pre>@payment</pre> <pre>@pmethod</pre> <pre>@order</pre> <pre>@td</pre>', array(
      '@error' => (isset($payment->error)) ? $payment->error : t('unknown'),
      '@payment' => print_r($payment, TRUE),
      '@pmethod' => print_r($payment_method, TRUE),
      '@order' => print_r($order, TRUE),
      '@td' => print_r($transaction_data, TRUE),
    ), WATCHDOG_ERROR, 'Veritrans Submit');
    // Payment API error: return object.
    drupal_set_message(t('Payment error: @error', array(
      '@error' => (isset($payment->error)) ? $payment->error : t('unknown'),
    )), 'error');
    return FALSE;
  }

  // Save input into order data.
  if (isset($pane_values['veritrans']['credit_card'])) {
    // Spare phone number information.
    $pane_values['veritrans']['phone'] = $pane_values['veritrans']['credit_card']['phone'];
    // We do not need to save this data: user credential.
    unset($pane_values['veritrans']['credit_card']);
  }
  $order->data['commerce_veritrans'] = $pane_values['veritrans'] + $charge;
  $order->data['commerce_veritrans']['response'] = $payment;

  // Save order data.
  commerce_order_save($order);

  // Check payment status.
  // 1. status code: 200.
  // 2. transaction status: capture.
  if (isset($payment->status_code) && $payment->status_code == '200'
    && isset($payment->transaction_status) && strtolower($payment->transaction_status) == 'capture'
  ) {
    $status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $status_message = 'status';
    // Save payment token.
    commerce_veritrans_token_new($order->order_id, $payment, $pane_values['veritrans']['credit_card']['phone']);
  }
  elseif ((isset($payment->status_code) && $payment->status_code == '201')
    || (isset($payment->transaction_status) && strtolower($payment->transaction_status) == 'challenge')
  ) {
    $status = COMMERCE_PAYMENT_STATUS_PENDING;
    $status_message = 'warning';
  }
  else {
    $status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $status_message = 'error';
  }

  // Create new payment transaction.
  $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = (isset($payment->order_id)) ? $payment->order_id : $order->order_id;
  $transaction->remote_status = $status;
  $transaction->amount = (isset($payment->gross_amount)) ? intval($payment->gross_amount) : $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = $status;
  $transaction->message = 'Payment Data: <br />!data';
  $payment_data = '';
  foreach ((array) $payment as $key =>$data) {
    $payment_data[] = str_replace('_', ' ', $key) . ' = ' . ((is_array($data)) ? '<ul><li>' . implode('</li><li>', $data) . '</li></ul>' : $data);
  }
  $transaction->message_variables = array(
    '!data' => implode('<br />', $payment_data),
  );
  commerce_payment_transaction_save($transaction);

  // @todo: review this section.
  if (isset($payment->status_message)) {
    drupal_set_message(t('@type: @message', array(
      '@type' => commerce_veritrans_payment_method_types($payment_method['settings']['type']),
      '@message' => $payment->status_message,
    )), $status_message);
  }
  // User get redirected to checkout payment first.
  // DSM already called there before complete page.
  // watchdog('commerce_veritrans', $status_message . ': <pre>'.print_r($payment, TRUE).'</pre>');
  // Always return TRUE at this step: because we only create new transaction.
  return ($status == COMMERCE_PAYMENT_STATUS_SUCCESS || $status == COMMERCE_PAYMENT_STATUS_PENDING) ? TRUE : FALSE;
}

/**
 * Public Functions.
 */

/**
 * Function commerce_veritrans_credit_card_form().
 *
 * Returns a set of credit card form elements that payment method modules can
 *   incorporate into their submission form callbacks.
 *
 * @param $fields
 *   An array specifying the CC fields that should be included on the form; the
 *     card number and expiration date fields are always present.
 * @param $default
 *   An array of default values for the available CC fields.
 *
 * @todo Move this to outside file.
 */
function commerce_veritrans_credit_card_form($fields = array(), $default = array()) {
  // Add veritrans js: because this form is loaded via ajax, use attached!
  // (https://payments.veritrans.co.id/vtdirect/veritrans.min.js)
  $form['#attached']['js'][] = array(
    'data' => $fields['veritrans']['vt_js'],
    'type' => 'external',
  );
  $form['#attached']['js'][] = array(
    'data' => $fields['veritrans'],
    'type' => 'setting',
  );
  // Add veritrans js to get token.
  $form['#attached']['js'][] = array(
    'data'  => drupal_get_path('module', 'commerce_veritrans') . '/theme/commerce_veritrans.token.js',
    'type' => 'file',
  );

  // Create credit_card tree.
  $form['credit_card'] = array(
    '#tree' => TRUE,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'commerce_payment') . '/theme/commerce_payment.theme.css'),
    ),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 1,
  );

  // Merge default values into the default array.
  $default += array(
    'type' => '',
    'owner' => '',
    'number' => '',
    'exp_month' => date('m'),
    'exp_year' => date('Y'),
    'code' => '',
    'save' => 0,
  );
  $current_year_2 = date('y');
  $current_year_4 = date('Y');

  // Always add a field for the credit card number.
  $form['credit_card']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Card number'),
    '#default_value' => $default['number'],
    '#attributes' => array('autocomplete' => 'off'),
    '#required' => TRUE,
    '#maxlength' => 19,
    '#size' => 20,
    '#validated' => TRUE,
  );

  // Always add fields for the credit card expiration date.
  $form['credit_card']['exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiration'),
    '#options' => drupal_map_assoc(array_keys(commerce_months())),
    '#default_value' => strlen($default['exp_month']) == 1 ? '0' . $default['exp_month'] : $default['exp_month'],
    '#required' => TRUE,
    '#prefix' => '<div class="commerce-credit-card-expiration">',
    '#suffix' => '<span class="commerce-month-year-divider">/</span>',
    '#validated' => TRUE,
  );

  // Build a year select list that uses a 4 digit key with a 2 digit value.
  $options = array();

  for ($i = 0; $i < 20; $i++) {
    $options[$current_year_4 + $i] = str_pad($current_year_2 + $i, 2, '0', STR_PAD_LEFT);
  }

  $form['credit_card']['exp_year'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $default['exp_year'],
    '#suffix' => '</div>',
    '#validated' => TRUE,
  );

  $form['credit_card']['code'] = array(
    '#type' => 'password',
    '#title' => !empty($fields['code']) ? $fields['code'] : t('Security code'),
    '#default_value' => $default['code'],
    '#attributes' => array('autocomplete' => 'off'),
    '#required' => TRUE,
    '#maxlength' => 4,
    '#size' => 4,
    '#validated' => TRUE,
  );

  // @todo: improve this with states.
  if (isset($fields['phone']) && !empty($fields['phone'])) {
    $form['credit_card']['phone'] = array(
      '#type' => 'select',
      '#title' => t('Phone Number'),
      '#options' => $fields['phone'],
    );
  }
  else {
    $form['credit_card']['phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone Number'),
      '#default_value' => '',
      '#attributes' => array('autocomplete' => 'off'),
      '#required' => TRUE,
      '#validated' => TRUE,
      '#maxlength' => 14,
      '#size' => 14,
    );
  }

  if (isset($fields['type']) && in_array($fields['type'], array('oneclick', 'twoclick'))) {
    // Get valid veritrans token.
    $tokens = commerce_veritrans_token_get($fields['uid']);
    // Check whether token is available.
    if (!empty($tokens)) {
      // Define token options.
      $token_options = array();
      foreach ($tokens as $token) {
        $token = (array) $token;
        $token_options[$token['token']] = $token['first'] . ' - ' . $token['last'] . ' (' . $token['phone'] . ')';
      }
      // Add last options.
      $token_options[0] = t('New Credit Card');
      // Define tokens form: select.
      $form['tokens'] = array(
        '#type' => 'select',
        '#title' => t('Saved Credit Card'),
        '#options' => $token_options,
        '#description' => t('Your first 6 digits and 4 last digits of credit card number and phone number for the last transactions.'),
        '#weight' => 0,
      );
      // Collapsed standard credit card form.
      $form['credit_card']['#collapsed'] = TRUE;
    }
    // Add save credit card option.
    $form['credit_card']['save'] = array(
      '#type' => 'checkbox',
      '#default_value' => $default['save'],
      '#title' => t('Save credit card'),
      '#title_display' => 'before',
    );
  }

  $form['token'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array(
      'id' => 'token_id',
    ),
  );

  return $form;
}

/**
 * Function commerce_veritrans_payment_method_types().
 *
 * Returns a set of payment methods that veritrans payment gateway can handle.
 *
 * @param string $key
 *   Optional payment method key.
 *
 * @return array
 *   Payment method array.
 */
function commerce_veritrans_payment_method_types($key = '') {
  // Define payment method type available at Veritrans.
  $payment_method = array(
    'bri_epay' => t('e-Pay BRI'),
    'credit_card' => t('Credit Card'),
    'cimb_clicks' => t('CIMB Clicks'),
    'mandiri_clickpay' => t('Mandiri Clickpay'),
    'bank_transfer' => t('Virtual Account'),
  );
  return (!empty($key) && isset($payment_method[$key])) ? $payment_method[$key] : $payment_method;
}

/**
 * Function commerce_veritrans_api().
 *
 * @param array $data
 *   Payment data.
 * @param array $settings
 *   Payment API settings.
 *
 * @return mixed
 *   If success returns string json.
 *   If failed returns drupal connection object.
 *
 * @todo: after processing.
 */
function commerce_veritrans_api($data, $settings) {
  // Define default endpoint.
  $endpoint = (isset($settings['url'])) ? $settings['url'] : '';
  // Define api operation.
  $operation = (isset($settings['op'])) ? $settings['op'] : '';
  // Define return value.
  $return = FALSE;

  // Define stream context.
  $stream_context = stream_context_create(array(
    'ssl' => array(
      'local_cert' => drupal_get_path('module', 'topup') . '/cacert.pem',
      'verify_peer' => FALSE,
      'verify_host' => FALSE,
    ),
  ));

  // Define option for http request.
  $http_options = array(
    'headers' => array(
      'Content-Type' =>  'application/json',
      'Accept' => 'application/json',
      'Authorization' => 'Basic ' . base64_encode($settings['server_key'] . ':'),
    ),
    'max_redirects' => 0,
    'timeout' => (isset($settings['timeout'])) ? (float) $settings['timeout'] : 10.0,
    'method' => 'POST',
    'data' => (!empty($data)) ? json_encode($data) : '',
    'context' => $stream_context,
  );

  // Do real HTTP Request: input validation already available.
  $result = drupal_http_request($endpoint . '/' . $operation, $http_options);

  // Check the result:
  // 1. Must have 200 http code.
  // 2. Must have data.
  if (isset($result->code) && $result->code == 200
    && isset($result->data) && !empty($result->data)
  ) {
    // Set return value.
    $return = $result->data;
  }
  else {
    $return = $result;
  }

  // Log this condition, everything get log.
  watchdog('veritrans', 'Send API with result (@status) Debug <pre>!debug</pre> <pre>Options: !options</pre>', array(
    '@status' => (isset($result->code) && $result->code == 200) ? 'OK' : 'BAD',
    '!debug' => print_r($result, TRUE),
    '!options' => print_r($http_options, TRUE),
  ), ((isset($result->code) && $result->code == 200) ? WATCHDOG_INFO : WATCHDOG_ERROR), l(t('Veritrans: API'), request_path()));

  return $return;
}

/**
 * Function commerce_veritrans_token_new().
 *
 * Insert token data into table commerce_veritrans_token.
 *
 * @param int $order_id
 *   Order ID.
 * @param object $payment
 *   Payment data response from veritrans.
 * @param string $phone
 *   Credit Card phone number parameter.
 *
 * @return bool
 *   Flag whether add operation is successfull.
 */
function commerce_veritrans_token_new($order_id, $payment, $phone) {
  // Check payment data.
  if (isset($payment->saved_token_id) && !empty($payment->saved_token_id)
    && isset($payment->saved_token_id_expired_at) && !empty($payment->saved_token_id_expired_at)
    && isset($payment->masked_card) && !empty($payment->masked_card)
  ) {
    // Get global user object.
    global $user;
    // Get unix timestamp from token expired.
    $expire_time = strtotime($payment->saved_token_id_expired_at);
    // Check whether strtotime fail.
    if (empty($expire_time)) {
      // String example: 2025-02-10 14:54:11 (Y-m-d H:i:s)
      $expire_time = DateTime::createFromFormat('Y-m-d H:i:s', $payment->saved_token_id_expired_at);
      $expire_time = $expire_time->format('U');
    }
    // Insert into db.
    return db_insert('commerce_veritrans_token')
      ->fields(array(
        'uid' => $user->uid,
        'order_id' => $order_id,
        'token' => $payment->saved_token_id,
        'phone' => $phone,
        'expired' => $expire_time,
        'first' => substr($payment->masked_card, 0, 6),
        'last' => substr($payment->masked_card, -4),
      ))
      ->execute();
  }
  // Return the return value.
  return FALSE;
}

/**
 * Function commerce_veritrans_token_get().
 *
 * @param int $uid
 *   Drupal UID.
 *
 * @return array
 *   Veritrans Token.
 */
function commerce_veritrans_token_get($uid) {
  // @todo: all time token.
  // @todo: sort by?
  $tokens = db_select('commerce_veritrans_token', 't')
    ->fields('t')
    ->condition('uid', $uid, '=')
    ->condition('expired', time(), '>')
    ->execute()
    ->fetchAll();
  return $tokens;
}

/**
 * Function commerce_veritrans_token_get_phone().
 *
 * @param string $token
 *   Payment Token.
 *
 * @return string
 *   Phone number used for previous payment.
 */
function commerce_veritrans_token_get_phone($token) {
  return db_select('commerce_veritrans_token', 't')
    ->fields('t', array('phone'))
    ->condition('token', $token, '=')
    ->execute()
    ->fetchField();
}
