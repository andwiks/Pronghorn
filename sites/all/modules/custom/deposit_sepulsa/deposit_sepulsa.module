<?php
/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function deposit_sepulsa_menu() {
  $items = array();

  $items['user/wallet'] = array(
    'title' => t('My Wallet'),
    'description' => 'Deposit money and show the history of it.',
    'page callback' => 'deposit_sepulsa_page',
    'access arguments' => array('deposit credit'),
  );

  return $items;
}

/**
 * Implements hook_services_resources().
 */
function deposit_sepulsa_permission() {
  return array(
    'deposit credit' => array(
      'title' => t('Deposit credit'),
      'description' => t('Deposit to sepulsa credit.'),
    ),
  );
}

/**
 * Implements page for deposit credit
 */
function deposit_sepulsa_page() {
  global $user;

  $deposit_form = deposit_sepulsa_view();
  $history = deposit_sepulsa_list_transaction();
  //drupal_set_message("<pre>".print_r($history, true)."</pre>");
  $credit = userpoints_get_current_points($user->uid, 'all');

  return theme('deposit_page', array('deposit_form' => $deposit_form, 'history' => $history, 'credit' => $credit));
}

function deposit_sepulsa_list_transaction(){
    if (arg(0) == 'user'){
        $rows = [];
        global $user;
        $user_uid = $user->uid;
        if (!isset($user_uid)) $user_uid = $user->uid;
        $totalamount = userpoints_get_current_points($user_uid, 'all');
        $totalamount = number_format($totalamount,0,",",".");

        $settings = array(
          'show_user' => FALSE,
        );
        $header = userpoints_get_transaction_header($settings);
        //$query = db_select('userpoints_txn', 'p')->extend('PagerDefault')->extend('TableSort')
        $query = db_select('userpoints_txn', 'p')->extend('TableSort')
            ->fields('p')
            ->condition('p.uid', $user_uid)
            ->condition('p.status', '0') // only show approved userpoints
            ->orderByHeader($header)
            ->orderBy('p.txn_id', 'DESC');
            //->limit(variable_get(USERPOINTS_REPORT_LIMIT, 10));

        if (module_exists('taxonomy')) {
          $query->leftJoin('taxonomy_term_data', 't', 'p.tid = t.tid');
        }
        foreach ($query->execute() as $transaction) {
          $rows[] = userpoints_get_transaction_row($transaction, $settings);
        }

        $content['header'] = $header;
        $content['rows'] = $rows;
        $content['totalamount'] = $totalamount;

        return theme('deposit_list_transaction', array('content' => $content));
    }
}

/**
 * Implements hook_theme().
 */
function deposit_sepulsa_theme($existing, $type, $theme, $path) {
    return array(
      'deposit_page' => array(
        'variables' => array('deposit_form' => NULL, 'history' => NULL, 'credit' => 0),
        'template' => 'deposit_page', // place you file in 'theme' folder of you module folder
        'path' => drupal_get_path('module', 'deposit_sepulsa')
      ),
      'deposit_list_transaction' => array(
        'variables' => array('content' => NULL),
        'template' => 'deposit_list_transaction', // place you file in 'theme' folder of you module folder
        'path' => drupal_get_path('module', 'deposit_sepulsa')
      )
    );
}

/**
 * Implements hook_services_resources().
 */
function deposit_sepulsa_services_resources() {
  $sepulsa_resources = array(
    'deposit' => array(
	  'actions' => array(
        'get_deposit_product' => array(
          'help' => 'List all deposit product',
          'callback' => '_deposit_sepulsa_get_deposit_product',
          'documentation callback' => '_deposit_sepulsa_get_deposit_product_doc',
          'args' => array(),
          'access arguments' => array('access content'),
        ),
      )
    ),
  );

  return $sepulsa_resources;
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function deposit_sepulsa_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['deposit_sepulsa'] = array(
    'type' => 'deposit_sepulsa',
    'name' => t('Deposit Sepulsa'),
    'description' => t('Deposit Sepulsa.'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add product'),
    'base' => 'commerce_product_line_item',
  );

  return $line_item_types;
}


/**
 * Implements hook_commerce_product_type_info().
 */
function deposit_sepulsa_commerce_product_type_info() {
  $product_types = array();

  $product_types['deposit'] = array(
    'type' => 'deposit',
    'name' => t('Deposit'),
    'description' => t('Deposit.'),
  );

  return $product_types;
}

/**
 * Implements hook_node_info().
 */
function deposit_sepulsa_node_info() {
  return array(
    'deposit' => array(
      'name' => t('Deposit Sepulsa'),
      'base' => 'node_content',
      'description' => t('Deposit Sepulsa product display'),
      'locked' => TRUE,
    ),
  );
}


/**
 * Implements hook_preprocess_page().
 */
function deposit_sepulsa_preprocess_page(&$variables) {
  if (drupal_is_front_page()) {
    $variables['deposit_sepulsa_form'] = drupal_get_form('deposit_sepulsa_form');
  }
}


/**
 * Implements hook_block_info().
 */
function deposit_sepulsa_block_info() {
  $blocks = array();
  $blocks['deposit_sepulsa'] = array(
    'info' => t('Deposit Sepulsa'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function deposit_sepulsa_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'deposit_sepulsa' :
      $block['content'] = deposit_sepulsa_view();
      break;
  }

  return $block;
}

function deposit_sepulsa_form($form, &$form_state) {
  $option = get_deposit_product();
  foreach($option as $value) {
	$deposit[$value['product_id']] = $value['title'];
  }
  $form['deposit'] = array(
	'#type' => 'select',
	'#title' => '',
	//'#required' => true,
	'#options' => $deposit,
	'#attributes' => array(
      'class' => array(
        'input-text full-width'
      ),
    ),
  );
  $form['submit'] = array(
	'#type' => 'submit',
	'#title' => t('Process'),
	'#value' => t('Process'),
	'#attributes' => array(
      'class' => array(
        'btn style1'
      ),
    ),
	'#prefix' => '<div style="padding-top:10px; float: right;">',
	'#suffix' => '</div>'
  );

  return $form;
}

function deposit_sepulsa_form_submit($form, &$form_state) {
  global $user, $base_url;
  $product_id = $form_state["values"]["deposit"];
  // Create the new order in checkout status.
  $order = commerce_order_new($user->uid, 'cart');
  commerce_order_save($order);

  // line item
  $product = commerce_product_load($product_id);
  $line_item = commerce_product_line_item_new($product, 1, $order->order_id, array(), 'deposit_sepulsa');
  commerce_line_item_save($line_item);

  // wrap the order
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->commerce_line_items[] = $line_item;

  // save the order
  commerce_order_save($order);

  drupal_goto($base_url.'/checkout/'.$order->order_id);
}

/**
 * Custom function to assemble renderable array for block content.
 * Returns a renderable array with the block content.
 * @return
 *   returns a renderable array of block content.
 */
function deposit_sepulsa_view() {
  $my_form = drupal_get_form('deposit_sepulsa_form');
  $output = drupal_render($my_form);

  return $output;
}

/**
 * Implements hook_cron_queue_info().
 */
function deposit_sepulsa_cron_queue_info() {
    $queues = array();
    $queues['topup_credit_deposit'] = array(
      'worker callback' => 'topup_credit_deposit', //function to topup credit deposit
      'time' => 60, //seconds to spend working on the queue
    );
    return $queues;
}

function topup_credit_deposit($item) {
  $params = array (
	'uid' => $item['uid'],
	'points' => $item['amount'],
	'tid' => $item['tid'],
	'description' => 'Credit Deposit'
  );
  userpoints_userpointsapi($params);
  // update order to completed
  commerce_order_status_update($item['order'], 'completed');
  watchdog('topup_credit_deposit', 'Topup Credit Deposit <br /><pre>'.print_r($item, true).'</pre>');
}

function _deposit_sepulsa_get_deposit_product(){
  $deposit_product = get_deposit_product();

  return $deposit_product;
}

/**
 * Function _deposit_sepulsa_get_deposit_product_doc().
 *
 * Documentation callback for index actions deposit.
 */
function _deposit_sepulsa_get_deposit_product_doc() {
  global $base_url;
  $response = '
  {
	"product_id": 58
    "title": "Deposit Sepulsa 50.000"
  },
  {
	"product_id": 59
    "title": "Deposit Sepulsa 25.000"
  },
  {
	"product_id": 60
    "title": "Deposit Sepulsa 10.000"
  }
  ';
  $element = array(
    '#name' => t('Deposit Sepulsa'),
    '#description' => t('List all deposit product.'),
    '#auth' => FALSE,
    '#path' => 'deposit/get_deposit_product',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/deposit/get_deposit_product.json',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    // Errors.
    '#errors' => array(
	  'csrf_validation' => array(
        '#question' => '401 Unauthorized: CSRF Validation Failed',
        '#description' => t('When drupal detect that the user already login from other site or header X-CSRF-Token is needed.'),
        '#response' => '
        [
          "CSRF validation failed"
        ]',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

/**
 * Public Functions.
 */

function get_deposit_product(){
  $option = [];
  $i = 0;
  /*$query = "SELECT product_id, title FROM commerce_product WHERE type='deposit' ORDER BY title";
  $result = db_query($query);
  foreach ($result as $row) {
	$option[$row->product_id] = $row->title;
  }*/
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_product')
	->propertyCondition('status', 1)
	->propertyCondition('type', 'deposit')
	->fieldOrderBy('commerce_price', 'amount', 'DESC');
  $result = $query->execute();
  foreach ($result['commerce_product'] as $key=>$row) {
	$product = commerce_product_load($row->product_id);
	$option[$i] = array('product_id'=>$product->product_id, 'title'=>$product->title);
	$i = $i+1;
  }

  return $option;
}
