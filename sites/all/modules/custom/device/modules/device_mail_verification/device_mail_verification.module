<?php
/**
 * @file
 * device_mail_verification.module
 *
 * @author aizat@sepulsa.com
 */

/**
 * Implements hook_menu()
 */
function device_mail_verification_menu() {
  $items = array(
    'device_mail/verification/%' => array(
      'page callback' => 'device_mail_verification_link_confirm',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'device_mail_verification.inc',
    ),
  );
  $items['admin/config/devices/device_mail_settings'] = array(
    'title' => 'Mail Verification',
    'description' => 'Configure default behavior of device mail.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('device_mail_verification_settings'),
    'access arguments' => array('administer devices'),
    'file' => 'device_mail_verification.admin.inc',
  );
  $items['admin/config/devices/device_mail_settings/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/devices/update_manual'] = array(
    'title' => 'Update User Device',
    'description' => 'Update User Device maually.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('device_mail_verification_wizard'),
    'access arguments' => array('administer devices'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'device_mail_verification.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_mail()
 */
function device_mail_verification_mail($key, &$message, $params) {
  switch ($key) {
    case 'verify':
      $langcode = $message['language'];
      $message['subject'] = variable_get('device_mail_subject', 'Verification of your mail at Sepulsa.com');
      $message['body'][] = variable_get('device_mail_body',
      'Please click on the following link to confirm this email address at Sepulsa.com');
      $message['body'][] = url(
        'device_mail/verification/' . $params['hash'],
        array(
          'absolute' => TRUE,
        )
      );
      break;
  }
}

/**
 * Function device_mail_verification_send_verification().
 */
function device_mail_verification_send_verification($mail = '', $did = '') {    

  $hash = drupal_hash_base64(drupal_get_hash_salt() . drupal_random_bytes(16) . $mail);
  $lang = language_default('language');
  $send = drupal_mail(
    'device_mail_verification',
    'verify',
    $mail,
    $lang,
    array(
      'hash' => $hash,
    )
  );

  if ($send) {
    $created = time();
    $timeout = variable_get('device_mail_timeout', 0);
    $fields_insert = array(
          'did' => $did,
          'status' => 0,
          'mail' => $mail,
          'hash' => $hash,
          'created' => $created,
          'timeout' => $created+$timeout,
        );

    // Check mail has already registered.
    $user = user_load_by_mail($mail);

    if ($user === FALSE) {
      $fields_insert['new_flag'] = 1;
    }
    else {
      $fields_insert['new_flag'] = 0;
    }

    // Insert Data to device_mail_verification Table.
    db_insert('device_mail_verification')
    ->fields($fields_insert)
    ->execute();

    // Return true.
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_cron()
 */
function device_mail_verification_cron() {
  if (variable_get('device_mail_timeout', 0) != 0) {
    $mail_result = db_select('device_mail_verification', 'e')
        ->fields('e')
        ->condition('status', 2, '=')
        ->condition('timeout', REQUEST_TIME, '<')
        ->execute();

    while ($current_mail = $mail_result->fetchAssoc()) {
      db_delete('device_mail_verification')
          ->condition('did', $current_mail['did'], '=')
          ->execute();
    }
  }
}

/**
 * Function device_mail_verification_transfer_order().
 *
 * @param string $current_uid
 *   Sting current_uid.
 * @param string $update_uid
 *   String update_uid.
 */
function device_mail_verification_transfer_order($current_uid = '' , $update_uid = '') {
  db_update('commerce_order')
        ->fields(array('uid' => $update_uid))
        ->condition('uid', $current_uid, '=')
        ->execute();
  db_update('commerce_order_revision')
        ->fields(array('revision_uid' => $update_uid))
        ->condition('revision_uid', $current_uid, '=')
        ->execute();
  db_update('commerce_payment_transaction')
        ->fields(array('uid' => $update_uid))
        ->condition('uid', $current_uid, '=')
        ->execute();
  db_update('commerce_payment_transaction_revision')
        ->fields(array('revision_uid' => $update_uid))
        ->condition('revision_uid', $current_uid, '=')
        ->execute();
}
