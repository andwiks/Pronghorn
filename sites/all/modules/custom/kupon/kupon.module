<?php

define('KUPON_UPLOAD_PERM', 'kupon_upload_perm');

/**
 * Implements hook_views_api().
 */
function kupon_views_api() {
  return array(
    'api' => 3, 
    'path' => drupal_get_path('module', 'kupon'), 
    'template path' => drupal_get_path('module', 'kupon'),
  );
}

/**
* Implementation of hook_permission().
*/

function kupon_permission() {
  return array(
	KUPON_UPLOAD_PERM => array(
	  'title' => t('Kupon Upload CSV'),
	  'description' => t('Upload Owned Unique Coupon in CSV'),
	),
  );
}

/**
* Implementation of hook_menu().
*/

function kupon_menu() {
  $items = array();

  $items['admin/content/unique_coupon'] = array(
    'title'            => t('Upload Owned Unique Coupon'),
    'description'      => t('Upload Owned Unique Coupon'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('create_owned_unique_coupon_form'),
    'access arguments' => array(KUPON_UPLOAD_PERM),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

function create_owned_unique_coupon_form($form, &$form_state){
    $form['simple_coupon_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Simple Coupon ID'),
        '#required' => true,
        '#description' => t('Simple Coupon ID'),
    );
    
    $form['#attributes']['enctype'] = "multipart/form-data";
    $form['csv_upload'] = array(
        '#type' => 'file',
        '#title' => t('CSV File'),
        '#size' => 40,
        '#description' => t('Select the CSV file to be imported. '),
    );
    
    $form['submit'] = array(
        '#type' => 'submit', 
        '#title' => 'Submit',
        '#value' => 'Submit'
    );
    
    return $form;
}

function create_owned_unique_coupon_form_validate($form, &$form_state){
    $validators = array('file_validate_extensions' => array('csv'));
    $file = file_save_upload('csv_upload', $validators);
    // check file uploaded OK
    if (!$file) { 
      form_set_error('csv_upload', t('A file must be uploaded'));
    }
    else if($file->filemime != 'text/csv') {
      form_set_error('csv_upload', t('The file must be of CSV type only.'));
    }
    else {
      // set files to form_state, to process when form is submitted
      $form_state['values']['csv_upload'] = $file;
    } 
}

function create_owned_unique_coupon_form_submit($form, &$form_state){
    $unique_code_total = 0;
    $filepath = $form_state['values']['csv_upload']->destination;
    $handle = @fopen($filepath, "r");
    $simple_coupon_id = $form['simple_coupon_id']['#value'];
    $node_coupon = node_load($simple_coupon_id);
    
    if (isset($node_coupon->field_product[LANGUAGE_NONE])) {
        $product = commerce_product_load($node_coupon->field_product[LANGUAGE_NONE][0]['product_id']);
        $expiry = field_get_items('commerce_product', $product, 'field_expiry_date');
        $expiry = $expiry[0]['value'];
    } else {
        $expiry = time();
    }
    //drupal_set_message("<pre>".print_r($node_coupon, true)."</pre>");
    if ($node_coupon != null 
        && $node_coupon->type == 'coupon' 
        && (isset($node_coupon->field_coupon_type[LANGUAGE_NONE]) 
            && ($node_coupon->field_coupon_type[LANGUAGE_NONE][0]['value'] == 'unique'
                || $node_coupon->field_coupon_type[LANGUAGE_NONE][0]['value'] == 'offline_unique'))) {
        while ($row = fgetcsv($handle, 1000, ',')) {
            $unique_code = $row[0];
            // start create owned unique coupon
            $node = new stdClass();
            $node->title = $node_coupon->title;
            // if voucher is offline unique
            if ($node_coupon->field_coupon_type[LANGUAGE_NONE][0]['value'] == 'offline_unique') {
              $node->type = "offline_owned_unique";
            } else {
              $node->type = "owned_unique_coupon";
            }
            $node->language = LANGUAGE_NONE;

            $node->field_simple_coupon[$node->language][] = array(
              'target_id' => $node_coupon->nid,
              'target_type' => 'node',
            );
            $node->field_unique_coupon_code[$node->language][] = array(
              'value' => $unique_code,
            );
            $node->field_owned_coupon_expiry[$node->language][] = array(
              'value' => $expiry,
              'timezone' => date_default_timezone(),
              'timezone_db' => date_default_timezone(),
              'date_type' => 'datestamp',
            );
            $node->uid = 1;
            $node = node_submit($node); // Prepare node for saving
            node_save($node);
            $unique_code_total = $unique_code_total + 1;
        }    
        drupal_set_message('Unique Codes Import Successfully', 'notice');
    } else {
        drupal_set_message('Invalid Simple Coupon ID', 'error');
    }
}

// function to get user own voucher that must be hidden
function kupon_get_own_voucher($user) {
  $voucher = array();
  // get count of user own voucher
  $result = db_query("SELECT sc.field_simple_coupon_target_id AS simple_coupon, mt.field_coupon_max_taken_value AS max_taken, COUNT(sc.field_simple_coupon_target_id) AS count_simple_coupon
    FROM
    {node} n
    LEFT JOIN {field_data_field_simple_coupon} sc ON n.nid = sc.entity_id AND (sc.entity_type = 'node' AND sc.deleted = '0')
    INNER JOIN {node} nsc ON sc.field_simple_coupon_target_id = nsc.nid
    LEFT JOIN {field_data_field_owned_coupon_expiry} ce ON n.nid = ce.entity_id AND (ce.entity_type = 'node' AND ce.deleted = '0')
    LEFT JOIN {field_data_field_coupon_max_taken} mt ON nsc.nid = mt.entity_id AND (mt.entity_type = 'node' AND mt.deleted = '0')
    WHERE (( (n.uid = '" . $user->uid . "' ) )AND(( (n.status = '1') AND (n.type IN  ('offline_owned_simple', 'offline_owned_unique', 'owned_simple_coupon', 'owned_unique_coupon')) AND (DATE_FORMAT(FROM_UNIXTIME(ce.field_owned_coupon_expiry_value), '%Y-%m-%d') >= '" . date('Y-m-d') . "') AND (sc.field_simple_coupon_target_id >= mt.field_coupon_max_taken_value) )))
    GROUP BY simple_coupon");

    //dpm($result->queryString);
  foreach ($result as $record) {
    $voucher[] = $record->simple_coupon;
  }
  // get nid of voucher that must be hidden

  return $voucher;
}

/* implement hook_commerce_cart_product_add(). */
function kupon_commerce_cart_product_add($order, $product, $quantity, $line_item) {
  global $user;

  foreach (commerce_info_fields('commerce_product_reference') as $field) {
    // Build query.
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node', '=')
      ->fieldCondition($field['field_name'], 'product_id', $product->product_id, '=')
      ->range(0, 1);

    if ($result = $query->execute()) {
      // Return node id.
      $nid = array_shift(array_keys($result['node']));
      $vouchers = kupon_get_own_voucher($user);
      if (in_array($nid, $vouchers)) {
        // delete line item when voucher over limit
        drupal_set_message(t('Sorry, cannot add this voucher.'), 'warning');
        commerce_cart_order_product_line_item_delete($order, $line_item->line_item_id);
      }
    }
  }
}
