<?php

/**
 * @file
 */

/**
 * Implements hook_commerce_line_item_type_info().
 */
function multifinance_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['multifinance'] = array(
    'type' => 'multifinance',
    'name' => t('Multifinance'),
    'description' => t('References an Multifinance product and displays it with the SKU as the label.'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add product'),
    'base' => 'commerce_product_line_item',
  );

  return $line_item_types;
}

/**
 * Implements hook_commerce_cart_line_item_refresh().
 */
function multifinance_commerce_cart_line_item_refresh($line_item, $order_wrapper) {
  if ($line_item->type == 'multifinance' && !empty($line_item->data['inquiry']['total_x'])) {
    $line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'] = $line_item->data['inquiry']['total_x'];
    $line_item->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'][0]['price']['amount'] = $line_item->data['inquiry']['total_x'];
  }
}

/**
 * Implements hook_commerce_product_calculate_sell_price_line_item_alter().
 */
function multifinance_commerce_product_calculate_sell_price_line_item_alter($line_item) {
  if ($line_item->type == 'multifinance' && !empty($line_item->data['inquiry']['total_x'])) {
    $line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'] = $line_item->data['inquiry']['total_x'];
  }
}

/**
 * Implements hook_commerce_product_type_info().
 */
function multifinance_commerce_product_type_info() {
  $product_types = array();

  $product_types['multifinance'] = array(
    'type' => 'Multifinance',
    'name' => t('Multifinance'),
    'description' => t('An multifinance product.'),
  );

  return $product_types;
}

/**
 * Implements hook_field_attach_validate().
 */
function multifinance_field_attach_validate($entity_type, $entity, &$errors) {
  if ($entity_type == 'commerce_line_item' && $entity->type == 'multifinance') {
    $order = commerce_cart_order_load($GLOBALS['user']->uid);
    if (!empty($order)) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

      foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
        if ($line_item_wrapper->getBundle() == $entity->type && $line_item_wrapper->field_customer_number->value() == $entity->field_customer_number[LANGUAGE_NONE][0]['value']) {
          $errors['field_customer_number'][LANGUAGE_NONE][0][] = array(
            'error' => 'multifinance_duplicate_number',
            'message' => t('The number you enter already on cart'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for commerce_cart_add_to_cart_form().
 */
function multifinance_form_commerce_cart_add_to_cart_form_multifinance_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'multifinance_add_to_cart_form_validate';
}

/**
 * Implements hook_node_info().
 */
function multifinance_node_info() {
  return array(
    'multifinance' => array(
      'name' => t('Multifinance'),
      'base' => 'node_content',
      'description' => t('Multifinance product display'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function multifinance_preprocess_page(&$variables) {
  if (drupal_is_front_page() && user_access('view any commerce_product entity of bundle multifinance')) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_product');
    $query->entityCondition('bundle', 'multifinance');
    $query->fieldOrderBy('commerce_price', 'amount', 'DESC');

    $result = $query->execute();

    if (!empty($result['commerce_product'])) {
      $product_ids = array_keys($result['commerce_product']);

      $values = array(
        'type' => 'multifinance',
        'data' => array(
          'context' => array(
            'product_ids' => $product_ids,
          ),
        ),
      );
      $line_item = entity_create('commerce_line_item', $values);

      $variables['multifinance_form'] = drupal_get_form('commerce_cart_add_to_cart_form_multifinance', $line_item);
    }
  }
}

function multifinance_add_to_cart_form_validate(&$form, &$form_state) {
  if ($form_state['submitted']) {
    $customer_number = $form_state['values']['line_item_fields']['field_customer_number'][LANGUAGE_NONE][0]['value'];
    $inquiry = &drupal_static('multifinance_inquiry_data__' . $customer_number);

    // foreach (array_keys($form['submit']['#attributes']['class'], 'inactive') as $key) {
    //   unset($form['submit']['#attributes']['class'][$key]);
    // }

    module_load_include('inc', 'kraken_api');

    $data = array(
      'customer_number' => $customer_number,
      'product_id' => multifinance_products(entity_metadata_wrapper('commerce_product', $form_state['values']['product_id'])->sku->value()),
    );

    $inquiry = kraken_api_call('inquire', 'POST', $data);
    if (!empty($inquiry)) {
      if ($inquiry['status'] == '00') {
        $form_state['line_item']->data['inquiry'] = $inquiry;
      }
      elseif (!empty($inquiry['note'])) {
        form_set_error('inquiry', $inquiry['note']);
      }
      else {
        form_set_error('inquiry', 'Please retry');
      }
    }
    else {
      form_set_error('inquiry', 'Please retry');
    }
  }
}

function multifinance_products($operator = NULL) {
  $cache = cache_get('multifinance_products');

  if ($cache) {
    $products = $cache->data;
  }
  else {
    module_load_include('inc', 'kraken_api');
    $kraken_products = kraken_api_call('product?type=multi');

    foreach ($kraken_products['list'] as $product) {
      $products[$product['operator']] = $product['product_id'];
    }

    cache_set('multifinance_products', $products, 'cache', CACHE_TEMPORARY);
  }

  return empty($operator) ? $products : $products[$operator];
}

function multifinance_payment_execute($order_wrapper) {
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if ($line_item_wrapper->getBundle() == 'multifinance' && $line_item_wrapper->field_line_item_status->value() == 'pending') {
      multifinance_payment_line_item($line_item_wrapper);
    }
  }
}

function multifinance_payment_line_item($line_item_wrapper) {
  $data = array(
    'customer_number' => $line_item_wrapper->field_customer_number->value(),
    'order_id' => $line_item_wrapper->order_id->value(),
    'product_id' => multifinance_products($line_item_wrapper->commerce_product->sku->value()),
  );

  module_load_include('inc', 'kraken_api');
  $response = kraken_api_call('transaction', 'POST', $data);

  $line_item_wrapper->field_transaction_id->set($response['transaction_id']);
  $line_item_wrapper->field_line_item_status->set($response['status']);

  $line_item = $line_item_wrapper->value();
  $line_item->data = $response;
  entity_save('commerce_line_item', $line_item);
}
