<?php
/**
 * @file
 * offline_coupon.module
 *
 * @author dwi@sepulsa.com
 */

/**
 * Implements hook_services_resources().
 */
function offline_coupon_services_resources() {
  $offline_coupon_resources = array(
    'offline_coupon' => array(
      'actions' => array(
        'redeem' => array(
          'help' => 'Redeem offline coupon.',
          'callback' => 'offline_coupon_resource_redeem',
          'access callback' => 'services_access_menu',
          'documentation callback' => 'offline_coupon_resource_redeem_doc',
          'args' => array(
            array(
              'name' => 'code',
              'type' => 'string',
              'description' => 'Merchant code',
              'source' => array(
                'data' => 'code',
                'param' => 'code',
              ),
              'optional' => TRUE,
              'http_method' => 'POST',
            ),
            array(
              'name' => 'voucher_id',
              'type' => 'int',
              'description' => 'Voucher NID',
              'source' => array(
                'data' => 'voucher_id',
                'param' => 'voucher_id',
              ),
              'optional' => FALSE,
              'http_method' => 'POST',
            ),
          ),
        ),
      ),
    ),
  );

  return $offline_coupon_resources;
}

/**
 * Function offline_coupon_resource_redeem().
 *
 * @param string $code
 *   String Merchant code or Order mail.
 * @param int $voucher_id
 *   Node ID.
 */
function offline_coupon_resource_redeem($code, $voucher_id) {
  // Call offline coupon redeem function.
  $voucher = _offline_coupon_redeem($code, $voucher_id);
  // Check if can get voucher data.
  if (!empty($voucher)) {
    return t('REDEEM BERHASIL!!<br />Kode diskon: @code <br /> @title', array(
      '@code' => $voucher['code'],
      '@title' => $voucher['title'],
    ));
  }
  // Other condition: Invalid Voucher.
  return services_error(t('Invalid Voucher'), 406);
}

/**
 * Implements hook_forms().
 */
function offline_coupon_forms($form_id, $args) {
  $forms = array();

  // Construct a valid cart form ID from the arguments.
  if (strpos($form_id, 'offline_coupon_redeem_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'offline_coupon_redeem_form',
    );
  }

  return $forms;
}

/**
 * Function offline_coupon_redeem_form().
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 * @param int $voucher_id
 *   Voucher ID.
 *
 * @return array
 *   Form array.
 */
function offline_coupon_redeem_form($form, &$form_state, $voucher_id) {
  $form = array();

  $form['merchant_code'] = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#maxlength' => 100,
    '#required' => FALSE,'#attributes' => array(
      'class' => array('input-text'),
      'placeholder' => t('Merchant Code'),
    ),
  );

  $form['voucher_id'] = array(
    '#type' => 'hidden',
    '#value' => $voucher_id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('btn', 'style1'),
    ),
    '#value' => t('Redeem'),
  );

  return $form;
}

/**
 * Function offline_coupon_redeem_form_submit().
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 */
function offline_coupon_redeem_form_submit($form, &$form_state) {
  // Redeem the coupon.
  $voucher = _offline_coupon_redeem($form_state['values']['merchant_code'], $form_state['values']['voucher_id']);
  // Check the result.
  if (!empty($voucher)) {
    // Show message that redeem success.
    drupal_set_message(t('REDEEM BERHASIL!!!<div class="voucher-code">Kode diskon: @code</div>@title', array(
      '@code' => $voucher['code'],
      '@title' => $voucher['title'],
    )));
  }
  // Other condition: give error message: Invalid voucher.
  drupal_set_message(t('Invalid voucher.'), 'error');
}

/**
 * Function _offline_coupon_redeem().
 *
 * @param string $code
 *   Voucher merchant code or valid order mail address.
 * @param int $voucher_id
 *   Voucher node ID.
 *
 * @return mixed
 *   Array of voucher data or FALSE.
 */
function _offline_coupon_redeem($code, $voucher_id) {
  global $user;
  // Define default value is_voucher_valid.
  $is_voucher_valid = FALSE;
  // Voucher ID must integer value.
  $voucher_id = intval($voucher_id);
  // Get voucher wrapper.
  $voucher = entity_metadata_wrapper('node', $voucher_id);
  if ($voucher) {
    // Checking:
    // 1. Voucher is still published.
    // 2. Voucher is owned by user.
    if ($voucher->author->getIdentifier() == $user->uid
      && $voucher->status->value() == 1
    ) {
      // Get voucher code.
      $voucher_code = $voucher
        ->field_simple_coupon
        ->field_product[0]
        ->field_merchant_code
        ->value();
      // Get merchant code.
      $v_code = array_map('trim', explode(",", $voucher_code));
      if (in_array(strtoupper($code), $v_code)) {
        $is_voucher_valid = TRUE;
      }
      elseif (valid_email_address($code)) {
        // Customer / merchant input using email.
        // Get order id.
        $order_id = $voucher
          ->field_order_id
          ->value();
        // Get order wrapper.
        $order_wrapper = entity_metadata_wrapper('commerce_order', $order_id);
        if ($order_wrapper->mail->value() == $code) {
          $is_voucher_valid = TRUE;
        }
      }
      // Check is voucher valid flag.
      if ($is_voucher_valid) {
        // Unpublish the voucher.
        $voucher->status->set(0);
        $voucher->title->set($voucher->title->value() . '-' . $code);
        $voucher->save();
        // Return array with voucher information.
        return array(
          'code' => (isset($voucher->field_unique_coupon_code)) ? $voucher->field_unique_coupon_code->value() : '',
          'title' => $voucher->title->value(),
        );
      }
    }
  }
  // Other condition: return FALSE.
  return FALSE;
}
