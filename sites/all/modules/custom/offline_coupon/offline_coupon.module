<?php
/**
 * @file
 */

/**
 * Implements hook_services_resources().
 */
function offline_coupon_services_resources() {
  $offline_coupon_resources = array(
    'offline_coupon' => array(
      'actions' => array(
        'redeem' => array(
          'help' => 'Redeem offline coupon.',
          'callback' => 'offline_coupon_resource_redeem',
          'access callback' => 'services_access_menu',
          'documentation callback' => 'offline_coupon_resource_redeem_doc',
          'args' => array(
            array(
              'name' => 'code',
              'type' => 'string',
              'description' => 'Merchant code',
              'source' => array(
                'data' => 'code',
                'param' => 'code',
              ),
              'optional' => TRUE,
              'http_method' => 'POST',
            ),
            array(
              'name' => 'voucher_id',
              'type' => 'int',
              'description' => 'Voucher NID',
              'source' => array(
                'data' => 'voucher_id',
                'param' => 'voucher_id',
              ),
              'optional' => FALSE,
              'http_method' => 'POST',
            ),
          ),
        ),
      )
    ),
  );

  return $offline_coupon_resources;
}

function offline_coupon_resource_redeem($code, $voucher_id) {
  global $user;
  // get voucher node
  $voucher = entity_metadata_wrapper('node', $voucher_id);
  if ($voucher) {
    $voucher_code = $voucher
        ->field_simple_coupon
        ->field_product[0]
        ->field_merchant_code
        ->value();
    // check publish, user and code
    if ($voucher->author->getIdentifier() == $user->uid &&
        $voucher->status->value() == 1) {
      $v_code = array_map('trim',explode(",", $voucher_code));
      return in_array(strtoupper($code), $v_code);
      if (!in_array(strtoupper($code), $v_code)) {
        return services_error(t('Invalid merchant code'), 406);
      }
      $kode = (isset($voucher->field_unique_coupon_code)) ? $voucher->field_unique_coupon_code->value() : "";
      $msg = "REDEEM BERHASIL!!!<br>";
      $msg .= t("Kode diskon: ") . $kode;
      $msg .= "<br>" . $voucher->title->value();
      $voucher->status->set(0);
      $voucher->title->set($voucher->title->value() . '-' . $code);
      $voucher->save();
      return $msg;
    }
    return services_error(t('Invalid Voucher'), 406);
  }
  else {
    return services_error(t('Invalid Voucher'), 406);
  }
}


/**
 * Implements hook_forms().
 */
function offline_coupon_forms($form_id, $args) {
  $forms = array();

  // Construct a valid cart form ID from the arguments.
  if (strpos($form_id, 'offline_coupon_redeem_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'offline_coupon_redeem_form',
    );
  }

  return $forms;
}


/* implement hook_form */
function offline_coupon_redeem_form($form, &$form_state, $voucher_id) {
  $form = array();
  $form['merchant_code'] = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#maxlength' => 100,
    '#required' => FALSE,'#attributes' => array(
      'class' => array('input-text'),
      'placeholder' => t('Merchant Code')
    ),

  );

  $form['voucher_id'] = array(
    '#type' => 'hidden',
    '#value' => $voucher_id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('btn', 'style1'),
    ),
    '#value' => t('Redeem')
  );

  return $form;
}

function offline_coupon_redeem_form_submit($form, &$form_state) {
  global $user;

  // get voucher node
  $voucher = entity_metadata_wrapper('node', $form_state['values']['voucher_id']);
  if ($voucher) {
    $voucher_code = $voucher
        ->field_simple_coupon
        ->field_product[0]
        ->field_merchant_code
        ->value();
    // check publish, user and code
    if ($voucher->author->getIdentifier() == $user->uid &&
        $voucher->status->value() == 1) {
      $v_code = array_map('trim',explode(",", $voucher_code));
      if (!in_array(strtoupper($form_state['values']['merchant_code']), $v_code)) {
        drupal_set_message(t('Invalid merchant code.'), 'error');
      } else {
        $kode = (isset($voucher->field_unique_coupon_code)) ? $voucher->field_unique_coupon_code->value() : "";
        $msg = "REDEEM BERHASIL!!!";
        $msg .= "<div class='voucher-code'>" . t("Kode diskon: ") . $kode . "</div>";
        $msg .= $voucher->title->value();
        $voucher->status->set(0);
        $voucher->title->set($voucher->title->value() . '-' . $form_state['values']['merchant_code']);
        $voucher->save();
        drupal_set_message($msg, 'status');
      }
    } else {
      drupal_set_message(t('Invalid voucher.'), 'error');
    }
  } else {
    drupal_set_message(t('Invalid voucher.'), 'error');
  }

}
