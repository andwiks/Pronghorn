<?php
/**
 * @file
 * poin2000.module
 *
 * @author andre4s_y
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_rules_action_info().
 */
function poin2000_rules_action_info() {
  $actions = array();

  $actions['poin2000_queue_topup_pulsa'] = array(
    'label' => t('Queue Top Up Pulsa Poin 2000 from Order data.'),
    'parameter' => array(
      'commerce_order' => array(
        'type' => 'commerce_order',
        'label' => t('Order in checkout'),
      ),
      'topup_type' => array(
        'type' => 'text',
        'label' => t('TopUp Type'),
        'options list' => 'poin2000_get_topuptype',
      ),
    ),
    'group' => t('Commerce Order'),
    'callbacks' => array(
      'execute' => 'poin2000_queue_topup_pulsa',
    ),
  );

  return $actions;
}

/**
 * Implements hook_cron_queue_info().
 */
function poin2000_cron_queue_info() {
  $queues['poin2000_pulsa'] = array(
    'worker callback' => 'poin2000_pulsa_queue',
    'time' => 120,
  );

  return $queues;
}

/**
 * Callback Functions.
 */

/**
 * Action callback: Queue Product Pulsa from Order data.
 */
function poin2000_queue_topup_pulsa($order, $topup_type) {
  // Define default pulsa container.
  $pulsa_container = array();

  // Get order wrapper.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Get order line items.
  $line_items = $order_wrapper->commerce_line_items->value();
  // Looping for each line item.
  foreach ($line_items as $line_item) {
    // Only for line item mobile_prepaid.
    if ($line_item->type == 'mobile_prepaid') {
      // Get line item wrapper.
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
      // Get product object.
      $product = $line_item_wrapper->commerce_product->value();
      // Get API provider.
      $api_provider = field_get_items('commerce_product', $product, 'field_api_provider');
      // Only if field_api provider is poin2000.
      if ($api_provider[0]['value'] == 'poin2000') {
        // Get Phone Number: only one number.
        $field_phone_number = field_get_items('commerce_line_item', $line_item, 'field_phone_number');
        // Get Package Code.
        $field_package_code = field_get_items('commerce_product', $product, 'field_package_code');
        // Get quantity.
        $quantity = intval($line_item->quantity);
        // Looping for each quantity.
        for($i = 0; $i < $quantity; $i++) {
          // Store it in the container: for each quantity.
          $pulsa_container[] = array(
            'type' => $topup_type,
            'order_id' => $order->order_id,
//             'line_item_id' => $line_item->
            'field_phone_number' => $field_phone_number[0]['value'],
            'field_package_code' => $field_package_code[0]['value'],
          );
        }
      }
    }
  }

  // Check whether pulsa container is available.
  if (!empty($pulsa_container)) {
    // Get the queue.
    $queue = DrupalQueue::get('poin2000_pulsa');
    // Looping for each pulsa container.
    foreach ($pulsa_container as $item) {
      $queue->createItem($item);
    }
  }
}

/**
 * Queue callback: send xml top up request.
 */
function poin2000_pulsa_queue($pulsa = array()) {
  // Currently only log this.
  watchdog('poin2000', 'Queue Data Debug <pre>@pulsa</pre>', array(
    '@pulsa' => print_r($pulsa, TRUE),
  ), WATCHDOG_INFO);
}

/**
 * Private Functions.
 */

/**
 * Function poin2000_get_topuptype().
 *
 * @return array
 *   Topup Type.
 */
function poin2000_get_topuptype() {
  return array(
    'topUpRequest' => t('Top Up Request'),
    'topUpInquiry' => t('Top Up Inquiry'),
  );
}