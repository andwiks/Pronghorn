<?php

/**
* Implementation of hook_permission().
*/
function referral_sepulsa_permission() {
	$perm = array(
		"access referral admin" => array(
	  	'title' => t('Access Referral Admin'),
	  	'description' => t('Access Referral Admin'),
		),
		"access daily referral order report" => array(
	  	'title' => t('Access Daily Referral Report'),
	  	'description' => t('Access Daily Referral Report'),
		),
  );
  return $perm;
}

/**
 * Implements hook_services_resources().
 */
function referral_sepulsa_services_resources() {
  $definition = array(
    'referral' => array(
      'actions' => array(
        'link' => array(
          'help' => 'Get Referral Link',
          'callback' => '_referral_services_link',
          'documentation callback' => 'referral_link_doc',
          'access callback' => 'services_access_menu',
          'args' => array(
            // no parameter
          ),
        ),
				'list' => array(
          'help' => 'Get Referral List',
          'callback' => '_referral_services_list',
          'documentation callback' => 'referral_list_doc',
          'access callback' => 'services_access_menu',
          'args' => array(
            // no parameter
          ),
        ),
      ),
    ),
  );
  return $definition;
}


function _referral_services_link(){
  global $user;
  if ($user->uid == 0) return services_error(t('Invalid User'), 406);
  // Wrap around using try and catch.
  try {  
    $referral_link = url('referral/'. _referral_uid2ref($user->uid), array('query' => NULL, 'fragment' => NULL, 'absolute' => TRUE));
    return $referral_link;
  }
  catch (Exception $exception) {
    // Log this condition.
    watchdog('referral_services', 'Error at @location. Trace:<pre>@trace</pre>', array(
      '@location' => __FUNCTION__,
      '@trace' => _drupal_render_exception_safe($exception),
    ), WATCHDOG_ERROR, t('Referral Services'));
  }
}

function _referral_services_list(){
  global $user;
  if ($user->uid == 0) return services_error(t('Invalid User'), 406);
  // Wrap around using try and catch.
  try {  
    $referral = _get_referral_list($user->uid);
		unset($referral['referred_by']);
		return $referral['referral_list'];
  }
  catch (Exception $exception) {
    // Log this condition.
    watchdog('referral_services', 'Error at @location. Trace:<pre>@trace</pre>', array(
      '@location' => __FUNCTION__,
      '@trace' => _drupal_render_exception_safe($exception),
    ), WATCHDOG_ERROR, t('Referral Services'));
  }
}

function referral_link_doc() {
  global $base_url;
  $response = '["'.$base_url.'/referral/646576d6"]';
  $element = array(
    '#name' => t('Referral Link Service'),
    '#description' => t('Get Referral Link'),
    '#auth' => TRUE,
    '#path' => 'referral/link',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/referral/link.json<br />
    POST data application/json:
    ',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    // Errors.
    '#errors' => array(
      'csrf_validation' => array(
        '#question' => '401 Unauthorized: CSRF Validation Failed',
        '#description' => t('When drupal detect that the user already login from other site or header X-CSRF-Token is needed.'),
        '#response' => '
        [
          "CSRF validation failed"
        ]',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}


function referral_list_doc() {
  global $base_url;
  $response = '
		[
			{
				"uid": "102",
				"email": "tri+11@gmail.com",
				"date_registered": "2015-08-24 22:34:32",
				"points": "",
				"order_id": "",
				"date_txn": ""
			},
			{
				"uid": "103",
				"email": "tri+12@gmail.com",
				"date_registered": "2015-08-24 22:35:07",
				"points": "10.000",
				"order_id": "224",
				"date_txn": "2015-08-24 22:36:09"
			}
		]
	';
  $element = array(
    '#name' => t('Referral List Service'),
    '#description' => t('Get Referral List'),
    '#auth' => TRUE,
    '#path' => 'referral/list',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/referral/list.json<br />
    POST data application/json:
    ',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    // Errors.
    '#errors' => array(
      'csrf_validation' => array(
        '#question' => '401 Unauthorized: CSRF Validation Failed',
        '#description' => t('When drupal detect that the user already login from other site or header X-CSRF-Token is needed.'),
        '#response' => '
        [
          "CSRF validation failed"
        ]',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

function referral_sepulsa_menu() {
	$items = array();

	$items['admin/config/people/referral/custom_text'] = array(
		'title'            => t('Referral Custom Text'),
		'description'      => t('Referral Custom Page'),
		'page callback'    => 'drupal_get_form',
		'page arguments'   => array('referral_custom_text'),
		'access arguments' => array('access referral admin'),
		'type'             => MENU_NORMAL_ITEM,
	);

	$items['admin/config/people/referral/referral_list'] = array(
		'title'            => t('Referral List'),
		'page callback'    => 'admin_referral_list',
		'access arguments' => array('access referral admin'),
		'type'             => MENU_NORMAL_ITEM,
	);

	$items['admin/config/people/referral/transaction_list'] = array(
		'title'            => t('Referral Transaction List'),
		'page callback'    => 'referral_transaction_list',
		'access arguments' => array('access referral admin'),
		'type'             => MENU_NORMAL_ITEM,
	);
	
	$items['admin/people/referral/daily_referral_report'] = array(
		'title'            => t('Daily Referral Report'),
		'page callback'    => 'admin_daily_referral_report',
		'access arguments' => array('access daily referral order report'),
		'type'             => MENU_NORMAL_ITEM,
	);

	$items['user/referral_list'] = array(
		'title' => t('Your Referral'),
		'page callback' => 'referral_list',
		'access arguments' => array(REFERRAL_PERM_USE),
		'type' =>  MENU_CALLBACK,
	);

  return $items;
}

function referral_custom_text() {
	$form['referral_custom_text'] = array(
		'#type' => 'textarea',
		'#title' => t('Referral Custom Text'),
		'#default_value' => variable_get('referral_custom_text', ''),
		'#description' => t('Referral Custom text in User Page'),
	);

	return system_settings_form($form);
}

// Override Hook User View from Userpoints Module
function referral_sepulsa_user_view_alter(&$build) {
    //drupal_set_message("<pre>".print_r($build, true)."</pre>");
		unset($build['Referrals']);
}

function referral_sepulsa_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    if (isset($_COOKIE[REFERRAL_COOKIE])) {
			$arg0 = arg(0);
			$arg1 = arg(1);
			if ($arg0 == 'user' && $arg1 == 'register') {
				$cookie = unserialize($_COOKIE[REFERRAL_COOKIE]);
				$user = user_load($cookie['uid']);
				//$title = 'Anda diundang bergabung oleh '.$user->mail;
				//drupal_set_title($title);
				drupal_set_title(t("User registration"));
			}
    }
  }
}

/**
 * Implements hook_theme().
 */
function referral_sepulsa_theme($existing, $type, $theme, $path) {
    return array(
      'referral_list' => array(
        'variables' => array('content' => NULL),
        'template' => 'referral_list',
        'path' => drupal_get_path('module', 'referral_sepulsa')
      ),
			'admin_referral_list' => array(
        'variables' => array('content' => NULL),
        'template' => 'admin_referral_list',
        'path' => drupal_get_path('module', 'referral_sepulsa')
      ),
			'referral_transaction_list' => array(
        'variables' => array('content' => NULL),
        'template' => 'referral_transaction_list',
        'path' => drupal_get_path('module', 'referral_sepulsa')
      ),
			'daily_referral_report' => array(
        'variables' => array('content' => NULL),
        'template' => 'daily_referral_report',
        'path' => drupal_get_path('module', 'referral_sepulsa')
      )
    );
}

/*
// Override Point Tab from Userpoints Module
function referral_sepulsa_menu_alter(&$items) {

    unset($items['user/%user/points']);
    $items['user/%user/referral/view'] = array(
			'page callback'    => 'referral_list',
			'title'            => t('Your Referrals'),
			'access arguments' => array(REFERRAL_PERM_USE),
			'type' => MENU_LOCAL_TASK,
		);
}
*/

function referral_list(){
	global $user;
	$content = array();
	$referral_list = _get_referral_list($user->uid);
	$content = $referral_list;
  return theme('referral_list', array('content' => $content));
}

function _get_referral_list($uid) {
	$referral_list = array();

	// get referral list - start
	$referred_by = db_query("SELECT u.mail, u.created FROM referral r INNER JOIN users u ON r.referral_uid = u.uid WHERE r.uid = :uid", array('uid' => $uid))->fetchField();
	$referral = db_query("SELECT r.uid, u.mail, u.created FROM referral r INNER JOIN users u ON r.uid = u.uid WHERE r.referral_uid = :uid", array('uid' => $uid));
	foreach ($referral as $data) {
		$order_id = '';
		$date_txn = '';
		// get the points
		$points = '';
		$userpoint = db_query_range("SELECT points FROM userpoints_txn WHERE uid = :uid AND status = 0 ORDER BY txn_id ASC", 0, 1, array('uid' => $data->uid));
		foreach ($userpoint as $row) {
			$points = number_format($row->points,0,",",".");
		}

		// get first order
		$order = db_query_range("SELECT order_id, created FROM {commerce_order} WHERE (status = 'invoiced' OR status = 'completed' OR status = 'processing') AND uid = :uid ORDER by created ASC", 0, 1, array('uid' => $data->uid));
    foreach ($order as $row) {
			$order_id = $row->order_id;
			$date_txn = $row->created;
			$date_txn = format_date($date_txn, 'custom', REFERRAL_DATE_FORMAT);
		}
		
		//if (isset($order_id)) {
			$referral_list[] = array(
				'uid' => $data->uid,
				'email' => $data->mail,
				'date_registered' => format_date($data->created, 'custom', REFERRAL_DATE_FORMAT),
				'points' => $points,
				'order_id' => $order_id,
				'date_txn' => $date_txn,
			);
		//}
	}
	// get referral list - end
	$referral = array(
		'referred_by' => $referred_by,
		'referral_list' => $referral_list
	);
	return $referral;
}

function admin_referral_list() {
	//$form = drupal_get_form('admin_referral_list_form');
	//$output = drupal_render($form);
	$content = array();
	if (isset($_SESSION['referral_list'])) {
		$content = $_SESSION['referral_list'];
	}

  return theme('admin_referral_list', array('content' => $content));
}

function admin_referral_list_form() {
	$email = '';
	if (isset($_SESSION['email'])) $email = $_SESSION['email'];

	$form['referral_email'] = array(
		'#type' => 'textfield',
		'#title' => t('Email'),
		'#required' => true,
		'#default_value' => $email
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#title' => 'Submit',
		'#value' => 'Submit'
	);

	return $form;
}

function admin_referral_list_form_submit($form, &$form_state){
	//drupal_set_message('<pre>'.print_r($form, true).'</pre>');
	$email = $form['referral_email']['#value'];
	$uid = db_query("SELECT uid FROM users WHERE mail='".$email."'")->fetchField();
	if (empty($uid)) {
		drupal_set_message('Email not found');
	} else {
		$referral_list = _get_referral_list($uid);
		$_SESSION['referral_list'] = $referral_list;
		$_SESSION['email'] = $email;
	}
}

function admin_daily_referral_report_form($form, &$form_state) {
  $format_date = 'm/d/Y';
  $form['start_date'] = array(
    '#type' => 'date_popup',
		'#date_format' => $format_date,
		'#title' => t('Start Date'),
		'#required' => TRUE,
  );
	$form['end_date'] = array(
    '#type' => 'date_popup',
		'#date_format' => $format_date,
		'#title' => t('End Date'),
		'#required' => TRUE
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function admin_daily_referral_report_form_submit($form, &$form_state) {
	$start_date = $form['start_date']['#value']['date'].' 00:00:00';
	$end_date = $form['end_date']['#value']['date'].' 23:59:59';
	$start_date_t = strtotime($start_date);
	$end_date_t = strtotime($end_date);
	drupal_goto('admin/people/referral/daily_referral_report', array("query" => array("sd" => $start_date_t, "ed" => $end_date_t)));
}

function admin_daily_referral_report() {
	$content = array();
	$page = 0;
	$where = '';
	$item_per_page = 50;
	if (isset($_GET['page'])) $page = $_GET['page'];
	$start = $page * $item_per_page;
	
	if (isset($_GET['sd']) && isset($_GET['ed'])) {
		$where = " AND (co.created BETWEEN '".$_GET['sd']."' AND '".$_GET['ed']."')";
		//$where = " AND (co.created >= '".$sd."' AND co.created <= '".$ed."')";
	}
	
	$query = "SELECT COUNT(DISTINCT ( co.order_id)) as total_order, SUM(cpt.amount) as total_amount, from_unixtime(co.created, '%d %M %Y') AS 'order_date' 
		FROM referral r JOIN commerce_order co ON r.uid = co.uid 
		JOIN commerce_payment_transaction cpt ON co.order_id = cpt.order_id AND cpt.status = 'success' 
		WHERE co.status IN ('completed', 'invoiced') ".$where." GROUP BY order_date ORDER BY co.created DESC";
	
	// get total row for paging
	$orders_total = db_query($query);
	$total = $orders_total->rowCount();
	pager_default_initialize($total,$item_per_page);
	
	// listing
	$orders = db_query_range($query, $start, $item_per_page);
	foreach ($orders as $order) {
		$average = (float)$order->total_amount / (int)$order->total_order;
		$content[] = array(
			'order_date' => $order->order_date,
			'total_order' => $order->total_order,
			'total_amount' => commerce_currency_format($order->total_amount, 'IDR'),
			'order_amount_avg' => commerce_currency_format($average, 'IDR'),
		);
	}
	//drupal_set_message("<pre>".print_r($content, true)."</pre>");
	return theme('daily_referral_report', array('content' => $content));
}

function referral_transaction_list() {
	$content = array();
	$query = "SELECT order_id, a.created, a.mail, a.uid FROM commerce_order a
						INNER JOIN userpoints_txn b ON a.uid = b.uid
						INNER JOIN referral c ON b.uid = c.uid
						WHERE b.points > 0 AND a.status IN('invoiced', 'completed', 'processing')
						GROUP BY a.uid
						ORDER BY order_id DESC";
	$order = db_query_range($query, 0, 50);
	foreach ($order as $row) {
		$order_id = $row->order_id;
		$date_txn = $row->created;
		$mail = $row->mail;
		$uid = $row->uid;
		// get order total
		$order = commerce_order_load($order_id);
		$wrapper = entity_metadata_wrapper('commerce_order', $order);
		$total = $wrapper->commerce_order_total->amount->value();
		$total = number_format($total,0,",",".");
		// get referrer email
		$query = 'SELECT mail FROM users a INNER JOIN referral b ON a.uid = b.referral_uid WHERE b.uid = '.$uid;
		$referrer_mail = db_query_range($query, 0, 1)->fetchField();
		$content[] = array(
			'mail' => $mail,
			'order_id' => $order_id,
			'order_date' => format_date($date_txn, 'custom', REFERRAL_DATE_FORMAT),
			'order_total' => $total,
			'referrer_mail' => $referrer_mail
		);
	}
	//drupal_set_message('<pre>'.print_r($content, true).'</pre>');
  return theme('referral_transaction_list', array('content' => $content));
}

function referral_sepulsa_mail($key, &$message, $params) {
  switch ($key) {
    case 'referral_credit_notification':
      $message['subject'] = $params['subject'];
      $message['body'] = array(0=>$params['body']);
    break;
    }
}
