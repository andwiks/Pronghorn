<?php

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function sepulsa_checkout_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $checkout_panes['checkout_completion_message']['callbacks']['settings_form'] = 'sepulsa_checkout_completion_message_pane_settings_form';
  $checkout_panes['checkout_completion_message']['callbacks']['checkout_form'] = 'sepulsa_checkout_completion_message_pane_checkout_form';
}

function sepulsa_checkout_completion_message_pane_settings_form($checkout_pane) {
  module_load_include('inc', 'commerce_checkout', '/includes/commerce_checkout.checkout_pane.inc');
  $form = commerce_checkout_completion_message_pane_settings_form($checkout_pane);
  $form['container']['commerce_checkout_completion_message'] = array(
    '#type' => 'value',
    '#value' => commerce_checkout_completion_message_default(),
    '#tree' => TRUE,
  );

  $message = variable_get('commerce_checkout_completion_message', commerce_checkout_completion_message_default());

  $rules = entity_load('rules_config', FALSE, array('active' => TRUE, 'event' => 'commerce_payment_methods'));

  foreach ($rules as $rule) {
    $form['container']['commerce_checkout_completion_message'][$rule->name] = array(
      '#type' => 'text_format',
      '#title' => t('Checkout completion message for %payment_method', array('%payment_method' => $rule->label)),
      '#default_value' => isset($message[$rule->name]) ? $message[$rule->name]['value'] : NULL,
      '#format' => isset($message[$rule->name]) ? $message[$rule->name]['format'] : NULL,
      '#weight' => $rule->weight,
    );
  }


  foreach (commerce_line_item_types() as $type => $line_item_type) {
    if ($line_item_type['product']) {
      $form['container']['commerce_checkout_completion_message'][$type] = array(
        '#type' => 'text_format',
        '#title' => t('Checkout completion message for line item %type', array('%type' => $line_item_type['name'])),
        '#default_value' => isset($message[$type]) ? $message[$type]['value'] : NULL,
        '#format' => isset($message[$type]) ? $message[$type]['format'] : NULL,
        '#weight' => 10,
      );
    }
  }
  $form['container']['commerce_checkout_completion_message']['anonymous'] = array(
    '#type' => 'text_format',
    '#title' => t('Checkout completion message for anonymous user'),
    '#default_value' => isset($message['anonymous']) ? $message['anonymous']['value'] : NULL,
    '#format' => isset($message['anonymous']) ? $message['anonymous']['format'] : NULL,
    '#weight' => 50,
  );
  $form['container']['commerce_checkout_completion_message']['authenticated'] = array(
    '#type' => 'text_format',
    '#title' => t('Checkout completion message for authenticated user'),
    '#default_value' => isset($message['authenticated']) ? $message['authenticated']['value'] : NULL,
    '#format' => isset($message['authenticated']) ? $message['authenticated']['format'] : NULL,
    '#weight' => 50,
  );

  return $form;
}

function sepulsa_checkout_completion_message_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $pane_form = array();
  $markup = sepulsa_checkout_completion_message_message($order);
  $pane_form['message'] = array(
    '#markup' => $markup,
  );

  return $pane_form;
}

function sepulsa_checkout_completion_message_message($order, $format = NULL) {
  $role = user_is_logged_in() ? 'authenticated' : 'anonymous';
  list($method_id, $instance_id) = explode('|', $order->data['payment_method']);
  $markup = '';

  // Load the completion message.
  $message = variable_get('commerce_checkout_completion_message', commerce_checkout_completion_message_default());

  $parts = array(
    $instance_id,
  );

  foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items->value() as $line_item) {
    if (!in_array($line_item->type, $parts)) {
      $parts[] = $line_item->type;
    }
  }

  $parts[] = $role;

  foreach ($parts as $part) {
    if (isset($message[$part])) {
      // Perform translation.
      $message[$part]['value'] = commerce_i18n_string('commerce:checkout:complete:message', $message[$part]['value'], array('sanitize' => FALSE));

      // Perform token replacement.
      $message[$part]['value'] = token_replace($message[$part]['value'], array('commerce-order' => $order), array('clear' => TRUE));

      // Apply the proper text format.
      $message[$part]['value'] = check_markup($message[$part]['value'], empty($format) ? $message[$part]['format'] : $format);

      $markup .= $message[$part]['value'];
    }
  }

  return $markup;
}
