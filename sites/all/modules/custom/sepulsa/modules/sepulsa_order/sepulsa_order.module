<?php

/**
 * Implements hook_commerce_order_presave().
 */
function sepulsa_order_commerce_order_presave($order) {
  if (function_exists('getallheaders')) {
    $headers = getallheaders();
    if (isset($headers['X-Imei'])) {
      $imei = $headers['X-Imei'];
    }
    if (isset($headers['X-App'])) {
      $app = $headers['X-App'];
    }
  }
  else{
    if (isset($_SERVER['HTTP_X_IMEI'])) {
      $imei = $_SERVER['HTTP_X_IMEI'];
    }
    if (isset($_SERVER['HTTP_X_APP'])) {
      $$app = $_SERVER['HTTP_X_APP'];
    }
  }

  if (isset($imei) && $display_language = field_language('commerce_order', $order, 'field_imei')) {
    $order->field_imei[$display_language][0]['value'] = $imei;
  }

  if (isset($app) && $display_language = field_language('commerce_order', $order, 'field_app')) {
    $order->field_app[$display_language][0]['value'] = $app;
  }
}

/**
 * Implements hook_commerce_line_item_presave().
 */
function sepulsa_order_commerce_line_item_update($line_item) {
  if (in_array($line_item->type, variable_get('sepulsa_order_processing_line_item', array('mobile_prepaid', 'electricity_prepaid')))) {
    $line_item_success = TRUE;
    $order_wrapper = entity_metadata_wrapper('commerce_order', $line_item->order_id);

    if (!in_array($order_wrapper->status->value(), array_keys(commerce_order_statuses(array('state' => 'pending'))))) {
      return;
    }

    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      if (isset($line_item_wrapper->field_line_item_status)) {
        if ($line_item_wrapper->field_line_item_status->value() != 'success') {
          $line_item_success = FALSE;
          break;
        }
      }
      elseif (isset($line_item_wrapper->field_topup_status)) {
        if ($line_item_wrapper->field_topup_status->value() != TOPUP_SUCCESS) {
          $line_item_success = FALSE;
          break;
        }
      }
      elseif ($line_item_wrapper->getBundle() == 'electricity_prepaid') {
        $token_reloads = entity_load('token_reload', FALSE, array('line_item_id' => $line_item_wrapper->getIdentifier()));
        if (!empty($token_reloads)) {
          $token_reload = reset($token_reloads);
          if ($token_reload->status != 'success') {
            $line_item_success = FALSE;
            break;
          }
        }
      }
    }

    if ($line_item_success) {
      commerce_order_status_update($order_wrapper->value(), 'completed', FALSE, NULL, t('All line item success.'));
    }
  }
}

/**
 * Implements hook_cronapi().
 */
function sepulsa_order_cronapi() {
  $items = array();

  $items ['sepulsa_order_query_order'] = array(
    'title' => t('Sepulsa Order Query'),
    'callback' => 'sepulsa_order_query_order',
    'callback arguments' => array(
      'start' => '-1 day',
      'end' => NULL,
    ),
    'enabled' => TRUE,
    'tags' => array('sepulsa'),
    'scheduler' => array(
      'name' => 'crontab',
      'crontab' => array(
        'rules' => array('0 1 * * *'),
      ),
    ),
  );

  return $items;
}

/**
 * Implements hook_cron_queue_info().
 */
function sepulsa_order_cron_queue_info() {
  $queues ['sepulsa_order_process_order'] = array(
    'worker callback' => 'sepulsa_order_process_order',
  );
  return $queues;
}

/**
 * Implements hook_entity_info().
 */
function sepulsa_order_entity_info() {
  return array(
    'sepulsa_order' => array(
      'label' => t('Sepulsa Order'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'sepulsa_order',
      'entity keys' => array(
        'id' => 'order_id',
      ),
      'module' => 'sepulsa_order',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sepulsa_order_menu() {
  $items = array();
  $items['admin/commerce/reports/orders-detail/query'] = array(
    'title' => 'Query Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sepulsa_order_query_order_form'),
    'access arguments' => array('access commerce reports'),
    'file' => 'sepulsa_order.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

function sepulsa_order_query_order($job, $arguments, $start = '-1 day', $end = NULL) {
  extract($arguments);

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order');

  if (!empty($start) && !empty($end)) {
    $query->propertyCondition('changed', array(strtotime($start), strtotime($end)), 'BETWEEN');
  }
  elseif (!empty($start)) {
    $query->propertyCondition('changed', strtotime($start), '>');
  }
  elseif (!empty($end)) {
    $query->propertyCondition('changed', strtotime($end), '<');
  }

  $query->propertyCondition('status', array_keys(commerce_order_statuses(array('state' => 'checkout'))), 'NOT IN');
  $query->propertyCondition('status', array_keys(commerce_order_statuses(array('state' => 'cart'))), 'NOT IN');

  $result = $query->execute();

  if (!empty($result)) {
    $queue = DrupalQueue::get('sepulsa_order_process_order');
    foreach ($result['commerce_order'] as $order_id => $commerce_order) {
      $queue->createItem($order_id);
    }
  }

  return $query->count()->execute();
}

function sepulsa_order_process_order($order_id) {
  $order = commerce_order_load($order_id);

  if ($order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    $sepulsa_order = entity_load_single('sepulsa_order', $order_id);
    if (!$sepulsa_order) {
      $sepulsa_order = entity_create('sepulsa_order', array('order_id' => $order_id));
    }
    $sepulsa_order->mail = $order->mail;
    $sepulsa_order->status = $order->status;
    $sepulsa_order->created = $order->created;
    $sepulsa_order->changed = $order->changed;

    $info = entity_get_property_info('sepulsa_order');
    $sepulsa_order_wrapper = entity_metadata_wrapper('sepulsa_order', $sepulsa_order);

    $coupon_number = 0;
    foreach ($order_wrapper->commerce_line_items as $id => $line_item_wrapper) {
      switch ($line_item_wrapper->getBundle()) {
        case 'electricity_prepaid':
          $sepulsa_order_wrapper->prepaid->set($line_item_wrapper->commerce_product->value());
          $sepulsa_order_wrapper->phone->set($line_item_wrapper->electricity_phone_number->value());
          break;

        case 'mobile_prepaid':
          $sepulsa_order_wrapper->prepaid->set($line_item_wrapper->commerce_product->value());
          $sepulsa_order_wrapper->phone->set($line_item_wrapper->field_phone_number->value());
          break;

        case 'coupon':
          $coupon_number++;
          $property = 'coupon_' . $coupon_number;
          if (isset($info['properties'][$property])) {
            $sepulsa_order_wrapper->$property->set($line_item_wrapper->commerce_product->value());
          }
          else {
            $coupon_number--;
          }
          break;

        default:
          break;
      }
    }

    $sepulsa_order_wrapper->coupon_number->set($coupon_number);
    $sepulsa_order_wrapper->amount->set($order_wrapper->commerce_order_total->amount->value());
    $sepulsa_order_wrapper->currency_code->set($order_wrapper->commerce_order_total->currency_code->value());

    if (!empty($order->data['payment_method'])) {
      $payment = array();
      list($payment['method'], $payment['instance']) = explode('|', $order->data['payment_method']);

      $sepulsa_order_wrapper->payment_method->set($payment['method']);
      $sepulsa_order_wrapper->payment_instance->set($payment['instance']);
    }

    if (!empty($sepulsa_order->prepaid)) {
      try {
        entity_save('sepulsa_order', $sepulsa_order);
      }
      catch (Exception $e) {
        watchdog_exception('sepulsa_order', $e, NULL, array(), WATCHDOG_ERROR, l('view order', 'admin/commerce/orders/' . $order->order_id));
      }

      return $sepulsa_order;
    }
  }
}

function sepulsa_order_status_options_list($op = 'view') {
  $options = array();
  $states = commerce_order_states();
  foreach ($states as $name => $state) {
    if ($name != 'cart' && $name != 'checkout') {
      foreach (commerce_order_statuses(array('state' => $name)) as $order_status) {
        $options[$order_status ['name']] = $order_status ['title'];
      }
    }
  }
  return $options;
}

function sepulsa_order_payment_instance_options_list($op = 'view') {
  $rules = entity_load('rules_config', FALSE, array('active' => TRUE, 'event' => 'commerce_payment_methods'));

  $options = array();
  foreach ($rules as $rule) {
    $options[$rule->name] = $rule->label;
  }

  return $options;
}
