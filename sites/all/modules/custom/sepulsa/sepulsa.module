<?php
/**
 * @file
 * sepulsa.module
 *
 * @author andre4s_y
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_menu().
 */
function sepulsa_menu() {
  $items = array();

  $items['sepulsa'] = array(
    //'title' => 'Recharge Your Phone',
    //no need to put title on front page
    'description' => 'Sepulsa Front Page',
    'page callback' => 'sepulsa_front_page',
    'access callback' => TRUE,
    'file' => 'sepulsa.pages.inc',
  );

  $items['sepulsa/autocomplete/%'] = array(
    'title' => 'Sepulsa Autocomplete',
    'description' => 'Sepulsa Autocomplete',
    'page callback' => 'sepulsa_autocomplete',
    'access callback' => TRUE,
    'file' => 'sepulsa.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function sepulsa_menu_alter(&$items) {
  // Change hybrid auth tab into: Social Login.
  $items['user/%user/hybridauth']['title'] = 'Social Login';
}

/**
 * Public Functions.
 */

/**
 * Function sepulsa_get_card_type().
 *
 * Output Format:
 * key: node id.
 * value: node title.
 *
 * @param int|array $operator
 *   Operator term id or array operator result from sepulsa_get_operator().
 *
 * @return array
 *   Card type content.
 */
function sepulsa_get_card_type($operator) {
  // Define default options as return value.
  $options = array();
  // Get operator term id.
  $operator = (is_array($operator)) ? key($operator) : intval($operator);

  // Get node pulsa based on taxonomy id.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'pulsa')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_operator', 'tid', $operator, '=');
  $result = $query->execute();
  // Check whether result is available.
  if (isset($result['node'])) {
    $nodes = node_load_multiple(array_keys($result['node']));
    foreach ($nodes as $node) {
      $options[$node->nid] = $node->title;
    }
  }

  return $options;
}

/**
 * Function sepulsa_get_packet().
 *
 * Format:
 * key: weight.
 * value: array(id, title).
 *
 * @param int $nid
 *   Node id.
 *
 * @return array
 *   Packet options array.
 */
function sepulsa_get_packet($nid) {
  // Define default packet options.
  $options = array();

  // Load node wrapper.
  $node_wrapper = entity_metadata_wrapper('node', $nid);
  // Check node type and node status.
  if ($node_wrapper->type->value() == 'pulsa'
    && $node_wrapper->status->value() == 1
  ) {
    // Get product object.
    $products = $node_wrapper->field_product->value();
    // Looping for each product.
    foreach ($products as $product) {
      // Check product status.
      if (!empty($product->status)) {
        // Get product price for sorting/future use.
        $price = field_get_items('commerce_product', $product, 'commerce_price');
        // Add it inside options array.
        $options[] = array(
          'id' => $product->product_id,
          'title' => $product->title,
          'price' => (isset($price[0]['amount'])) ? $price[0]['amount'] : 0,
        );
      }
    }
  }

  // Return options.
  return $options;
}

/**
 * Function sepulsa_get_all_operator_data().
 *
 * @param bool $reset
 *   Variable reset flag.
 *
 * @return array
 *   Array of operators (key).
 *   Value: prefix codes and card types.
 */
function sepulsa_get_all_operator_data($reset = FALSE) {
  // Declare static operators variable.
  $operators  = &drupal_static(__FUNCTION__, NULL);
  // If already defined, and not empty, then return it.
  if (isset($operators) && !empty($operators) && !$reset) {
    return $operators;
  }

  // Get databases data from cache.
  $cache = cache_get('sepulsa_all_operator_data', 'cache');
  // Check whether cache is available.
  if (empty($cache) || $reset) {
    // Define default operators array.
    $operators = array();
    // Get all taxonomy bundle: mobile_operator with nonempty prefix.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', array('mobile_operator'))
      ->fieldCondition('field_operator_prefix', 'value', '', '!=');
    $result = $query->execute();
    // Get all taxonomy id.
    $tids = (isset($result['taxonomy_term'])) ? array_keys($result['taxonomy_term']) : array();
    // Check whether we can get available taxonomy id.
    if (!empty($tids)) {
      // Looping for each tid.
      foreach ($tids as $tid) {
        // Get term wrapper: in order to get field easily.
        $term_wrapper = entity_metadata_wrapper('taxonomy_term', $tid);
        // Get operator card types.
        $card_types = sepulsa_get_card_type($tid);
        // Get operator packets.
        $packets = array();
        foreach ($card_types as $node_id => $node_title) {
          $packets[$node_id] = sepulsa_get_packet($node_id);
        }
        // Add it in the operator array.
        $operators[$tid] = array(
          'operator' => $term_wrapper->label(),
          'prefix' => $term_wrapper->field_operator_prefix->value(),
          'cardtype' => $card_types,
          'packet' => $packets,
        );
      }
    }
    // Store it inside cache.
    cache_set('sepulsa_all_operator_data', $operators, 'cache', CACHE_PERMANENT);
  }
  else {
    $operators = $cache->data;
  }

  // Return operator array.
  return $operators;
}



function sepulsa_get_existing_number () {
  global $user;
  $existing_number = [];
  $query = "SELECT distinct(field_phone_number_value) 
			FROM commerce_order a, commerce_line_item b, field_data_field_phone_number c	
			WHERE
			a.order_id = b.order_id 
			AND b.line_item_id = c.entity_id
			AND (a.status = 'completed' OR a.status = 'invoiced')
			AND a.uid = :uid
			ORDER BY a.created DESC";
  $result = db_query($query, array(':uid' => $user->uid));
  foreach ($result as $row) {
	$existing_number[] = $row->field_phone_number_value;
  }
  
  return $existing_number;
}