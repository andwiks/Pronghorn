<?php
/**
 * @file
 * sepulsa_api_documentation.module
 *
 * @author andre4s_y
 * @since January 22nd, 2014
 *
 * @todo: bash all notice and warning messages.
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_services_resources_alter().
 */
function sepulsa_api_documentation_services_resources_alter(&$resources, &$endpoint) {
  // Add documentation callback.
  if (isset($resources['user'])) {
    $resources['user']['actions']['logout']['documentation callback'] = $resources['user']['actions']['logout']['callback'] . '_doc';
    $resources['user']['actions']['logout']['args'] = array();
    $resources['user']['actions']['token']['documentation callback'] = $resources['user']['actions']['token']['callback'] . '_doc';
    $resources['user']['actions']['token']['args'] = array();
    $resources['user']['actions']['request_new_password']['documentation callback'] = $resources['user']['actions']['request_new_password']['callback'] . '_doc';
    $resources['user']['actions']['request_new_password']['args'][0]['source']['param'] = 'name';
    $resources['user']['actions']['request_new_password']['args'][0]['http_method'] = 'POST';
    $resources['user']['actions']['register']['documentation callback'] = $resources['user']['actions']['register']['callback'] . '_doc';
    $resources['user']['operations']['retrieve']['documentation callback'] = $resources['user']['operations']['retrieve']['callback'] . '_doc';
    $resources['user']['operations']['retrieve']['args'][0]['source']['param'] = 'uid';
    $resources['user']['operations']['create']['documentation callback'] = $resources['user']['operations']['create']['callback'] . '_doc';
    $resources['user']['operations']['update']['documentation callback'] = $resources['user']['operations']['update']['callback'] . '_doc';
    $resources['user']['operations']['update']['args'][0]['source']['param'] = 'uid';
  }
  if (isset($resources['node'])) {
    $resources['node']['operations']['index']['documentation callback'] = $resources['node']['operations']['index']['callback'] . '_doc';
    $resources['node']['operations']['retrieve']['documentation callback'] = $resources['node']['operations']['retrieve']['callback'] . '_doc';
    $resources['node']['operations']['retrieve']['args'][0]['source']['param'] = 0;
  }
  if (isset($resources['views'])) {
    $resources['views']['operations']['retrieve']['documentation callback'] = $resources['views']['operations']['retrieve']['callback'] . '_doc';
    $resources['views']['operations']['retrieve']['args']['view_name']['source']['param'] = '0';
  }
}

/**
 * Callback Functions.
 */

/**
 * Documentation callback for user action logout.
 */
function _user_resource_logout_doc() {
  global $base_url;
  $response = '
    [
      true
    ]
  ';
  $element = array(
    '#name' => t('Logout Service'),
    '#description' => t('Logout a user session.'),
    '#auth' => TRUE,
    '#path' => 'user/logout',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/user/logout.json<br />POST without data but need header X-CSRF-Token from login/logintoboggan service.<br />',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'csrf_validation' => array(
        '#question' => '401 Unauthorized: CSRF Validation Failed',
        '#description' => t('When drupal detect invalid header X-CSRF-Token or user with token has already logged out.'),
        '#response' => '
        [
          "CSRF validation failed"
        ]',
      ),
      'access_denied' => array(
        '#question' => '403 Access denied for user @username',
        '#description' => t('Drupal still detect old session from X-CSFR-Token. Maybe you send invalid token or send GET request, suppose to use POST request.'),
        '#response' => '
        [
            "Access denied for user @username"
        ]',
      ),
      'already_logout' => array(
        '#question' => '406 Not Acceptable: User is not logged in.',
        '#description' => t('User has already logged out.'),
        '#response' => '
        [
            "User is not logged in."
        ]',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

/**
 * Documentation callback for user action token.
 */
function _user_resource_get_token_doc() {
  global $base_url;
  $response = '
    {
        "token": "OsCidaCeSJeXY8rPApDg2KoiPsIPDnCaEaSFgFn9B3s"
    }
  ';
  $element = array(
    '#name' => t('Token Service'),
    '#description' => t('Returns the CSRF token.'),
    '#auth' => FALSE,
    '#path' => 'user/token',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/user/token.json<br />POST without data.<br />',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'access_denied' => array(
        '#question' => '403 Access denied for user @username',
        '#description' => t('Invalid GET request, suppose to use POST request.'),
        '#response' => '
        [
            "Access denied for user @username"
        ]',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

/**
 * Documentation callback for user action request_new_password.
 */
function _user_resource_request_new_password_doc() {
  global $base_url;
  $response = '
    [
      true
    ]
  ';
  $element = array(
    '#name' => t('Request New Password Service'),
    '#description' => t('Request a new password, given a user name or email address. Password reset instruction will be sent via email.'),
    '#auth' => FALSE,
    '#path' => 'user/request_new_password',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/user/request_new_password.json<br />POST data x-www-form-urlencoded: name=andreas%40drupal.or.id <br />POST data application/json: {"name": "andreas"}<br />',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'mail_problem' => array(
        '#question' => '200 OK',
        '#description' => t('This response means currently system unable to send password reset email.'),
        '#response' => '
        [
            false
        ]',
      ),
      'missing_requirement' => array(
        '#question' => '401 Unauthorized: Missing required argument name',
        '#description' => t('Required argument: user name or user email address.'),
        '#response' => '
        [
            "Missing required argument name"
        ]',
      ),
      'access_denied' => array(
        '#question' => '403 Access denied for user @username',
        '#description' => t('Invalid GET request, suppose to use POST request.'),
        '#response' => '
        [
            "Access denied for user @username"
        ]',
      ),
      'invalid_name' => array(
        '#question' => '406 Not Acceptable: Sorry, %name is not recognized as a user name or an e-mail address.',
        '#description' => t('Input user is not valid drupal username and user email address.'),
        '#response' => '
        [
            "Sorry, %name is not recognized as a user name or an e-mail address."
        ]',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

/**
 * Documentation callback for user operations create.
 */
function _user_resource_create_doc() {
  global $base_url;
  $response = '
  {
    "uid": "10",
    "uri": "http://drupal.or.id/api/user/10"
  }
  ';
  $element = array(
    '#name' => t('Register/Create User Service'),
    '#description' => t('Create/Register a new user.'),
    '#auth' => FALSE,
    '#path' => 'user/create',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/user/register.json<br />' . $base_url . '/api/user/create.json<br />POST data x-www-form-urlencoded: account[name]=username&amp;account[mail]=mail%40drupal.or.id <br />POST data application/json: {"account":{"name":"username", "mail":"mail@drupal.or.id"}}<br />',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'missing_argument' => array(
        '#question' => '401 Unauthorized: Missing required argument account',
        '#description' => t('Required argument: account as an array.'),
        '#response' => '
        [
            "Missing required argument account"
        ]',
      ),
      'access_denied' => array(
        '#question' => '403 Access denied for user @username',
        '#description' => t('Invalid GET request, suppose to use POST request.'),
        '#response' => '
        [
            "Access denied for user @username"
        ]',
      ),
      'unsupported_request' => array(
        '#question' => '406 Not Acceptable: Unsupported request content type text/plain.',
        '#description' => t('Input json must have header Content-Type: application/json.'),
        '#response' => '
        [
            "Unsupported request content type text/plain"
        ]',
      ),
      'missing_requirement' => array(
        '#question' => '406 Not Acceptable: @field field is required.',
        '#description' => t('Required argument: user name or user email address.'),
        '#response' => '
        {
            "form_errors": {
                "@field": "@field_name field is required."
            }
        }',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

/**
 * Documentation callback for user operations retrieve.
 */
function _user_resource_retrieve_doc() {
  global $base_url;
  $response = '
    {
        "uid": "9",
        "name": "andreas",
        "mail": "andreas@drupal.or.id",
        "theme": "",
        "signature": "",
        "signature_format": "filtered_html",
        "created": "1421914415",
        "access": "1421935163",
        "login": "1421935284",
        "status": "1",
        "timezone": null,
        "language": "",
        "picture": null,
        "data": false,
        "roles": {
            "2": "authenticated user"
        },
        "rdf_mapping": {
            "rdftype": [
                "sioc:UserAccount"
            ],
            "name": {
                "predicates": [
                    "foaf:name"
                ]
            },
            "homepage": {
                "predicates": [
                    "foaf:page"
                ],
                "type": "rel"
            }
        }
    }
  ';
  $element = array(
    '#name' => t('User retrieve Service'),
    '#description' => t('Retrieve a user.'),
    '#auth' => TRUE,
    '#path' => 'user/%uid',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/user/%uid<br />GET data with user id as input.<br />',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'access_denied' => array(
        '#question' => '403 Access denied for user @username',
        '#description' => t('This service only work if user has permission to administer users or access user profiles or access own profiles.'),
        '#response' => '
        [
            "Access denied for user @username"
        ]',
      ),
      'no_controller' => array(
        '#question' => '404 Not found: Could not find the controller.',
        '#description' => t('Service output nothing. Possible missing UID input or POST data (supposed use GET).'),
        '#response' => '',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

/**
 * Documentation callback for user operations update.
 */
function _user_resource_update_doc() {
  global $base_url;
  $response = '
    # Example output: PUT without data.
    {
        "uid": "9",
        "roles": {
            "2": "authenticated user"
        }
    }
    # Example output: update password success.
    {
        "current_pass": "1234",
        "uid": "9",
        "roles": {
            "2": "authenticated user"
        }
    }
  ';
  $element = array(
    '#name' => t('User update Service'),
    '#description' => t('Update a user.'),
    '#auth' => TRUE,
    '#path' => 'user/%uid',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/user/%uid<br />PUT data x-www-form-urlencoded: data[pass]=1234&amp;data[current_pass]=12345 <br />PUT data application/json: {"data":{"pass":"1234", "current_pass":"12345"}}<br />',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'csrf_validation' => array(
        '#question' => '401 Unauthorized: CSRF Validation Failed',
        '#description' => t('When drupal detect invalid header X-CSRF-Token or user with token has already logged out.'),
        '#response' => '
        [
          "CSRF validation failed"
        ]',
      ),
      'access_denied' => array(
        '#question' => '403 Access denied for user @username',
        '#description' => t('This service only work if user has permission to administer users or access user profiles or access own profiles.'),
        '#response' => '
        [
            "Access denied for user @username"
        ]',
      ),
      'no_controller' => array(
        '#question' => '404 Not found: Could not find the controller.',
        '#description' => t('Service output nothing. This service use HTTP PUT method.'),
        '#response' => '',
      ),
      'missing_requirement' => array(
        '#question' => '406 Not Acceptable: @field field is required.',
        '#description' => t('Required argument: user name or user email address.'),
        '#response' => '
        {
            "form_errors": {
                "@field": "@field_name field is required."
            }
        }',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

/**
 * Documentation callback for node operations index.
 */
function _node_resource_index_doc() {
  global $base_url;
  $element = array(
    '#name' => t('Node index Service'),
    '#description' => t('List of nodes. By default has 20 page size.'),
    '#auth' => FALSE,
    '#path' => 'node',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => '
    <ul>
      <li>Get all node type banner which are currently active:<br />GET ' . $base_url .'/api/node.json?parameters[type]=banner&amp;parameters[status]=1</li>
      <li>Get all node type coupon which are currently active:<br />GET ' . $base_url .'/api/node.json?parameters[type]=coupon&amp;parameters[status]=1</li>
      <li>Get all user owned simple coupon:<br />GET ' . $base_url .'/api/node.json?parameters[type]=owned_simple_coupon&amp;parameters[uid]=@uid</li>
      <li>Get all user owned unique coupon:<br />GET ' . $base_url .'/api/node.json?parameters[type]=owned_unique_coupon&amp;parameters[field_order_id]=@order_id</li>
    </ul>
    ',
    // Example response. E.g., a JSON array.
    '#response' => '
    // Get all node type banner which are currently active:
    [
        {
            "nid": "2698",
            "vid": "2698",
            "type": "banner",
            "language": "id",
            "title": "Isi pulsa paling gampang ? Ya di SEPULSA",
            "uid": "92",
            "status": "1",
            "created": "1425881582",
            "changed": "1425881582",
            "comment": "0",
            "promote": "0",
            "sticky": "0",
            "tnid": "0",
            "translate": "0",
            "uri": "http://dev.sepulsa.com/api/node/2698"
        },
        {
            "nid": "2697",
            "vid": "2697",
            "type": "banner",
            "language": "id",
            "title": "Temukan deal-deal menarik hanya di SEPULSA",
            "uid": "92",
            "status": "1",
            "created": "1425881520",
            "changed": "1425984181",
            "comment": "0",
            "promote": "0",
            "sticky": "0",
            "tnid": "0",
            "translate": "0",
            "uri": "http://dev.sepulsa.com/api/node/2697"
        },
        {
            "nid": "2696",
            "vid": "2696",
            "type": "banner",
            "language": "id",
            "title": "Isi pulsa sekarang gratis",
            "uid": "92",
            "status": "1",
            "created": "1425881497",
            "changed": "1425984181",
            "comment": "0",
            "promote": "0",
            "sticky": "0",
            "tnid": "0",
            "translate": "0",
            "uri": "http://dev.sepulsa.com/api/node/2696"
        }
    ]
    ',
    // Resource prefix.
    '#verb' => 'operations',
    // Errors.
    '#errors' => array(
      'no_controller' => array(
        '#question' => '404 Not found: Could not find the controller.',
        '#description' => t('Service output nothing. Possible missing UID input or POST data (supposed use GET).'),
        '#response' => '',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

/**
 * Documentation callback for node operations retrieve.
 */
function _node_resource_retrieve_doc() {
  global $base_url;
  $element = array(
    '#name' => t('Node retrieve Service'),
    '#description' => t('Retrieve a node data.'),
    '#auth' => FALSE,
    '#path' => 'node',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => '
    <ul>
      <li>Get node data type banner, which has node id 2698:<br />GET ' . $base_url .'/api/node/2698</li>
    </ul>
    ',
    // Example response. E.g., a JSON array.
    '#response' => '
    {
        "vid": "2698",
        "uid": "92",
        "title": "Isi pulsa paling gampang ? Ya di SEPULSA",
        "log": "",
        "status": "1",
        "comment": "0",
        "promote": "0",
        "sticky": "0",
        "nid": "2698",
        "type": "banner",
        "language": "id",
        "created": "1425881582",
        "changed": "1425881582",
        "tnid": "0",
        "translate": "0",
        "revision_timestamp": "1425881582",
        "revision_uid": "92",
        "body": {
            "und": [
                {
                    "value": "Juga cepat, aman dan menguntungkan",
                    "summary": "",
                    "format": "filtered_html",
                    "safe_value": "<p>Juga cepat, aman dan menguntungkan</p>\n",
                    "safe_summary": ""
                }
            ]
        },
        "field_banner_image": {
            "und": [
                {
                    "fid": "52",
                    "uid": "92",
                    "filename": "banner3.jpg",
                    "uri": "public://banner/banner3.jpg",
                    "filemime": "image/jpeg",
                    "filesize": "51185",
                    "status": "1",
                    "timestamp": "1425881582",
                    "rdf_mapping": [],
                    "alt": "",
                    "title": "",
                    "width": "770",
                    "height": "446"
                }
            ]
        },
        "rdf_mapping": {
            "rdftype": [
                "sioc:Item",
                "foaf:Document"
            ],
            "title": {
                "predicates": [
                    "dc:title"
                ]
            },
            "created": {
                "predicates": [
                    "dc:date",
                    "dc:created"
                ],
                "datatype": "xsd:dateTime",
                "callback": "date_iso8601"
            },
            "changed": {
                "predicates": [
                    "dc:modified"
                ],
                "datatype": "xsd:dateTime",
                "callback": "date_iso8601"
            },
            "body": {
                "predicates": [
                    "content:encoded"
                ]
            },
            "uid": {
                "predicates": [
                    "sioc:has_creator"
                ],
                "type": "rel"
            },
            "name": {
                "predicates": [
                    "foaf:name"
                ]
            },
            "comment_count": {
                "predicates": [
                    "sioc:num_replies"
                ],
                "datatype": "xsd:integer"
            },
            "last_activity": {
                "predicates": [
                    "sioc:last_activity_date"
                ],
                "datatype": "xsd:dateTime",
                "callback": "date_iso8601"
            }
        },
        "name": "el7cosmos",
        "picture": "0",
        "data": "a:2:{s:7:\"contact\";i:1;s:17:\"mimemail_textonly\";i:0;}",
        "print_html_display": 0,
        "print_html_display_comment": 0,
        "print_html_display_urllist": 0,
        "print_pdf_display": 0,
        "print_pdf_display_comment": 0,
        "print_pdf_display_urllist": 0,
        "print_pdf_size": "",
        "print_pdf_orientation": "",
        "path": "http://dev.sepulsa.com/node/2698"
    }
    ',
    // Resource prefix.
    '#verb' => 'operations',
    // Errors.
    '#errors' => array(
      'no_controller' => array(
        '#question' => '404 Not found: Could not find the controller.',
        '#description' => t('Service output nothing. Possible missing UID input or POST data (supposed use GET).'),
        '#response' => '',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}

/**
 * Documentation callback for views operations retrieve.
 */
function services_views_retrieve_doc() {
  global $base_url;
  $element = array(
    '#name' => t('Views retrieve Service'),
    '#description' => t('Retrieve views data based on views name and display_id (views machine name).'),
    '#auth' => TRUE,
    '#path' => 'views',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => '
    <ul>
      <li>Get views coupon:<br />GET ' . $base_url .'/api/views/coupon?display_id=coupon</li>
      <li>Get views front banner:<br />GET ' . $base_url .'/api/views/front_banner?display_id=banner</li>
      <li>Get views user owned coupon:<br />GET ' . $base_url .'/api/views/user_owned_coupon?display_id=user_owned_coupon</li>
    </ul>
    ',
    // Example response. E.g., a JSON array.
    '#response' => '
    // List coupon output.
    [
        {
            "product_id": "44",
            "title": "Diskon 50 ribu di Lolalola",
            "image": "http://dev.sepulsa.com/sites/default/files/styles/large/public/coupon_product/LL-SEPULSA-BANNER_0.gif?itok=NCs2vtvC",
            "description": "dengan minimal pembelanjaan 150 ribu rupiah",
            "terms": "<p>- Hanya dapat dipakai 1 (Satu) kali per user<br />\ - Tidak dapat digabungkan dengan kode voucher lainnya<br />\ - Nilai voucher tidak dapat diuangkan<br />\ - Berlaku hingga May 2015</p>\ ",
            "nid": "41",
            "website": "www.lolalo.la",
            "website_link": "http://www.lolalo.la"
        },
        {
            "product_id": "40",
            "title": "Diskon 50 ribu di Shopdeca",
            "image": "http://dev.sepulsa.com/sites/default/files/styles/large/public/coupon_product/shopdeca_50.jpg?itok=vLWFmM6o",
            "description": "dengan minimal pembelanjaan 250 ribu rupiah",
            "terms": "<p>Berlaku untuk minimum pembelian Rp 250.000.-<br />\ Apabila pembelian Anda melebihi nominal yang tertera di voucher, maka Anda harus membayar biaya kekurangannya.<br />\ Tidak dapat diuangkan.<br />\ Tidak dapat digabungkan dengan promo lainnya<br />\ Tidak bisa menggunakan lebih dari 1 voucher per transaksi<br />\ Shopdeca.com berhak membatalkan transaksi apabila penggunaan voucher tidak sesuai dengan syarat &amp; ketentuan yang berlaku.</p>\ ",
            "nid": "37",
            "website": "www.shopdeca.com",
            "website_link": "http://www.shopdeca.com"
        }
    ]
    // Front banner output.
    [
        {
            "nid": "2696",
            "image": "http://dev.sepulsa.com/sites/default/files/banner/banner1.jpg",
            "title": "Isi pulsa sekarang gratis",
            "body": "Dapatkan cashback dengan isi ulang di SEPULSA"
        },
        {
            "nid": "2697",
            "image": "http://dev.sepulsa.com/sites/default/files/banner/banner2b.jpg",
            "title": "Temukan deal-deal menarik hanya di SEPULSA",
            "body": null
        },
        {
            "nid": "2698",
            "image": "http://dev.sepulsa.com/sites/default/files/banner/banner3.jpg",
            "title": "Isi pulsa paling gampang ? Ya di SEPULSA",
            "body": "Juga cepat, aman dan menguntungkan"
        }
    ]
    // User owned coupon output.
    [
        {
            "nid": "91",
            "title": "Diskon 100 ribu di Lolalola",
            "image": "http://dev.sepulsa.com/sites/default/files/styles/thumbnail/public/coupon_product/LL-SEPULSA-BANNER.gif?itok=JcISWhoe",
            "expired": "1433005200",
            "code": "SEPULSA100-1853",
            "detail": "SEPULSA100-1853 <p>Masukkan kode promo ketika melakukan pembayaran.</p>\ "
        },
        {
            "nid": "2706",
            "title": "Diskon 100 ribu di Sportdeca",
            "image": "http://dev.sepulsa.com/sites/default/files/styles/thumbnail/public/coupon_product/sportdeca_100.jpg?itok=r6FQjXom",
            "expired": "1433005200",
            "code": null,
            "detail": " <p>Masukkan kode promo <b>PULSA100</b> ketika melakukan pembayaran.</p>\ "
        }
    ]
    ',
    // Resource prefix.
    '#verb' => 'operations',
    // Errors.
    '#errors' => array(
      'missing_display_id' => array(
        '#question' => '404 Not found: Display @display_id on view coupon could not be found',
        '#description' => t('Views with display id @display_id is not available.'),
        '#response' => '
        [
            "Display @display_id on view coupon could not be found"
        ]
        ',
      ),
      'missing_views_name' => array(
        '#question' => '404 Not found: View @views_name could not be found',
        '#description' => t('Views with name @views_name is not available.'),
        '#response' => '
        [
            "View @views_name could not be found"
        ]
        ',
      ),
      'no_controller' => array(
        '#question' => '404 Not found: Could not find the controller.',
        '#description' => t('Service output nothing. Possible request is using POST data (supposed use GET).'),
        '#response' => '',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}
