<?php
/**
 * @file
 * sepulsa_newsletter.module
 *
 * @author aizat@sepulsa.com
 */

/**
 * Impelements hook_menu().
 */
function sepulsa_newsletter_menu() {

  // Administration pages.
  $items['admin/config/people/mailchimp-config'] = array(
    'title' => 'Mailchimp Configuration',
    'description' => 'Mailchimp Configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sepulsa_newsletter_form'),
    'access arguments' => array('access administration pages'),
  );

  $items['newsletter/webhook_mailchimp'] = array(
    'page callback' => 'sepulsa_webhook_mailchimp',
    'access callback' => TRUE,
  );

  $items['admin/config/people/mailchimp-upload'] = array(
    'title' => 'Mailchimp Import',
    'description' => 'Import Subscriber / Unsubscriber in Mailchimp.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sepulsa_newsletter_import_form'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Function sepulsa_webhook_mailchimp().
 * @todo : define what going todo in mailchimp webhook.
 */
function sepulsa_webhook_mailchimp() {
  // Define key webhook .
  // See : https://us12.admin.mailchimp.com/lists/tools/webhooks?id=***
  $sepulsa_key = 'dev19isokenoproblemooo!';

  // Check key.
  if (!isset($_GET['key'])) {
    // If there is no key.
    watchdog('Mailchimp Webhook', 'No security key specified, ignoring request');
  }
  elseif ($_GET['key'] != $sepulsa_key) {
    // Security key specified, but not correct.
    watchdog('Mailchimp Webhook', 'Security key specified, but not correct, wanted: @sepulsa_key but received : @received', array('@sepulsa_key' => $sepulsa_key, '@received' => $_GET['key']));
  }
  else {
    // Process the request.
    watchdog('Mailchimp Webhook', 'Processing a @type request...', array('@type' => $_POST['type']));
    switch ($_POST['type']) {
      case 'subscribe':
        subscribe($_POST['data']);
        break;

      case 'unsubscribe':
        unsubscribe($_POST['data']);
        break;

      case 'cleaned':
        cleaned($_POST['data']);
        break;

      case 'upemail':
        upemail($_POST['data']);
        break;

      case 'profile':
        profile($_POST['data']);
        break;

      default:
        watchdog('Mailchimp Webhook', '@type request ignored', array('@type' => $_POST['type']));
    }
  }
}

/**
 * Function subscribe().
 *
 * $data : data from webhook mailchimp.
 */
function subscribe($data) {
  $result = db_select('users', 'u');
  $result->fields('u', array('uid'));
  $result->condition('u.mail', $data['email']);
  $result_fix = $result->execute()->fetchAssoc();
  $user = user_load($result_fix['uid']);
  $user->field_newsletter_subscribers[LANGUAGE_NONE][0]['value'] = 1;
  user_save($user);
  watchdog('Mailchimp Webhook', '@email just subscribed!', array('@email' => $data['email']));
}

/**
 * Function unsubscribe().
 *
 * $data : data from webhook mailchimp.
 */
function unsubscribe($data) {
  $result = db_select('users', 'u');
  $result->fields('u', array('uid'));
  $result->condition('u.mail', $data['email']);
  $result_fix = $result->execute()->fetchAssoc();
  $user = user_load($result_fix['uid']);
  $user->field_newsletter_subscribers[LANGUAGE_NONE][0]['value'] = 0;
  user_save($user);
  watchdog('Mailchimp Webhook', '@email just unsubscribed!', array('@email' => $data['email']));
}

/**
 * Function cleaned().
 *
 * $data : data from webhook mailchimp.
 */
function cleaned($data) {
  watchdog('Mailchimp Webhook', '@email was cleaned from your list!', array('@email' => $data['email']));
}

/**
 * Function upemail().
 *
 * $data : data from webhook mailchimp.
 */
function upemail($data) {
  watchdog('Mailchimp Webhook', '@email changed their email address to @new_email !',
    array('@email' => $data['old_email'], '@new_email' => $data['new_email']));
}

/**
 * Function profile().
 *
 * $data : data from webhook mailchimp.
 */
function profile($data) {
  watchdog('Mailchimp Webhook', '@email updated their profile!', array('@email' => $data['email']));
}

/**
 * Function sepulsa_newsletter_form().
 */
function sepulsa_newsletter_form($form, &$form_state) {

  $form['sepulsa_newsletter_api_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Mailchimp API URL ?',
    '#size' => 200,
    '#maxlength' => 200,
    '#default_value' => variable_get('sepulsa_newsletter_api_url', 'https://us12.api.mailchimp.com/3.0/lists'),
    '#required' => TRUE,
  );

  $form['sepulsa_newsletter_id_member'] = array(
    '#type' => 'textfield',
    '#title' => 'Mailchimp ID Member ?',
    '#size' => 200,
    '#maxlength' => 200,
    '#default_value' => variable_get('sepulsa_newsletter_id_member', 'a38de08c0b'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Function sepulsa_newsletter_mailchimp_api().
 *
 * $settings -> array (method, op, email, status)
 */
function sepulsa_newsletter_mailchimp_api($settings) {
  // Untuk Edit subscribed / unsubscribed.
  // URL API, us12 adalah key terakhir sebelum - di API KEY.
  $url = variable_get('sepulsa_newsletter_api_url', 'https://us12.api.mailchimp.com/3.0/lists');

  // ID List Member test : a38de08c0b.
  // ID List Member prod : 2ae89eac82.
  $id = variable_get('sepulsa_newsletter_id_member', 'a38de08c0b');

  // Operation untuk mengambil list member.
  $op = $settings['op'];

  // MD5 Email yang akan di ganti.
  $email = md5($settings['email']);

  $data = array(
    'email_address' => $settings['email'],
    'status' => $settings['status'],
  );

  // Define option for http request.
  $http_options = array(
    // Define Method.
    'method' => $settings['method'],
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => 'application/json',
      // Define username:apikey.
      'Authorization' => 'Basic ' . base64_encode("sepulsanews:0cf0d5df56cc65702c6c5a7d404ac244-us12"),
    ),
    // Define Data.
    'data' => json_encode($data),
  );
  if ($settings['method'] == 'POST') {
    $result = drupal_http_request($url . '/' . $id . '/' . $op, $http_options);
  }
  elseif ($settings['method'] == 'PUT') {
    $result = drupal_http_request($url . '/' . $id . '/' . $op . '/' . $email, $http_options);
  }
  else {
    unset($http_options['data']);
    $result = drupal_http_request($url . '/' . $id . '/' . $op . '/' . $email, $http_options);
  }

  // print_r($result);
  return $result;
}

/**
 * Implements hook_user_presave().
 */
function sepulsa_newsletter_user_presave(&$edit, $account, $category) {
  $result = 'HTTP request not sent';
  if (isset($edit['field_newsletter_subscribers']) && !empty($edit['field_newsletter_subscribers'])) {
    if ($edit['field_newsletter_subscribers']['und'][0]['value'] == 1) {
      $status = 'subscribed';
    }
    else {
      $status = 'unsubscribed';
    }
    if (isset($account->is_new) && !empty($account->is_new)) {
      $settings = array(
        'method' => 'POST',
        'op' => 'members',
        'email' => $edit['mail'],
        'status' => $status,
      );
      $result = sepulsa_newsletter_mailchimp_api($settings);
      watchdog('Insert Newsletter', '<pre> result : @result, </pre>', array('@result' => print_r($result, TRUE)));
    }
    else {
      $settings = array(
        'method' => 'PUT',
        'op' => 'members',
        'email' => $edit['mail'],
        'status' => $status,
      );
      $result = sepulsa_newsletter_mailchimp_api($settings);
      watchdog('Update Newsletter', '<pre> result : @result, </pre>', array('@result' => print_r($result, TRUE)));
    }
  }
}

/**
 * Function sepulsa_newsletter_import_form().
 */
function sepulsa_newsletter_import_form() {
  $form['#attributes']['enctype'] = "multipart/form-data";
  $form['csv_upload'] = array(
    '#type' => 'file',
    '#title' => t('CSV File from Mailchimp'),
    '#size' => 40,
    '#description' => t('Import Subscriber / Unsubscriber in Mailchimp.'),
  );
  $form['flag_subscriber'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mailchimp Subscriber ?'),
    '#description' => t('Check if you want to import subscribed user in mailchimp.'),
    '#default_value' => 0,
    '#return_value' => 1,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#title' => 'Submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Function sepulsa_newsletter_import_form_validate().
 */
function sepulsa_newsletter_import_form_validate($form, &$form_state) {
  $validators = array('file_validate_extensions' => array('csv'));
  $file = file_save_upload('csv_upload', $validators);
  // Check file uploaded OK.
  if (!$file) {
    form_set_error('csv_upload', t('A file must be uploaded'));
  }
  elseif ($file->filemime != 'text/csv') {
    form_set_error('csv_upload', t('The file must be of CSV type only.'));
  }
  else {
    // Set files to form_state, to process when form is submitted.
    $form_state['values']['csv_upload'] = $file;
  }
}

/**
 * Function sepulsa_newsletter_import_form_submit().
 */
function sepulsa_newsletter_import_form_submit($form, &$form_state) {
  $filepath = $form_state['values']['csv_upload']->destination;
  $handle = @fopen($filepath, "r");
  $report_watchdog = array();
  $i = 0;
  while ($row = fgetcsv($handle, 1000, ',')) {
    if ($i != 0) {
      $result = db_select('users', 'u');
      $result->fields('u', array('uid'));
      $result->condition('u.mail', $row[0]);
      $result_fix = $result->execute()->fetchAssoc();

      if (isset($result_fix) && !empty($result_fix)) {
        $user = user_load($result_fix['uid']);
        $user->field_newsletter_subscribers[LANGUAGE_NONE][0]['value'] = $form_state['values']['flag_subscriber'];
        user_save($user);
        $report_watchdog[$i] = $row[0] . ' field_newsletter_subscribers change to ' . $form_state['values']['flag_subscriber'];
      }
      else {
        $report_watchdog[$i] = $row[0] . ' Not Found !';
      }
      $i++;
    }
    else {
      $i++;
    }
  }

  watchdog('Mailchimp Import', 'data : <pre> @report_watchdog </pre>',
    array('@report_watchdog' => print_r($report_watchdog, TRUE)));
}
