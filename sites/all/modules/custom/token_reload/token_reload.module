<?php

/**
 * @file
 */

/**
 * Implements hook_commerce_line_item_type_info().
 */
function token_reload_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types ['electricity_prepaid'] = array(
    'type' => 'electricity_prepaid',
    'name' => t('Electricity Prepaid'),
    'description' => t('References an electricity prepaid product and displays it with the SKU as the label.'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add product'),
    'base' => 'commerce_product_line_item',
  );

  return $line_item_types;
}

/**
 * Implements hook_commerce_product_type_info().
 */
function token_reload_commerce_product_type_info() {
  $product_types = array();

  $product_types ['electricity'] = array(
    'type' => 'electricity',
    'name' => t('Electricity'),
    'description' => t('An electicity prepaid product.'),
  );

  return $product_types;
}

/**
 * Implements hook_cron_queue_info().
 */
function token_reload_cron_queue_info() {
  $queues = array();
  // Token reload queue process: first part.
  $queues['token_reload_process'] = array(
    'worker callback' => 'token_reload_queue_process',
    'time' => 120,
  );
  // Token reload queue query: first part.
  $queues['token_reload_query'] = array(
    'worker callback' => 'token_reload_queue_query',
    'time' => 120,
  );

  $try = variable_get('token_reload_try', 2);
  $try = intval($try);
  if ($try > 1) {
    for ($i = 2; $i <= $try; $i++) {
      // Token reload queue process: for multiple try.
      $queues['token_reload_process_' . $i] = array(
        'worker callback' => 'token_reload_queue_process',
        'time' => 120,
      );
      // Token reload queue query: for multiple try.
      $queues['token_reload_query_' . $i] = array(
        'worker callback' => 'token_reload_queue_query',
        'time' => 120,
      );
    }
  }

  // Return queue array.
  return $queues;
}

/**
 * Implements hook_entity_info().
 */
function token_reload_entity_info() {
  return array(
    'token_reload' => array(
      'label' => t('Token Reload'),
      'entity class' => 'Entity',
      'controller class' => 'TokenReloadEntityController',
      'base table' => 'token_reload',
      'revision table' => 'token_reload_revision',
      'entity keys' => array(
        'id' => 'trid',
        'revision' => 'vid',
      ),
      'module' => 'token_reload',
    ),
  );
}

/**
 * Implements hook_entity_presave().
 */
function token_reload_entity_presave($entity, $type) {
  if ($type == 'commerce_line_item' && $entity->type == 'electricity_prepaid') {
    $inquiry = &drupal_static('token_reload_inquiry_data_' . $entity->electricity_customer_number[LANGUAGE_NONE][0]['value']);

    if (empty($entity->electricity_customer_number) || empty($entity->electricity_phone_number)) {
      throw new Exception("Missing required fields.");
    }
    else {
      if (!$inquiry) {
        module_load_include('inc', 'token_reload');
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $entity);

        $data = array(
          'meter_number' => $line_item_wrapper->electricity_customer_number->value(),
          'phone_number' => $line_item_wrapper->electricity_phone_number->value(),
        );

        $inquiry = token_reload_request_call($data);
      }

      if ($inquiry) {
        if ($inquiry['status'] == 'success') {
          $entity->data['inquiry'] = $inquiry;
        }
        else {
          throw new Exception($inquiry['error']);
          watchdog('token_reload', '@note: <pre>!inquiry</pre>', array('@note' => $inquiry['note'], '!inquiry' => print_r($inquiry, TRUE)), WATCHDOG_ERROR);
        }
      }
      else {
        throw new Exception('Please retry');
      }
    }
  }
}

/**
 * Implements hook_field_attach_validate().
 */
function token_reload_field_attach_validate($entity_type, $entity, &$errors) {
  if ($entity_type == 'commerce_line_item' && $entity->type == 'electricity_prepaid') {
    $order = commerce_cart_order_load($GLOBALS['user']->uid);
    if (!empty($order)) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

      foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
        if ($line_item_wrapper->getBundle() == $entity->type && $line_item_wrapper->electricity_customer_number->value() == $entity->electricity_customer_number[LANGUAGE_NONE][0]['value']) {
          $errors['electricity_customer_number'][LANGUAGE_NONE][0][] = array(
            'error' => 'token_reload_duplicate_number',
            'message' => t('The number you enter already on cart'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_forms().
 */
function token_reload_forms($form_id, $args) {
  $forms = array();

  // Construct a valid cart form ID from the arguments.
  if (strpos($form_id, 'token_reload_operation_form_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'token_reload_operation_form',
    );
  }

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter() for commerce_cart_add_to_cart_form().
 */
function token_reload_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  if ($form_state['line_item']->type == 'electricity_prepaid') {
    $form['#validate'][] = 'token_reload_add_to_cart_form_validate';
  }
}

/**
 * Implements hook_menu().
 */
function token_reload_menu() {
  $items = array();
  $items['admin/commerce/config/token-reload'] = array(
    'title' => 'Token reload settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('token_reload_settings_form'),
    'access arguments' => array('configure store'),
    'file' => 'token_reload.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_node_info().
 */
function token_reload_node_info() {
  return array(
    'electricity' => array(
      'name' => t('Electricity prepaid'),
      'base' => 'node_content',
      'description' => t('Electricity prepaid product display'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function token_reload_preprocess_page(&$variables) {
  if (drupal_is_front_page() && user_access('view any commerce_product entity of bundle electricity')) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_product');
    $query->entityCondition('bundle', 'electricity');

    $result = $query->execute();

    if (!empty($result['commerce_product'])) {
      $product_ids = array_keys($result['commerce_product']);

      $values = array(
        'type' => 'electricity_prepaid',
        'data' => array(
          'context' => array(
            'product_ids' => $product_ids,
          ),
        ),
      );
      $line_item = entity_create('commerce_line_item', $values);

      $variables['token_reload_form'] = drupal_get_form('commerce_cart_add_to_cart_form', $line_item);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function token_reload_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'token_reload') . '/includes/views',
  );
}

/**
 * Callback Functions.
 */

function token_reload_add_to_cart_form_validate(&$form, &$form_state) {
  if ($form_state['submitted']) {
    $inquiry = &drupal_static('token_reload_inquiry_data_' . $form_state['line_item']->electricity_customer_number[LANGUAGE_NONE][0]['value']);

    foreach (array_keys($form['submit']['#attributes']['class'], 'inactive') as $key) {
      unset($form['submit']['#attributes']['class'][$key]);
    }

    module_load_include('inc', 'token_reload');
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $form_state['line_item']);

    $data = array(
      'meter_number' => $line_item_wrapper->electricity_customer_number->value(),
      'phone_number' => $line_item_wrapper->electricity_phone_number->value(),
    );

    $inquiry = token_reload_request_call($data);
    if ($inquiry) {
      $form_state['line_item']->data['inquiry'] = $inquiry;
    }
    else {
      form_set_error('inquiry', 'Please retry');
    }
  }
}

/**
 * Function token_reload_queue_process().
 */
function token_reload_queue_process($line_item_id) {
  module_load_include('inc', 'token_reload');
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item_id);

  $data = array(
    'meter_number' => $line_item_wrapper->electricity_customer_number->value(),
    'phone_number' => $line_item_wrapper->electricity_phone_number->value(),
  );

  $inquiry = token_reload_request_call($data);
  if ($inquiry) {
    if ($inquiry['status'] == 'success') {
      $line_item_wrapper->value()->data['inquiry'] = $inquiry;
      $line_item_wrapper->save();
    }
    else {
      watchdog('token_reload', '@note: <pre>!inquiry</pre>', array('@note' => $inquiry['note'], '!inquiry' => print_r($inquiry, TRUE)), WATCHDOG_ERROR);
    }
  }

  $token_reloads = entity_load('token_reload', FALSE, array('line_item_id' => $line_item_id));
  if (empty($token_reloads)) {
    $token_reload = entity_create('token_reload', array('line_item_id' => $line_item_id));
  }
  else {
    $token_reload = reset($token_reloads);
  }

  $info = entity_get_property_info('token_reload');
  foreach ($inquiry as $key => $value) {
    if (isset($info['properties'][$key])) {
      $token_reload->$key = $value;
    }
  }

  $data = array(
    'product_id' => token_reload_products($line_item_wrapper->commerce_product->commerce_price->amount->value()),
    'meter_number' => $line_item_wrapper->electricity_customer_number->value(),
    'customer_number' => $line_item_wrapper->electricity_phone_number->value(),
    'order_id' => $line_item_wrapper->order->getIdentifier(),
  );

  if ($transaction = token_reload_request_call($data, 'transaction')) {
    if ($transaction['status'] == 'success') {
      $line_item_wrapper->field_line_item_status->set('success');
    }

    $token_reload->status = $transaction['status'];
    $token_reload->no_ref_2 = $transaction['transaction_id'];
    $token_reload->revision = TRUE;
    entity_save('token_reload', $token_reload);
  }
}

function token_reload_queue_query($data) {
  extract($data);
  if (empty($try)) {
    $try = 1;
  }

  module_load_include('inc', 'token_reload');
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item_id);

  $token_reloads = entity_load('token_reload', FALSE, array('line_item_id' => $line_item_id));
  if (!empty($token_reloads)) {
    $token_reload = reset($token_reloads);
    $total = db_select('token_reload_revision')
      ->condition('trid', $token_reload->trid)
      ->countQuery()
      ->execute()
      ->fetchField();

    $params = array(
      'start' => format_date($token_reload->time - 1, 'custom', 'YmdHis'),
      'end' => format_date($token_reload->time + 1, 'custom', 'YmdHis'),
      'ref_2' => $token_reload->data['ref_2'],
      'product_code' => variable_get('token_reload_product_code', 'PLNPRA'),
      'meter_number' => $token_reload->meter_number,
    );

    $max_try = variable_get('token_reload_try', 2);

    if ($query = token_reload_request_call(token_reload_request_query_data($params), 'datatransaksi')) {
      switch ($query['status']) {
        case '00':
          if (strtolower($query['note']) == 'successful') {
            $status = 'success';
            commerce_order_status_update($line_item_wrapper->order->value(), 'completed');
          }
          else {
            if ($try <= $max_try) {
              $try++;
              $queue = DrupalQueue::get('token_reload_query');
              $queue->createItem(array('try' => $try, 'line_item_id' => $line_item_wrapper->getIdentifier()));
              $status = 'in_queue';
            }
            $status = 'pending';
          }
          break;

        case '15':
          $queue = DrupalQueue::get('token_reload_process');
          $queue->createItem(array('line_item_id' => $line_item_wrapper->getIdentifier()));
          $status = 'in_queue';
          watchdog('token_reload', '@note: <pre>!payment</pre>', array('@note' => $query['note'], '!inquiry' => print_r($query, TRUE)), WATCHDOG_ERROR);
          break;

        case '':
        case '33':
          if ($try <= $max_try) {
            $try++;
            $queue = DrupalQueue::get('token_reload_query_' . $try);
            $queue->createItem(array('try' => $try, 'line_item_id' => $line_item_wrapper->getIdentifier()));
            $status = 'in_queue';
          }
          watchdog('token_reload', '@note: <pre>!payment</pre>', array('@note' => $query['note'], '!inquiry' => print_r($query, TRUE)), WATCHDOG_ERROR);
          break;

        default:
          $status = 'failed';
          watchdog('token_reload', '@note: <pre>!payment</pre>', array('@note' => $query['note'], '!payment' => print_r($query, TRUE)), WATCHDOG_ERROR);
          break;
      }

      $token_reload->status = $status;
      $token_reload->data = $query + $token_reload->data;
      $token_reload->revision = TRUE;
      entity_save('token_reload', $token_reload);
    }
    elseif ($try <= variable_get('token_reload_try', 2)) {
      $try++;
      $queue = DrupalQueue::get('token_reload_query_' . $try);
      $queue->createItem(array('try' => $try, 'line_item_id' => $line_item_wrapper->getIdentifier()));
      $token_reload->status = 'in_queue';
      entity_save('token_reload', $token_reload);
    }
    else {
      $token_reload->status = 'pending';
      entity_save('token_reload', $token_reload);
    }
  }
}

function token_reload_line_item_inquiry_data($data, $options, $name, $type, $info) {
  if (!empty($data->data['inquiry'][$name])) {
    return $data->data['inquiry'][$name];
  }
}

/**
 * Public Functions.
 */

function token_reload_default_settings() {
  return array(
    'environment' => 'dev',
    'endpoint' => '',
    'timeout' => 30,
    'uid' => '',
    'pin' => '',
  );
}

function token_reload_statuses() {
  return array(
    'success' => t('Success'),
    'pending' => t('Pending'),
    'failed' => t('Failed'),
    'double_transaction' => t('Double Transaction'),
    'error' => t('Error'),
    'in_queue' => t('In Queue'),
  );
}

function token_reload_products($nominal = NULL) {
  $cache = cache_get('token_reload_products');

  if ($cache) {
    $products = $cache->data;
  }
  else {
    $settings = variable_get('token_reload_settings', array()) + token_reload_default_settings();

    $uri = @parse_url($settings['endpoint']);
    $hostaddr = $uri['host'];
    if(!empty($uri['port'])) $hostaddr .= ':' . $uri['port'];
    $url = url($uri['scheme'] . '://' . $settings['username'] . ':' . $settings['secret'] . '@' . $hostaddr . $uri['path'] . '/product', array('external' => TRUE, 'query' => array('operator' => 'pln')));
    $options = array(
      'headers' => array(
        'Accept' => 'application/json',
        'Content-Type' => 'application/json',
      ),
      'method' => 'GET',
    );

    $result = drupal_http_request($url, $options);
    $data = drupal_json_decode($result->data);

    foreach ($data['list'] as $product) {
      $products[$product['price']] = $product['product_id'];
    }

    cache_set('token_reload_products', $products, 'cache', CACHE_TEMPORARY);
  }

  if (empty($nominal)) {
    return $products;
  }
  elseif (isset($products[$nominal])) {
    return $products[$nominal];
  }
}
