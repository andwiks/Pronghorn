<?php
/**
 * @file
 * topup.module
 *
 * @author andre4s_y
 */

/**
 * Topup request is success.
 */
define('TOPUP_SUCCESS', 1);

/**
 * Topup request is pending.
 */
define('TOPUP_PENDING', 2);

/**
 * Topup request is in queue.
 */
define('TOPUP_INQUEUE', 3);

/**
 * Topup request is canceled.
 */
define('TOPUP_CANCELED', 4);

/**
 * Topup request is contain error.
 */
define('TOPUP_ERROR', 5);

/**
 * Topup has no status.
 */
define('TOPUP_NONE', 7);

/**
 * Topup request is failed.
 */
define('TOPUP_FAILED', 0);

/**
 * Hook Implementations.
 */

/**
 * Implements hook_cron_queue_info().
 */
function topup_cron_queue_info() {
  $queue = array();
  // Topup queue process: first part.
  $queues['topup_process'] = array(
    'worker callback' => 'topup_queue_process',
    'time' => 120,
  );

  // Topup queue query: process pending topup.
  $queues['topup_query'] = array(
    'worker callback' => 'topup_queue_query',
    'time' => 120,
  );

  // Get try variable.
  $try = variable_get('topup_try', 3);
  $try = intval($try);
  if ($try > 1) {
    for ($i = 2; $i <= $try; $i++) {
      // Topup queue process: for multiple try.
      $queues['topup_process_' . $i] = array(
        'worker callback' => 'topup_queue_process',
        'time' => 120,
      );
      // Topup queue query: for multiple try.
      $queues['topup_query_' . $i] = array(
        'worker callback' => 'topup_queue_query',
        'time' => 120,
      );
    }
  }

  // Return queue array.
  return $queues;
}

/**
 * Implements hook_menu().
 */
function topup_menu() {
  $items = array();

  // Topup settings page.
  $items['admin/commerce/config/topup'] = array(
    'title' => 'Top up settings',
    'description' => 'Top up settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('topup_settings_form'),
    'access arguments' => array('configure store'),
    'file' => 'topup.admin.inc',
  );

  // Topup provider page: list.
  $items['admin/commerce/config/topup/provider'] = array(
    'title' => 'Top up Provider',
    'description' => 'Top up provider page',
    'page callback' => 'topup_provider_page',
    'access arguments' => array('configure store'),
    'file' => 'topup.admin.inc',
  );

  $items['admin/commerce/config/topup/provider/add'] = array(
    'title' => 'Add provider',
    'description' => 'Add provider page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('topup_provider_add_form'),
    'access arguments' => array('configure store'),
    'file' => 'topup.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Get all topup providers.
  $providers = topup_providers();

  // Topup provider setting page.
  foreach ($providers as $provider_id => $provider_data) {
    $items['admin/commerce/config/topup/provider/' . $provider_id] = array(
      'title' => $provider_data['title'],
      'description' => $provider_data['description'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('topup_provider_settings_form'),
      'access arguments' => array('configure store'),
      'file' => 'topup.admin.inc',
    );

    $items['admin/commerce/config/topup/provider/' . $provider_id . '/code'] = array(
      'title' => 'Code settings',
      'description' => $provider_data['description'] . ' code settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('topup_provider_code_settings_form'),
      'access arguments' => array('configure store'),
      'file' => 'topup.admin.inc',
    );

    $items['admin/commerce/config/topup/provider/' . $provider_id . '/disable'] = array(
      'title' => $provider_data['title'] . ' disable',
      'description' => $provider_data['description'] . ' disable',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('topup_provider_status_form'),
      'access arguments' => array('configure store'),
      'file' => 'topup.admin.inc',
      'type' => MENU_CALLBACK,
    );

    $items['admin/commerce/config/topup/provider/' . $provider_id . '/enable'] = array(
      'title' => $provider_data['title'] . ' enable',
      'description' => $provider_data['description'] . ' enable',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('topup_provider_status_form'),
      'access arguments' => array('configure store'),
      'file' => 'topup.admin.inc',
      'type' => MENU_CALLBACK,
    );

    $items['admin/commerce/config/topup/provider/' . $provider_id . '/delete'] = array(
      'title' => $provider_data['title'] . ' delete',
      'description' => $provider_data['description'] . ' delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('topup_provider_status_form'),
      'access arguments' => array('configure store'),
      'file' => 'topup.admin.inc',
      'type' => MENU_CALLBACK,
    );

    $items['topup/' . $provider_id . '/callback'] = array(
      'title' => $provider_data['title'] . ' callback',
      'description' => $provider_data['description'] . ' callback',
      'page callback' => 'topup_callback',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implements hook_views_api().
 */
function topup_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'topup') . '/includes/views',
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function topup_field_formatter_info() {
  return array(
    'topup_data_formatter' => array(
      'label' => t('Topup Data Formatter'),
      'description' => t('Display the topup data via a default View.'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function topup_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'topup_data_formatter':
      foreach ($items as $delta => $item) {
        // Check item: only serialize string contain valid data.
        if (isset($item['value']) && !empty($item['value']) && preg_match('#^a\:#i', $item['value'])) {
          // Unserialize value: because data saved in string field type.
          $topup_data = unserialize($item['value']);
          if ($topup_data !== FALSE && isset($topup_data['status'])
            && isset($topup_data['try']) && isset($topup_data['total'])
            && isset($topup_data['data'])
          ) {
            // Define topup data.
            $data = '';
            if (!empty($topup_data['data'])) {
              $data = '';
              if (is_array($topup_data['data'])) {
                foreach ($topup_data['data'] as $key => $value) {
                  if (is_array($value)) {
                    $temp = '';
                    foreach ($value as $k => $v) {
                      $temp .= t('<li>@key: @value</li>', array(
                        '@key' => $k,
                        '@value' => $v,
                      ));
                    }
                    $value = '<ul>' . $temp . '</ul>';
                  }
                  else {
                    $value = check_plain($value);
                  }
                  $data .= t('@key: !value<br />', array(
                    '@key' => $key,
                    '!value' => $value,
                  ));
                }
              }
              else {
                $data = check_plain($topup_data['data']);
              }
            }
            $element[$delta] = array(
              '#markup' => t('<strong>Topup #@no:</strong><br /><strong>Status:</strong> @status<br /><strong>Try:</strong> @try (@total)<br />!data', array(
                '@no' => $delta + 1,
                '@status' => $topup_data['status'],
                '@try' => $topup_data['try'],
                '@total' => $topup_data['total'],
                '!data' => !empty($data) ? $data : '-',
              )),
            );
          }
        }
        // Check whether element has been defined.
        if (!isset($element[$delta])) {
          $element[$delta] = array(
            '#markup' => t('No data'),
          );
        }
      }
    break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function topup_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  $element['help'] = array(
    '#markup' => '<p>' . t('No configuration is necessary.') . '</p>',
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function topup_field_formatter_settings_summary($field, $instance, $view_mode) {
  return t('Displaying topup data.');
}

/**
 * Callback Functions.
 */

/**
 * Function topup_queue_process().
 *
 * @param array $topup
 *   Topup data array.
 */
function topup_queue_process($topup = array()) {
  topup_queue('process', $topup);
}

/**
 * Function topup_queue_query().
 *
 * @param array $topup
 *   Topup data array.
 */
function topup_queue_query($topup = array()) {
  topup_queue('query', $topup);
}

/**
 * Function topup_callback().
 */
function topup_callback() {
  // Get provider id.
  $provider_id = arg(5);
  // Get all providers.
  $providers = topup_providers();
  // Check whether provider id is available.
  if (isset($providers[$provider_id])) {
    // Get topup callback.
    $callback = $providers[$provider_id]['base'] . '_topup_callback';
    // Check topup process callback.
    if (function_exists($callback) && is_callable($callback)) {
      call_user_func($callback);
    }
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Public Functions.
 */

/**
 * Function topup_requeue().
 *
 * @param int $line_item_id
 *   Line item id.
 *
 * @param string $op
 *   Requeue operation.
 */
function topup_requeue($line_item_id, $op = 'process') {
  // Get topup array.
  $topup = topup_get_topup_from_line_item_id($line_item_id);
  // Check whether pulsa container is available.
  if (!empty($topup)) {
    // Reset topup cancel list for this line item.
    $cancel_list = variable_get('topup_cancel_list', array());
    if (isset($cancel_list[$line_item_id])) {
      $cancel_list[$line_item_id] = array();
      unset($cancel_list[$line_item_id]);
      // Update topup cancel list.
      variable_set('topup_cancel_list', $cancel_list);
    }
    // Update topup status: in queue.
    topup_update_status($line_item_id, TOPUP_INQUEUE);
    // Get the queue.
    $queue = DrupalQueue::get('topup_' . $op);
    // Looping for each pulsa container.
    foreach ($topup as $item) {
      // For query operation.
      if ($op == 'query') {
        // Do as the last query, no need to try again.
        // Set maximum try.
        $item['try'] = variable_get('topup_try', 3);
        // Do not count total try.
        $item['total']--;
      }
      // Queue item.
      $queue->createItem($item);
    }
  }
}

/**
 * Function topup_query().
 *
 * @param int $line_item_id
 *   Line item id.
 */
function topup_query($line_item_id) {
  // Get topup array.
  $topup = topup_get_topup_from_line_item_id($line_item_id);
  // Get all providers.
  $providers = topup_providers();
  // Define output container.
  $output = array();
  // Check whether pulsa container is available.
  if (!empty($topup)) {
    // Looping for each topup.
    foreach ($topup as $id => $item) {
      // Check topup providers.
      if (isset($item['field_topup_provider']) && isset($providers[$item['field_topup_provider']])) {
        // Get topup callback.
        $callback = $providers[$item['field_topup_provider']]['base'] . '_topup_query';
        // Check topup process callback.
        if (function_exists($callback) && is_callable($callback)) {
          // Do not count total try.
          $item['total']--;
          // Define output container for this item.
          $output[$id] = array();
          // Call query callback.
          $result = $callback($item, $providers[$item['field_topup_provider']]['settings'], $output[$id]);
          // Store result back to output.
          $output[$id]['result'] = $result;
        }
      }
    }
  }
  return $output;
}

/**
 * Function topup_queue().
 *
 * @param string $op
 *   Queue operation: process|query.
 * @param array $topup
 *   Topup data.
 */
function topup_queue($op, $topup) {
  // Get topup queue cancel list.
  $cancel_list = variable_get('topup_cancel_list', array());
  // Check whether this topup is canceled.
  if (isset($cancel_list[$topup['line_item_id']][$topup['topup_id']])) {
    unset($cancel_list[$topup['line_item_id']][$topup['topup_id']]);
    // Reset topup cancel list.
    variable_set('topup_cancel_list', $cancel_list);
    // Exit the function gracefully.
    return;
  }
  // Get all providers.
  $providers = topup_providers();
  // Check topup providers.
  if (isset($topup['field_topup_provider']) && isset($providers[$topup['field_topup_provider']])) {
    // Get topup callback.
    $callback = $providers[$topup['field_topup_provider']]['base'] . '_topup_' . $op;
    // Check topup process callback.
    if (function_exists($callback) && is_callable($callback)) {
      // Define topup output: to store other data dan status.
      $topup_output = array();
      // Call callback functions.
      $result = $callback($topup, $providers[$topup['field_topup_provider']]['settings'], $topup_output);
      // Update topup data: whatever the result.
      $topup_data = topup_update_topup_data($topup, $result, $topup_output);
      // Check result status.
      switch ($result) {
        case TOPUP_ERROR:
          // Update topup status: error.
          topup_update_status($topup['line_item_id'], $result);
          // Then do nothing.
          break;

        case TOPUP_FAILED:
          // Check whether topup try has not been reach.
          if ($topup['try'] < variable_get('topup_try', 3)) {
            // Add try data.
            $topup['try']++;
            // Add try total data.
            $topup['total']++;
            // Update topup data.
            $topup['topup_data'] = unserialize($topup_data[$topup['topup_id']]);
            // Update topup status: in queue.
            topup_update_status($topup['line_item_id'], TOPUP_INQUEUE);
            // Queue it once again.
            $queue = DrupalQueue::get('topup_process_' . $topup['try']);
            $queue->createItem($topup);
          }
          else {
            // Check total quantity.
            if ($topup['topup_total'] == 1) {
              $failed = 1;
            }
            else {
              $failed = 0;
              // Check topup data.
              for ($i = 0; $i < $topup['topup_total']; $i++) {
                // Unserialize topup data.
                $topup_data[$i] = unserialize($topup_data[$i]);
                // Check topup data: using $i.
                if (isset($topup_data[$i]['status']) && $topup_data[$i]['status'] == $result) {
                  $failed++;
                }
              }
            }

            // Update topup status if total success >= topup total.
            if ($failed >= $topup['topup_total']) {
              topup_update_status($topup['line_item_id'], $result);
            }
          }
          break;

        case TOPUP_PENDING:
          // Get topup try query.
          $topup['try_query'] = isset($topup['try_query']) ? intval($topup['try_query']) : 1;
          // Check whether topup try still allowed
          if ($topup['try_query'] < variable_get('topup_try', 3)) {
            $topup['try_query']++;
            // Update topup status: in queue.
            topup_update_status($topup['line_item_id'], TOPUP_INQUEUE);
            // Update topup data.
            $topup['topup_data'] = unserialize($topup_data[$topup['topup_id']]);
            // Queue for query.
            $queue = ($topup['try_query'] == 1) ? 'topup_query' : 'topup_query_' . $topup['try_query'];
            $queue = DrupalQueue::get($queue);
            $queue->createItem($topup);
          }
          else {
            // Update topup status: pending.
            topup_update_status($topup['line_item_id'], $result);
          }
          break;

        case TOPUP_SUCCESS:
          // Check total quantity.
          if ($topup['topup_total'] == 1) {
            $success = 1;
          }
          else {
            $success = 0;
            // Check topup data.
            for ($i = 0; $i < $topup['topup_total']; $i++) {
              // Unserialize topup data.
              $topup_data[$i] = unserialize($topup_data[$i]);
              // Check topup data: using $i.
              if (isset($topup_data[$i]['status']) && $topup_data[$i]['status'] == $result) {
                $success++;
              }
            }
          }

          // Update topup status if total success >= topup total.
          if ($success >= $topup['topup_total']) {
            topup_update_status($topup['line_item_id'], $result);
          }

          // Define all topup success variable.
          $all_topup_success = FALSE;
          // Define topup line item counter.
          $topup_counter_success = $topup_counter = 0;
          // Define order wrapper: to get total order amount.
          $order_wrapper = entity_metadata_wrapper('commerce_order', $topup['order_id']);
          // Looping for each line item.
          foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
            // Only for line item: topup_lineitem_type.
            if ($line_item_wrapper->type->value() == variable_get('topup_lineitem_type', 'mobile_prepaid')) {
              $topup_counter++;
              // Check field topup status.
              if ($line_item_wrapper->field_topup_status->value() == $result) {
                $topup_counter_success++;
              }
            }
          }
          // Update variable all topup success.
          $all_topup_success = ($topup_counter_success >= $topup_counter) ? TRUE : $all_topup_success;

          // Invoke event when all topups success.
          if ($all_topup_success) {
            // Define order.
            $order = $order_wrapper->value();

            // Trigger the event now.
            rules_invoke_all('all_topup_success', $order);

            // Update the order's data array to indicate this just happened.
            $order->data['all_topup_success_invoked'] = TRUE;

            // Save the updated order.
            commerce_order_save($order);
          }
          break;
      }
    }
  }
}

/**
 * Function topup_providers().
 *
 * Get list of all topup providers.
 *
 * @return array.
 */
function topup_providers() {
  $providers = &drupal_static(__FUNCTION__);

  if (!isset($providers)) {
    $providers = array();

    // Build the provider array, including module names for the purpose
    // of including files if necessary.
    foreach (module_implements('topup_provider_info') as $module) {
      $module_providers = module_invoke($module, 'topup_provider_info');
      $module_providers += variable_get('topup_providers_' . $module, array());
      // Looping for each provider invoke.
      foreach ($module_providers as $base => $provider) {
        // Get provider title.
        $providers[$base]['title'] = variable_get('topup_providers_title_' . $base, $provider['title']);
        // Get provider description.
        $providers[$base]['description'] = variable_get('topup_providers_desc_' . $base, $provider['description']);
        // Define default status.
        $default_status = (isset($provider['status'])) ? $provider['status'] : FALSE;
        // Get provider status.
        $providers[$base]['status'] = variable_get('topup_providers_status_' . $base, $default_status);
        // Get providers base callback name.
        $providers[$base]['base'] = $module;
        // Get providers settings.
        $providers[$base]['settings'] = variable_get('topup_providers_settings_' . $base, array());
      }
    }

    drupal_alter('topup_provider_info', $providers);
  }

  return $providers;
}

/**
 * Function topup_provider_get_all_codes().
 *
 * @return array
 *   Topup code array.
 */
function topup_provider_get_all_codes() {
  $codes = &drupal_static(__FUNCTION__);

  if (!isset($codes)) {
    $codes = array();

    // Get topup providers.
    $providers = topup_providers();

    // Looping for each provider.
    foreach ($providers as $provider_id => $provider_data) {
      // Check provider code info.
      $code_info = $provider_data['base'] . '_topup_code_info';
      if (function_exists($code_info) && is_callable($code_info)) {
        $provider_codes = call_user_func($code_info);

        // Check whether provider id is exists or info only provide codes.
        if (isset($provider_codes[$provider_id])) {
          $codes[$provider_id] = $provider_codes[$provider_id];
        }
      }
    }
  }

  return $codes;
}

/**
 * Function topup_translate_status().
 *
 * @param int $status
 *   Topup status.
 *
 * @return string
 *   Translated topup status.
 */
function topup_translate_status($status) {
  switch ($status) {
    case TOPUP_SUCCESS:
      return t('Success');

    case TOPUP_PENDING:
      return t('Pending');

    case TOPUP_FAILED:
      return t('Failed');

    case TOPUP_INQUEUE:
      return t('In Queue');

    case TOPUP_CANCELED:
      return t('Canceled');

    case TOPUP_ERROR:
      return t('Error');

    case TOPUP_NONE:
      return t('No Status');

    default:
      return t('Unknown');
  }
}

/**
 * Function topup_get_topup_from_line_item_id().
 *
 * @param int $line_item_id
 *   Line item id.
 *
 * @return array.
 *   Topup array.
 */
function topup_get_topup_from_line_item_id($line_item_id) {
  // Sanitize input line item id.
  $line_item_id = intval($line_item_id);
  // Get line item object.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item_id);
  // Define topup array.
  $topup = array();
  // Only for line item: topup_lineitem_type.
  if ($line_item_wrapper->type->value() == variable_get('topup_lineitem_type', 'mobile_prepaid')) {
    // Get Topup provider.
    $field_topup_provider = variable_get('topup_field_provider', 'field_api_provider');
    // Get topup code.
    $field_topup_code = variable_get('topup_field_code', 'field_package_code');
    // Get quantity.
    $quantity = intval($line_item_wrapper->quantity->value());
    // Get previous topup data.
    $topup_data = $line_item_wrapper->field_topup_data->value();
    // Looping for each quantity.
    for ($i = 0; $i < $quantity; $i++) {
      // Get topup_data for this topup id.
      $topup_data_id = (isset($topup_data[$i])) ? unserialize($topup_data[$i]) : array();
      // Store it in the container: for each quantity.
      $topup[] = array(
        'order_id' => $line_item_wrapper->order_id->value(),
        'topup_id' => $i,
        'topup_total' => $quantity,
        'topup_data' => $topup_data_id,
        'try' => 1,
        'total' => (isset($topup_data_id['total']) ? ($topup_data_id['total'] + 1) : 1),
        'line_item_id' => $line_item_id,
        'field_topup_provider' => $line_item_wrapper->commerce_product->$field_topup_provider->value(),
        'field_topup_phone_number' => $line_item_wrapper->field_phone_number->value(),
        'field_topup_code' => $line_item_wrapper->commerce_product->$field_topup_code->value(),
      );
    }
  }
  // Return topup array.
  return $topup;
}

/**
 * Function topup_update_status().
 *
 * @param int $line_item_id
 *   Line Item ID.
 * @param int $status
 *   Topup status.
 */
function topup_update_status($line_item_id, $status) {
  // Get line item wrapper.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', intval($line_item_id));
  // Check field topup_status availability.
  if (isset($line_item_wrapper->field_topup_status)
    && $line_item_wrapper->field_topup_status->value() != $status
  ) {
    // Check whether topup status is in queue.
    if ($status == TOPUP_INQUEUE || $status == TOPUP_CANCELED) {
      $topup_inqueue = topup_translate_status($status);
      $topup_data = $line_item_wrapper->field_topup_data->value();
      foreach ($topup_data as $id => $topup) {
        $topup = unserialize($topup);
        if (isset($topup['status']) && $topup['status'] != $topup_inqueue) {
          $topup['status'] = $topup_inqueue;
        }
        $topup_data[$id] = serialize($topup);
      }
      $line_item_wrapper->field_topup_data->set($topup_data);
    }
    // Set topup status.
    $line_item_wrapper->field_topup_status->set($status);
    // Save line item.
    $line_item_wrapper->save();
  }
}

/**
 * Function topup_delete_data().
 *
 * @param int $line_item_id
 *   Line item ID.
 */
function topup_delete_topup_data($line_item_id) {
  // Get line item wrapper.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', intval($line_item_id));
  // Check field topup_status availability.
  if (isset($line_item_wrapper->field_topup_data)) {
    // Set with empty array.
    $line_item_wrapper->field_topup_data->set(array());
    // Save line item.
    $line_item_wrapper->save();
  }
}

/**
 * Function topup_update_topup_data().
 *
 * @param array $topup
 *   Topup data.
 * @param int $result
 *   Topup result status.
 * @param array $output
 *   Topup result output.
 *
 * @return array
 *   Updated topup data.
 */
function topup_update_topup_data($topup, $result, $output) {
  // @todo: wrap this using try and catch: in case field topup data overmax.
  // Load line item wrapper.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $topup['line_item_id']);
  // Get current topup data.
  $topup_data = $line_item_wrapper->field_topup_data->value();
  // Create updated topup data.
  $topup_data_update = array(
    'status' => topup_translate_status($result),
    'try' => $topup['try'],
    'total' => $topup['total'],
    'data' => (isset($output['topup_data']) && !empty($output['topup_data'])) ? $output['topup_data'] : '',
  );
  // Serialize topup data and get back to previous topup data.
  $topup_data[$topup['topup_id']] = serialize($topup_data_update);
  // Set the topup data.
  $line_item_wrapper->field_topup_data->set($topup_data);
  // Save line item.
  $line_item_wrapper->save();
  // Return updated topup data.
  return $topup_data;
}
