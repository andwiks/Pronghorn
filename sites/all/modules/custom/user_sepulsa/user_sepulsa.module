<?php
/**
 * @file
 * user_sepulsa.module
 *
 * @author ananto@sepulsa.com
 */


/*
 * Implements hook_menu_alter()
 */
function user_sepulsa_menu_alter(&$items) {
  $items['user/%/hybridauth']['access callback'] = FALSE;
  $items['user/%user/edit']['title'] = "Informasi Akun";
}

/*
 * Implements hook_page_alter()
 */
function user_sepulsa_page_alter(&$page) {
  if (arg(0) == 'user' && arg(1) >= 1 && arg(3) == '') {
    $u = user_load(arg(1));
    drupal_set_title($u->mail);
  } else if (arg(0) == 'cart') {
    drupal_goto("<front>");
  }
}

/*
 * Implements hook_user_view()
 */
function user_sepulsa_user_view($account, $view_mode, $langcode) {
  //drupal_set_message($view_mode);
  if ($view_mode == 'full') {
    //drupal_set_message("<pre>".print_r($account, true)."</pre>");
    $account->content['hybridauth_identities'] = NULL;
    $account->content['mimemail'] = NULL;
  }
}

/**
 * Implements hook_block_info().
 */
function user_sepulsa_block_info() {
  $blocks = array();
  
  $blocks['user_sepulsa_register'] = array(
    'info' => t("User Registration"),
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function user_sepulsa_block_view($delta = '') {
  $block = array();
  
  switch ($delta) {
    case 'user_sepulsa_register':
      $block['subject'] = t('User Registration');
      $block['content'] = user_sepulsa_register_block_contents();
      return $block;
      break;
  } 
}

/**
 * A module-defined block content function.
 */
function user_sepulsa_register_block_contents() {
  $output = drupal_get_form("user_register_form");
  
  return $output;
}


/* ------------------- START USER REGISTRATION EXTEND --------------------------------- */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_sepulsa_form_user_register_form_alter(&$form, &$form_state) {
  $form['account']['name']['#type'] = 'hidden';
  $form['account']['name']['#value'] = 'email_registration_' . user_password();
  $form['account']['mail']['#title'] = t('E-mail');
}

/**
 * Implements hook_user_insert().
 */
function user_sepulsa_user_insert(&$edit, &$account, $category = NULL) {
  // Don't create a new username if one is already set.
  if (!empty($account->name) && strpos($account->name, 'email_registration_') !== 0) {
    return;
  }

  // Other modules may implement hook_email_registration_name($edit, $account)
  // to generate a username (return a string to be used as the username, NULL
  // to have email_registration generate it).
  $names = module_invoke_all('user_sepulsa_name', $edit, $account);
  // Remove any empty entries.
  $names = array_filter($names);

  if (empty($names)) {
    // Strip off everything after the @ sign.
    $new_name = preg_replace('/@.*$/', '', $edit['mail']);
    // Clean up the username.
    $new_name = _user_sepulsa_cleanup_username($new_name, $account->uid);
  }
  else {
    // One would expect a single implementation of the hook, but if there
    // are multiples out there use the last one.
    $new_name = array_pop($names);
  }

  // Ensure whatever name we have is unique.
  $new_name = _user_sepulsa_unique_username($new_name, $account->uid);

  // Replace with generated username.
  db_update('users')
    ->fields(array('name' => $new_name))
    ->condition('uid', $account->uid)
    ->execute();

  $edit['name'] = $new_name;
  $account->name = $new_name;
}

/**
 * Function to clean up username.
 *
 * e.g.
 *     Replace two or more spaces with a single underscore
 *     Strip illegal characters.
 *
 * @param string $name
 *   The username to be cleaned up.
 *
 * @return string
 *   Cleaned up username.
 */
function _user_sepulsa_cleanup_username($name, $uid = NULL) {
  // Strip illegal characters.
  $name = preg_replace('/[^\x{80}-\x{F7} a-zA-Z0-9@_.\'-]/', '', $name);

  // Strip leading and trailing spaces.
  $name = trim($name);

  // Convert any other series of spaces to a single underscore.
  $name = preg_replace('/  +/', '_', $name);

  // If there's nothing left use a default.
  $name = ('' === $name) ? t('user') : $name;

  if (!empty($uid)) {
    // Put uid on the end of the name.
    $name = $name . '_' . $uid;
  }

  // Truncate to a reasonable size.
  $name = (drupal_strlen($name) > (USERNAME_MAX_LENGTH - 10)) ? drupal_substr($name, 0, USERNAME_MAX_LENGTH - 11) : $name;
  return $name;
}

/**
 * Given a starting point returns a legal, unique Drupal username.
 *
 * This function is designed to work on the results of the /user/register or
 * /admin/people/create forms which have already called user_validate_name,
 * valid_email_address or a similar function. If your custom code is creating
 * users, you should ensure that the email/name is already validated using
 * something like that.
 *
 * @param string $name
 *   A name from which to base the final user name.  May contain illegal
 *   characters; these will be stripped.
 * @param int $uid
 *   (optional) Uid to ignore when searching for unique user
 *   (e.g. if we update the username after the {users} row is inserted)
 *
 * @return string
 *   A unique user name based on $name.
 *
 * @see user_validate_name()
 */
function _user_sepulsa_unique_username($name, $uid) {
  // Iterate until we find a unique name.
  $i = 0;
  do {
    $new_name = empty($i) ? $name : $name . '_' . $i;
    $found = db_query_range("SELECT uid from {users} WHERE uid <> :uid AND name = :name", 0, 1, array(':uid' => $uid, ':name' => $new_name))->fetchAssoc();
    $i++;
  } while (!empty($found));

  return $new_name;
}

