<?php
/**
 * @file
 * userpoints_services.module
 */

/**
 * Hook Implementations.
 */

/**
 * Implements hook_services_resources().
 */
function userpoints_services_services_resources() {
  $definition = array(
    'userpoints' => array(
      'actions' => array(
        'userpoints_list' => array(
          'help' => 'Get Userpoints List',
          'callback' => '_userpoints_services_list',
          'documentation callback' => 'userpoints_services_list_doc',
          'access callback' => 'services_access_menu',
          'args' => array(
            // no parameter
          ),
        ),
      ),
    ),
  );
  return $definition;
}

/**
 * Callback Functions.
 */

/**
 * Resources callback for order detail.
 */
function _userpoints_services_list(){
  global $user;
  $userpoints_detail = [];
  if ($user->uid == 0) return services_error(t('Invalid User'), 406);
  // Wrap around using try and catch.
  try {
    $totalamount = userpoints_get_current_points($user->uid);
    //$totalamount = number_format($totalamount,0,",",".");
    $stati = userpoints_txn_status();
    $query = db_select('userpoints_txn', 'p')
        ->fields('p')
        ->condition('p.uid', $user->uid)
        ->condition('p.status', '0') // only show approved userpoints
        ->orderBy('p.txn_id', 'DESC');

    if (module_exists('taxonomy')) {
      $query->leftJoin('taxonomy_term_data', 't', 'p.tid = t.tid');
    }
    foreach ($query->execute() as $transaction) {
        $userpoints_detail[] = array(
            'txn_id' => $transaction->txn_id,
            'uid' => $transaction->uid,
            'points' => $transaction->points,
            'description' => $transaction->description,
            //'time_stamp' => format_date($transaction->time_stamp, 'small'),
            'time_stamp' => $transaction->time_stamp,
            'status' => $stati[$transaction->status]
        );
    }
    $userpoints = ['userpoints_total' => $totalamount, 'userpoints_detail' => $userpoints_detail];
    
    return $userpoints;
  }
  catch (Exception $exception) {
    // Log this condition.
    watchdog('userpoints_services', 'Error at @location. Trace:<pre>@trace</pre>', array(
      '@location' => __FUNCTION__,
      '@trace' => _drupal_render_exception_safe($exception),
    ), WATCHDOG_ERROR, t('Userpoints Services'));
  }
  // Other condition return error;
  return services_error(t('Invalid Line Item'), 406);
}

/**
 * Documentation callback for order actions order list.
 */
function userpoints_services_list_doc() {
  global $base_url;
  $response = '
  [
      {
          "txn_id": "1",
          "uid": "1",
          "points": "10000",
          "description": "User xxx has made first purchase",
          "time_Stamp": 1426353153,
          "status": 0
      },
      {
          "txn_id": "2",
          "uid": "1",
          "points": "-10000",
          "description": "Using credit for purchase",
          "time_Stamp": 1426353153,
          "status": 0
      },
  ]
  ';
  $element = array(
    '#name' => t('Userpoints List Service'),
    '#description' => t('Get Userpoints List'),
    '#auth' => TRUE,
    '#path' => 'userpoints/userpoints_list',
    // Example request. E.g., a request URL, headers, and a JSON array.
    '#request_url' => $base_url . '/api/userpoints/userpoints_list.json<br />
    POST data application/json:
    ',
    // Example response. E.g., a JSON array.
    '#response' => $response,
    // Resource prefix.
    '#verb' => 'actions',
    // Errors.
    '#errors' => array(
      'csrf_validation' => array(
        '#question' => '401 Unauthorized: CSRF Validation Failed',
        '#description' => t('When drupal detect that the user already login from other site or header X-CSRF-Token is needed.'),
        '#response' => '
        [
          "CSRF validation failed"
        ]',
      ),
      'internal_server' => array(
        '#question' => '500 Internal Server Error',
        '#description' => t('Drupal server can not handle the request. Drupal will output nothing.'),
        '#response' => '',
      ),
    ),
  );
  return $element;
}
